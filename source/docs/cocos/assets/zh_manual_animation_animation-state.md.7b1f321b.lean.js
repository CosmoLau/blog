import{_ as t,v as e,b as a,R as s}from"./chunks/framework.5ffcbaff.js";const o="/docs/cocos/assets/playback-control.b5cefe0c.svg",A=JSON.parse('{"title":"动画状态","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/animation/animation-state.md","filePath":"zh/manual/animation/animation-state.md"}'),l={name:"zh/manual/animation/animation-state.md"},n=s(`<h1 id="动画状态" tabindex="-1">动画状态 <a class="header-anchor" href="#动画状态" aria-label="Permalink to &quot;动画状态&quot;">​</a></h1><p>动画剪辑仅描述某一类对象的动画数据，例如角色的跑、走、跳等，但并未绑定具体要执行动画的对象。动画状态便是用于控制在某个对象上使用的动画剪辑，类似于播放机，除了提供动画组件也有的简单的控制函数外，还提供了更多的动画信息以及动画控制接口，允许对动画播放进行调速、设置循环模式等控制。一个动画剪辑可以同时被多个动画状态使用。</p><p>动画状态由 <a href="./__APIDOC__/zh/class/AnimationState.html">类 <code>AnimationState</code></a> 管理。</p><h2 id="设置播放速度" tabindex="-1">设置播放速度 <a class="header-anchor" href="#设置播放速度" aria-label="Permalink to &quot;设置播放速度&quot;">​</a></h2><p>首先可以通过 <a href="./__APIDOC__/zh/class/Animation.html?id=getState">getState()</a> 获取动画状态：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 获取动画组件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> animationComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(Animation)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取动画组件上的动画剪辑</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> idleClip</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> runClip </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> animationComponent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clips</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取 idleClip 的动画状态</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> idleState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> animationComponent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getState</span><span style="color:#A6ACCD;">(idleClip</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>然后设置动画播放的速度：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 以二倍速播放 idleClip 动画</span></span>
<span class="line"><span style="color:#A6ACCD;">animationComponent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">idle</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">speed </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// speed 值越大速度越快，值越小则速度越慢</span></span></code></pre></div><p>动画状态也提供了 <code>play()</code>、<code>pause()</code>、<code>resume()</code>、<code>stop()</code> 等用于播放控制的方法，详情可参考下文 <strong>播放状态</strong> 部分的内容。</p><h2 id="播放时间" tabindex="-1">播放时间 <a class="header-anchor" href="#播放时间" aria-label="Permalink to &quot;播放时间&quot;">​</a></h2><p>动画状态记录了动画的 <strong>累计播放时间</strong>。初始时累计播放时间为 0。当动画自然播放时，时间会不断累计。例如，当动画循环播放时，刚好第二次循环完毕后，累计播放时间将为 <strong>动画周期 * 2</strong>。</p><p>任意时刻动画所处的播放位置称为 <strong>进度时间</strong>，因此进度时间总是在 <code>[0, 动画周期]</code> 范围内。</p><ul><li><strong>累计播放时间</strong> 由 <code>AnimationState</code> 的 <a href="./__APIDOC__/zh/class/AnimationState.html?id=time">time</a> 字段获取，并且可以显式设置。</li><li><strong>进度时间</strong> 由 <code>AnimationState</code> 的 <a href="./__APIDOC__/zh/class/AnimationState.html?id=wrapMode">current</a> 字段获取，是 <strong>只读</strong> 的。</li></ul><p>动画播放的循环模式与循环次数决定了累计播放至某一时间时动画的进度时间，不管 <strong>累计播放时间</strong> 因为时间的推移而增加还是因为直接设置而更改，<strong>进度时间</strong> 都会相应发生改变。</p><h2 id="循环模式与循环次数" tabindex="-1">循环模式与循环次数 <a class="header-anchor" href="#循环模式与循环次数" aria-label="Permalink to &quot;循环模式与循环次数&quot;">​</a></h2><p>动画可以播放到结尾就停止，或者一直循环播放，或者也可以先播放到结尾再从结尾播放到开头如此循环，这些统称为循环模式，由枚举 <a href="./__APIDOC__/zh/class/AnimationClip.html?id=wrapMode"><code>AnimationClip.WrapMode</code></a> 表示，包括以下几种：</p><table><thead><tr><th style="text-align:left;">循环模式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>AnimationClip.WrapMode.Normal</code></td><td style="text-align:left;">从开头播放至结尾后停止。</td></tr><tr><td style="text-align:left;"><code>AnimationClip.WrapMode.Loop</code></td><td style="text-align:left;">不断地从开头播放至结尾。</td></tr><tr><td style="text-align:left;"><code>AnimationClip.WrapMode.PingPong</code></td><td style="text-align:left;">从开头播放至结尾后，再从结尾反向播放至开头，如此循环往复。</td></tr></tbody></table><p>除此之外，上表中的每种循环模式还存在对应的 <strong>反向</strong> 循环模式：</p><table><thead><tr><th style="text-align:left;">循环模式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>AnimationClip.WrapMode.Reverse</code></td><td style="text-align:left;">从结尾播放至开头后停止。</td></tr><tr><td style="text-align:left;"><code>AnimationClip.WrapMode.LoopReverse</code></td><td style="text-align:left;">不断地从结尾播放至开头。</td></tr><tr><td style="text-align:left;"><code>AnimationClip.WrapMode.PingPongReverse</code></td><td style="text-align:left;">从结尾播放至开头后，再从开头反向播放至结尾，如此循环往复。</td></tr></tbody></table><p>动画状态的初始循环模式将从动画剪辑中读取。需要改变动画状态的循环模式时，简单地设置动画状态的 <code>wrapMode</code> 字段即可。</p><blockquote><p><strong>注意</strong>：设置循环模式时会重置动画状态的 <strong>累计播放时间</strong>。</p></blockquote><p>除 <code>AnimationClip.WrapMode.Normal</code> 和其对应的 <code>AnimationClip.WrapMode.Reverse</code> 外（它们可以理解为单次循环），其余的循环模式执行的都是无限次循环。无限次循环需要与 <code>AnimationState</code> 的 <code>repeatCount</code> 配合使用才能达到效果，并且可以通过 <code>repeatCount</code> 字段来设置和获取循环的次数。</p><p>当动画循环模式为：</p><ul><li>单次循环模式：<code>repeatCount</code> 将被设置为 <strong>1</strong>。</li><li>无限次循环模式：<code>repeatCount</code> 将被设置为 <code>Number.Infinity</code>，即无限循环。</li></ul><blockquote><p><strong>注意</strong>：设置循环次数应该在设置循环模式之后进行，因为重新设置循环模式时会重置循环次数。</p></blockquote><h2 id="播放控制" tabindex="-1">播放控制 <a class="header-anchor" href="#播放控制" aria-label="Permalink to &quot;播放控制&quot;">​</a></h2><p>动画状态提供了以下几种方法用于控制动画的播放、暂停、恢复和停止：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>play()</code></td><td style="text-align:left;">重置播放时间为 0 并开始播放动画。</td></tr><tr><td style="text-align:left;"><code>pause()</code></td><td style="text-align:left;">暂停动画。</td></tr><tr><td style="text-align:left;"><code>resume()</code></td><td style="text-align:left;">从当前时间开始继续播放动画。</td></tr><tr><td style="text-align:left;"><code>stop()</code></td><td style="text-align:left;">停止播放动画。</td></tr></tbody></table><p>也可以通过以下字段查询动画的播放状态：</p><table><thead><tr><th style="text-align:left;">字段（只读）</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isPlaying</code></td><td style="text-align:left;">动画是否处于播放状态。</td></tr><tr><td style="text-align:left;"><code>isPaused</code></td><td style="text-align:left;">动画是否处于暂停状态。</td></tr><tr><td style="text-align:left;"><code>isMotionless</code></td><td style="text-align:left;">动画是否处于暂停状态或者已被停止。</td></tr></tbody></table><p>播放控制与播放状态之间的关系如下图所示：</p><p><img src="`+o+'" alt="Playback control"></p><p>通过动画状态可以获取到所有动画的信息，以便利用这些信息来判断需要做哪些事，更多接口请参考 <a href="./__APIDOC__/zh/class/AnimationState.html">类 <code>AnimationState</code></a>。</p>',33),p=[n];function i(r,d,c,y,g,h){return e(),a("div",null,p)}const m=t(l,[["render",i]]);export{A as __pageData,m as default};
