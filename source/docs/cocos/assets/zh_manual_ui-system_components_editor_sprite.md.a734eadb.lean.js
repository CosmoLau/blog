import{_ as t,v as e,b as r,R as s}from"./chunks/framework.5ffcbaff.js";const l="/docs/cocos/assets/sprite-component.dd0c5c30.png",a="/docs/cocos/assets/tiled.4c3295da.png",i="/docs/cocos/assets/radial.f9c947aa.png",x=JSON.parse('{"title":"Sprite 组件参考","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/ui-system/components/editor/sprite.md","filePath":"zh/manual/ui-system/components/editor/sprite.md"}'),o={name:"zh/manual/ui-system/components/editor/sprite.md"},n=s('<h1 id="sprite-组件参考" tabindex="-1">Sprite 组件参考 <a class="header-anchor" href="#sprite-组件参考" aria-label="Permalink to &quot;Sprite 组件参考&quot;">​</a></h1><p>Sprite（精灵）是 2D/3D 游戏最常见的显示图像的方式，在节点上添加 Sprite 组件，就可以在场景中显示项目资源中的图片。</p><p><img src="'+l+'" alt="add sprite"></p><p>点击 <strong>属性检查器</strong> 下面的 <strong>添加组件</strong> 按钮，然后选择 <strong>2D/Sprite</strong> 即可添加 Sprite 组件到节点上。</p><p>图像的组件接口请参考 <a href="./__APIDOC__/zh/class/Sprite.html">Sprite API</a>。</p><p>关于使用可以参考范例 <strong>Sprite</strong>（<a href="https://github.com/cocos/cocos-test-projects/tree/v3.7/assets/cases/ui/01.sprite" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.7/assets/cases/ui/01.sprite" target="_blank" rel="noreferrer">Gitee</a>）。</p><h2 id="sprite-属性" tabindex="-1">Sprite 属性 <a class="header-anchor" href="#sprite-属性" aria-label="Permalink to &quot;Sprite 属性&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">Type</td><td style="text-align:left;">渲染模式，包括普通（Simple）、九宫格（Sliced）、平铺（Tiled）和填充（Filled）四种模式，详情请参考下文 <strong>渲染模式</strong> 部分的内容</td></tr><tr><td style="text-align:left;">CustomMaterial</td><td style="text-align:left;">自定义材质，使用方法参考 <a href="./../engine/ui-material.html">自定义材质</a></td></tr><tr><td style="text-align:left;">Grayscale</td><td style="text-align:left;">灰度模式，开启后 Sprite 会使用灰度模式渲染。</td></tr><tr><td style="text-align:left;">Color</td><td style="text-align:left;">图片颜色</td></tr><tr><td style="text-align:left;">Sprite Atlas</td><td style="text-align:left;">Sprite 显示图片资源所属的图集（参考 <a href="./../../../asset/atlas.html">Atlas</a>）。</td></tr><tr><td style="text-align:left;">Sprite Frame</td><td style="text-align:left;">渲染 Sprite 使用的 <a href="./../../../asset/sprite-frame.html">SpriteFrame 图片资源</a>。</td></tr><tr><td style="text-align:left;">Size Mode</td><td style="text-align:left;">指定 Sprite 的尺寸<br><strong>Trimmed</strong> 表示会使用原始图片资源裁剪透明像素后的尺寸<br><strong>Raw</strong> 表示会使用原始图片未经裁剪的尺寸<br> <strong>Custom</strong> 表示会使用自定义尺寸。当用户手动修改过 <strong>Size</strong> 属性后，<strong>Size Mode</strong> 会被自动设置为 <strong>Custom</strong>，除非再次指定为前两种尺寸。</td></tr><tr><td style="text-align:left;">Trim</td><td style="text-align:left;">是否渲染原始图像周围的透明像素区域，详情请参考 <a href="./../engine/trim.html">图像资源的自动剪裁</a></td></tr></tbody></table><p>添加 Sprite 组件之后，通过从 <strong>资源管理器</strong> 中拖拽 SpriteFrame 类型的资源到 <strong>SpriteFrame</strong> 属性引用中，就可以通过 Sprite 组件显示资源图像。</p><p>如果拖拽的 SpriteFrame 资源是包含在一个 Atlas 图集资源中的，那么 Sprite 的 <strong>Atlas</strong> 属性也会被一起设置。</p><p><strong>若要动态更换 SpriteFrame 则需要先动态加载图片资源，然后再进行替换，详情请参考 <a href="./../../../asset/dynamic-load-resources.html#加载-spriteframe-或-texture2d">获取和加载资源：动态加载</a>。</strong></p><h2 id="渲染模式" tabindex="-1">渲染模式 <a class="header-anchor" href="#渲染模式" aria-label="Permalink to &quot;渲染模式&quot;">​</a></h2><p>Sprite 组件支持以下几种渲染模式：</p><ul><li><p><code>普通模式（Simple）</code>：根据原始图片资源渲染 Sprite，一般在这个模式下我们不会手动修改节点的尺寸，来保证场景中显示的图像和美术人员生产的图片比例一致。</p></li><li><p><code>九宫格模式（Sliced）</code>：图像将被分割成九宫格，并按照一定规则进行缩放以适应可随意设置的尺寸(<code>size</code>)。通常用于 UI 元素，或将可以无限放大而不影响图像质量的图片制作成九宫格图来节省游戏资源空间。详细信息请阅读 <a href="./../engine/sliced-sprite.html#-">使用 Sprite 编辑器制作九宫格图像</a> 一节。</p></li><li><p><code>平铺模式（Tiled）</code>：当 Sprite 的尺寸增大时，图像不会被拉伸，而是会按照原始图片的大小不断重复，就像平铺瓦片一样将原始图片铺满整个 Sprite 规定的大小。</p><p><img src="'+a+'" alt="tiled"></p></li><li><p><code>填充模式（Filled）</code>：根据原点和填充模式的设置，按照一定的方向和比例绘制原始图片的一部分。经常用于进度条的动态展示。</p></li></ul><h3 id="填充模式-filled" tabindex="-1">填充模式（Filled） <a class="header-anchor" href="#填充模式-filled" aria-label="Permalink to &quot;填充模式（Filled）&quot;">​</a></h3><p><strong>Type</strong> 属性选择填充模式后，会出现一组新的属性可供配置：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">Fill Type</td><td style="text-align:left;">填充类型选择，有 <strong>HORIZONTAL</strong>（横向填充）、<strong>VERTICAL</strong>（纵向填充）和 <strong>RADIAL</strong>（扇形填充）三种。</td></tr><tr><td style="text-align:left;">Fill Start</td><td style="text-align:left;">填充起始位置的标准化数值（从 0 ~ 1，表示填充总量的百分比），选择横向填充时，<strong>Fill Start</strong> 设为 0，就会从图像最左边开始填充</td></tr><tr><td style="text-align:left;"><strong>Fill Range</strong></td><td style="text-align:left;">填充范围的标准化数值（同样从 0 ~ 1），设为 1，就会填充最多整个原始图像的范围。</td></tr><tr><td style="text-align:left;"><strong>Fill Center</strong></td><td style="text-align:left;">填充中心点，该属性只有选择了 <code>RADIAL</code> 填充类型才能修改。决定了扇形填充时会环绕 Sprite 上的哪个点。</td></tr></tbody></table><p><img src="'+i+'" alt="radial"></p><h4 id="fill-range-填充范围补充说明" tabindex="-1">Fill Range 填充范围补充说明 <a class="header-anchor" href="#fill-range-填充范围补充说明" aria-label="Permalink to &quot;Fill Range 填充范围补充说明&quot;">​</a></h4><p>在 <strong>HORIZONTAL</strong> 和 <strong>VERTICAL</strong> 这两种填充类型下，<strong>Fill Start</strong> 设置的数值将影响填充总量，如果 <strong>Fill Start</strong> 设为 0.5，那么即使 <strong>Fill Range</strong> 设为 1.0，实际填充的范围也仍然只有 Sprite 总大小的一半。</p><p>而 <strong>RADIAL</strong> 类型中 <strong>Fill Start</strong> 只决定开始填充的方向，<strong>Fill Start</strong> 为 0 时，从 x 轴正方向开始填充。<strong>Fill Range</strong> 决定填充总量，值为 1 时将填充整个圆形。<strong>Fill Range</strong> 为正值时逆时针填充，为负值时顺时针填充。</p>',21),d=[n];function g(p,c,h,f,m,S){return e(),r("div",null,d)}const u=t(o,[["render",g]]);export{x as __pageData,u as default};
