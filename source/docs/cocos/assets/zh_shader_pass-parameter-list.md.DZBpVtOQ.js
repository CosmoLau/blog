import{_ as t,c as s,o as e,a4 as l}from"./chunks/framework.uQk9_EO2.js";const f=JSON.parse('{"title":"Pass 可选配置参数","description":"","frontmatter":{},"headers":[],"relativePath":"zh/shader/pass-parameter-list.md","filePath":"zh/shader/pass-parameter-list.md","lastUpdated":1712305443000}'),i={name:"zh/shader/pass-parameter-list.md"},a=l(`<h1 id="pass-可选配置参数" tabindex="-1">Pass 可选配置参数 <a class="header-anchor" href="#pass-可选配置参数" aria-label="Permalink to &quot;Pass 可选配置参数&quot;">​</a></h1><p>Pass 中的参数主要分两个部分：</p><ul><li>开发者可自定义的 <strong>属性检查器</strong> 面板参数 <code>properties</code></li><li>引擎提供的用于控制渲染管线状态的 <code>PipelineStates</code></li></ul><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p><code>properties</code> 用于将 Shader 中定义的 <code>uniform</code> 进行别名映射。这个映射可以是某个 <code>uniform</code> 的完整映射，也可以是具体某个分量的映射（使用 <code>target</code> 参数），代码示例如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  albedo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># uniform vec4 albedo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  roughness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pbrParams.g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># uniform vec4 pbrParams</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tilingOffset.zw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># uniform vec4 tilingOffset</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># say there is another uniform, vec4 emissive, that doesn&#39;t appear here</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># so it will be assigned a default value of [0, 0, 0, 0] and will not appear in the inspector</span></span></code></pre></div><p>默认情况下，<code>properties</code> 中定义的属性参数会暴露并显示在编辑器的 <strong>属性检查器</strong> 面板中，方便进行可视化控制。</p><p>如果不想显示在 <strong>属性检查器</strong> 面板上，可在定义属性时加上 <code>editor: { visible: false }</code>，代码示例如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">editor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span></code></pre></div><p>在 TypeScript 中可以使用 <code>Material</code> 类的 <code>setProperty</code> 方法以及 <code>Pass</code> 的 <code>setUniform</code> 方法进行设置，代码示例如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;emissive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Color.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GREY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接设置对应的 Uniform 变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;albedo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Color.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;roughness&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅设置对应的分量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat.passes[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;offset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取对应的 Uniform 的句柄</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mat.passes[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUniform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(h, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 ‘Pass.setUniform’ 设置 Uniform 属性</span></span></code></pre></div><blockquote><p><strong>注意</strong>：在 Shader 中定义的 <code>uniform</code> 也可以使用上述代码进行设置，即使没有在 <code>properties</code> 中定义。</p></blockquote><p>未指定的 <code>uniform</code>，引擎将会在运行时根据自动分析出的数据类型给予默认值。更多关于默认值的内容，请参考下文说明。</p><p>为方便声明各 <code>property</code> 子属性，可以直接在 <code>properties</code> 内声明 <code>__metadata__</code> 项，所有 <code>property</code> 都会继承它声明的内容，如：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  __metadata__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">editor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">editor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">editor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span></code></pre></div><p>这样 uniform <code>a</code> 和 <code>b</code> 已声明的各项参数都不会受到影响，但都不会显示在 <strong>属性检查器</strong> 中（visible 为 false），而 uniform <code>c</code> 仍会正常显示。</p><h3 id="property-参数列表" tabindex="-1">Property 参数列表 <a class="header-anchor" href="#property-参数列表" aria-label="Permalink to &quot;Property 参数列表&quot;">​</a></h3><p>Property 中可配置的参数如下表所示，任何可配置的字段如果和默认值相同都可以省掉。</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选项</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">target</td><td style="text-align:left;"><strong>undefined</strong></td><td style="text-align:left;">undefined</td><td style="text-align:left;">任意有效的 uniform 通道，可指定连续的单个或多个，但不可随机重排</td></tr><tr><td style="text-align:left;">value</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">详见下文 <strong>Default Values</strong> 部分的介绍</td></tr><tr><td style="text-align:left;">sampler.<br>minFilter</td><td style="text-align:left;"><strong>linear</strong></td><td style="text-align:left;">none, point, linear, anisotropic</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>magFilter</td><td style="text-align:left;"><strong>linear</strong></td><td style="text-align:left;">none, point, linear, anisotropic</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>mipFilter</td><td style="text-align:left;"><strong>none</strong></td><td style="text-align:left;">none, point, linear, anisotropic</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>addressU</td><td style="text-align:left;"><strong>wrap</strong></td><td style="text-align:left;">wrap, mirror, clamp, border</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>addressV</td><td style="text-align:left;"><strong>wrap</strong></td><td style="text-align:left;">wrap, mirror, clamp, border</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>addressW</td><td style="text-align:left;"><strong>wrap</strong></td><td style="text-align:left;">wrap, mirror, clamp, border</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>maxAnisotropy</td><td style="text-align:left;"><strong>16</strong></td><td style="text-align:left;">16</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>cmpFunc</td><td style="text-align:left;"><strong>never</strong></td><td style="text-align:left;">never, less, equal, less_equal, greater, not_equal, greater_equal, always</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>borderColor</td><td style="text-align:left;"><strong>[0, 0, 0, 0]</strong></td><td style="text-align:left;">[0, 0, 0, 0]</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>minLOD</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;">0</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sampler.<br>maxLOD</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;">0</td><td style="text-align:left;">如果允许 mipmap 则要根据贴图修改最大 mip 值</td></tr><tr><td style="text-align:left;">sampler.<br>mipLODBias</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;">0</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">editor.<br>displayName</td><td style="text-align:left;"><strong>*property name</strong></td><td style="text-align:left;">*property name</td><td style="text-align:left;">任意字符串</td></tr><tr><td style="text-align:left;">editor.<br>type</td><td style="text-align:left;"><strong>vector</strong></td><td style="text-align:left;">vector, color</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">editor.<br>visible</td><td style="text-align:left;"><strong>true</strong></td><td style="text-align:left;">true, false</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">editor.<br>tooltip</td><td style="text-align:left;"><strong>*property name</strong></td><td style="text-align:left;">*property name</td><td style="text-align:left;">任意字符串</td></tr><tr><td style="text-align:left;">editor.<br>range</td><td style="text-align:left;"><strong>undefined</strong></td><td style="text-align:left;">undefined, [ min, max, [step] ]</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">editor.<br>deprecated</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true, false</td><td style="text-align:left;">deprecated 标记的数据表示在导入时已更新或在当前版本已废弃，其内容在保存时会被自动删除</td></tr></tbody></table><h3 id="property-默认值" tabindex="-1">Property 默认值 <a class="header-anchor" href="#property-默认值" aria-label="Permalink to &quot;Property 默认值&quot;">​</a></h3><p>对于 Property 的默认值， Cocos Shader 做出了如下的规定：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选项</th></tr></thead><tbody><tr><td style="text-align:left;">int</td><td style="text-align:left;"></td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">ivec2</td><td style="text-align:left;"></td><td style="text-align:left;">[0, 0]</td></tr><tr><td style="text-align:left;">ivec3</td><td style="text-align:left;"></td><td style="text-align:left;">[0, 0, 0]</td></tr><tr><td style="text-align:left;">ivec4</td><td style="text-align:left;"></td><td style="text-align:left;">[0, 0, 0, 0]</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;"></td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">vec2</td><td style="text-align:left;"></td><td style="text-align:left;">[0, 0]</td></tr><tr><td style="text-align:left;">vec3</td><td style="text-align:left;"></td><td style="text-align:left;">[0, 0, 0]</td></tr><tr><td style="text-align:left;">vec4</td><td style="text-align:left;"></td><td style="text-align:left;">[0, 0, 0, 0]</td></tr><tr><td style="text-align:left;">sampler2D</td><td style="text-align:left;"><strong>default</strong></td><td style="text-align:left;">black, grey, white, normal, default</td></tr><tr><td style="text-align:left;">samplerCube</td><td style="text-align:left;"><strong>default-cube</strong></td><td style="text-align:left;">black-cube, white-cube, default-cube</td></tr></tbody></table><p>对于 <code>defines</code>：</p><ul><li>boolean 类型默认值为 false。</li><li>number 类型默认值为 0，默认取值范围为 [0, 3]。</li><li>string 类型默认值为 options 数组第一个元素。</li></ul><h2 id="pipelinestates" tabindex="-1">PipelineStates <a class="header-anchor" href="#pipelinestates" aria-label="Permalink to &quot;PipelineStates&quot;">​</a></h2><p>以下为 <code>PipelineStates</code> 相关参数，所有参数不区分大小写。</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">switch</td><td style="text-align:left;">指定这个 pass 的执行依赖于哪个 define。可以是任意有效的宏名称，但不应与使用到的 shader 中定义的任何 define 重名</td><td style="text-align:left;">未定义</td><td style="text-align:left;">这个字段默认是不存在的，意味着这个 pass 是无条件执行的</td></tr><tr><td style="text-align:left;">priority</td><td style="text-align:left;">指定这个 pass 的渲染优先级，数值越小渲染优先级越高，取值范围为 <strong>0 ~ 255</strong></td><td style="text-align:left;">128</td><td style="text-align:left;">可结合四则运算符指定相对值</td></tr><tr><td style="text-align:left;">stage</td><td style="text-align:left;">指定这个 pass 归属于管线的哪个 stage。可以是运行时管线中任何注册的 Stage 名称</td><td style="text-align:left;"><strong>default</strong></td><td style="text-align:left;">对于默认的 forward 管线，只有 <code>default</code> 一个 stage</td></tr><tr><td style="text-align:left;">phase</td><td style="text-align:left;">指定这个 pass 归属于管线的哪个 phase。可以是运行时管线中任何注册的 Phase 名称</td><td style="text-align:left;"><strong>default</strong></td><td style="text-align:left;">对于默认的 forward 管线，可以是 <code>default</code>、<code>forward-add</code> 或者 <code>shadow-caster</code></td></tr><tr><td style="text-align:left;">propertyIndex</td><td style="text-align:left;">指定这个 pass 运行时的 uniform 属性数据要和哪个 pass 保持一致，例如 forward add 等 pass 需要和 base pass 一致才能保证正确的渲染效果。可以是任意有效的 pass 索引</td><td style="text-align:left;">未定义</td><td style="text-align:left;">一旦指定了此参数，材质面板上就不会再显示这个 pass 的任何属性</td></tr><tr><td style="text-align:left;">embeddedMacros</td><td style="text-align:left;">指定在这个 pass 的 shader 基础上额外定义的常量宏，可以是一个包含任意宏键值对的对象</td><td style="text-align:left;">未定义</td><td style="text-align:left;">只有当宏定义不同时才能在多个 pass 中使用此参数来复用 shader 资源</td></tr><tr><td style="text-align:left;">properties</td><td style="text-align:left;">Properties 存储着这个 pass 中需要显示在 <strong>属性检查器</strong> 上的可定制的参数</td><td style="text-align:left;"></td><td style="text-align:left;">详见上文 <strong>Properties</strong> 部分的内容</td></tr><tr><td style="text-align:left;">migrations</td><td style="text-align:left;">迁移旧的材质数据</td><td style="text-align:left;"></td><td style="text-align:left;">详见下文 <strong>Migrations</strong> 部分的介绍</td></tr><tr><td style="text-align:left;">primitive</td><td style="text-align:left;">创建材质顶点数据</td><td style="text-align:left;"><strong>triangle_list</strong></td><td style="text-align:left;">可选项包括：point_list、line_list、line_strip、line_loop<br><strong>triangle_list</strong>、triangle_strip、triangle_fan<br>line_list_adjacency、line_strip_adjacency<br>triangle_list_adjacency、triangle_strip_adjacency<br>triangle_patch_adjacency、quad_patch_list、iso_line_list</td></tr><tr><td style="text-align:left;">RasterizerState</td><td style="text-align:left;">光栅化时的可选渲染状态</td><td style="text-align:left;"></td><td style="text-align:left;">详见下文 <strong>RasterizerState</strong> 部分的介绍</td></tr><tr><td style="text-align:left;">DepthStencilState</td><td style="text-align:left;">深度和模板缓存的测试与状态</td><td style="text-align:left;"></td><td style="text-align:left;">详见下文 <strong>DepthStencilState</strong> 部分的介绍</td></tr><tr><td style="text-align:left;">BlendState</td><td style="text-align:left;">材质混合状态</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">详见下文 <strong>BlendState</strong> 部分的介绍</td></tr></tbody></table><h2 id="migrations" tabindex="-1">Migrations <a class="header-anchor" href="#migrations" aria-label="Permalink to &quot;Migrations&quot;">​</a></h2><p>一般情况下，在使用材质资源时都希望底层的 effect 接口能始终向前兼容，但有时面对新的需求最好的解决方案依然是含有一定 breaking change 的，这时为了保持项目中已有的材质资源数据不受影响，或者至少能够更平滑地升级，就可以使用 effect 的迁移系统。</p><p>在 effect 导入成功后会 <strong>立即更新工程内所有</strong> 依赖于此 effect 的材质资源，对每个材质资源，会尝试寻找所有指定的旧参数数据（包括 <strong>property</strong> 和 <strong>宏定义</strong> 两类），然后将其复制或迁移到新属性中。</p><blockquote><p><strong>注意</strong>：使用迁移功能前请一定先备份好项目工程，以免丢失数据！</p></blockquote><p>对于一个现有的 effect，迁移字段声明如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">migrations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # macros: # macros follows the same rule as properties, without the component-wise features</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # USE_MIAN_TEXTURE: { formerlySerializedAs: USE_MAIN_TEXTURE }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    newFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">formerlySerializedAs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">oldVec4.w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>对于一个依赖于这个 effect，并在对应 pass 中持有属性的材质：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;oldVec4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;__type__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cc.Vec4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 effect 导入成功后，这些数据会被立即转换成：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;oldVec4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;__type__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cc.Vec4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;newFloat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <strong>编辑器</strong> 内重新编辑并保存这个材质资源后会变成（假设 effect 和 property 数据本身并没有改变）：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;newFloat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当然如果希望在导入时就直接删除旧数据，可以再加一条迁移信息来专门指定这点：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">oldVec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">removeImmediately</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>这对于在项目有大量旧材质，又能够确定这个属性的数据已经完全冗余时会比较有用。</p><p>更多地，注意这里的通道指令只是简单的取 <code>w</code> 分量，事实上还可以做任意的 shuffle：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">newColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">formerlySerializedAs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">someOldColor.yxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>甚至基于某个宏定义：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">occlusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">formerlySerializedAs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pbrParams.&lt;OCCLUSION_CHANNEL|z&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>这里声明了新的 occlusion 属性会从旧的 <code>pbrParams</code> 中获取，而具体的分量取决于 <code>OCCLUSION_CHANNEL</code> 宏定义。并且如果材质资源中未定义这个宏，则默认取 <code>z</code> 通道。<br> 但如果某个材质在迁移升级前就已经存着 <code>newFloat</code> 字段的数据，则不会对其做任何修改，除非指定为强制更新模式：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">newFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">formerlySerializedAs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">oldVec4.w!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>强制更新模式会强制更新所有材质的属性，无论这个操作是否会覆盖数据。</p><p><strong>注意</strong>：强制更新操作会在编辑器的每次资源事件中都执行（几乎对应每一次鼠标点击，相对高频），因此只是一个快速测试和调试的手段，一定不要将处于强制更新模式的 effect 提交到版本控制。</p><p>再次总结一下为防止数据丢失所设置的相关规则：</p><ul><li>为避免有效旧数据丢失，只要没有显式指定 <code>removeImmediately</code> 规则，就不会在导入时自动删除旧数据；</li><li>为避免有效的新数据被覆盖，如果没有指定为强制更新模式，对于那些既有旧数据，又有对应的新数据的材质，不会做任何迁移操作。</li></ul><h2 id="rasterizerstate" tabindex="-1">RasterizerState <a class="header-anchor" href="#rasterizerstate" aria-label="Permalink to &quot;RasterizerState&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选项</th></tr></thead><tbody><tr><td style="text-align:left;">isDiscard</td><td style="text-align:left;">引擎预留</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">polygonMode</td><td style="text-align:left;">多边形绘制模式</td><td style="text-align:left;"><strong>fill</strong></td><td style="text-align:left;">point，line，fill</td></tr><tr><td style="text-align:left;">shadeModel</td><td style="text-align:left;">着色模型</td><td style="text-align:left;"><strong>flat</strong></td><td style="text-align:left;">flat, gourand</td></tr><tr><td style="text-align:left;">cullMode</td><td style="text-align:left;">光栅化时剔除模式</td><td style="text-align:left;"><strong>back</strong></td><td style="text-align:left;">front, back, none</td></tr><tr><td style="text-align:left;">isFrontFaceCCW</td><td style="text-align:left;">是否逆时针（CCW）前向</td><td style="text-align:left;"><strong>true</strong></td><td style="text-align:left;">true，false</td></tr><tr><td style="text-align:left;">depthBias</td><td style="text-align:left;">深度偏移</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">depthBiasSlop</td><td style="text-align:left;">深度偏差斜率</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">depthBiasClamp</td><td style="text-align:left;">深度截断</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">isDepthClip</td><td style="text-align:left;">允许深度剪裁操作<br> <a href="https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_EXT_depth_clip_enable.html" target="_blank" rel="noreferrer">Vulkan</a> 专用</td><td style="text-align:left;"><strong>true</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">isMultisample</td><td style="text-align:left;">是否开启多重采样</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">lineWidth</td><td style="text-align:left;">线宽</td><td style="text-align:left;">1</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="depthstencilstate" tabindex="-1">DepthStencilState <a class="header-anchor" href="#depthstencilstate" aria-label="Permalink to &quot;DepthStencilState&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选项</th></tr></thead><tbody><tr><td style="text-align:left;">depthTest</td><td style="text-align:left;">是否开启深度测试</td><td style="text-align:left;"><strong>true</strong></td><td style="text-align:left;">true,false</td></tr><tr><td style="text-align:left;">depthWrite</td><td style="text-align:left;">是否开启深度缓存写入</td><td style="text-align:left;"><strong>true</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">depthFunc</td><td style="text-align:left;">深度缓存比较方法</td><td style="text-align:left;"><strong>less</strong></td><td style="text-align:left;">never, less, equal, less_equal, greater, not_equal, greater_equal, always</td></tr><tr><td style="text-align:left;">stencilTestFront</td><td style="text-align:left;">是否开启正面模板缓存测试</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">stencilFuncFront</td><td style="text-align:left;">正面模板缓存比较方法</td><td style="text-align:left;"><strong>always</strong></td><td style="text-align:left;">never, less, equal, less_equal, greater, not_equal, greater_equal, always</td></tr><tr><td style="text-align:left;">stencilReadMaskFront</td><td style="text-align:left;">正面模板缓存读取掩码</td><td style="text-align:left;"><strong>0xffffffff</strong></td><td style="text-align:left;">0xffffffff, <code>[1, 1, 1, 1]</code></td></tr><tr><td style="text-align:left;">stencilWriteMaskFront</td><td style="text-align:left;">正面模板缓存写入掩码</td><td style="text-align:left;"><strong>0xffffffff</strong></td><td style="text-align:left;">0xffffffff, <code>[1, 1, 1, 1]</code></td></tr><tr><td style="text-align:left;">stencilFailOpFront</td><td style="text-align:left;">正面模板缓存测试失败时，如何处理缓冲区的值</td><td style="text-align:left;"><strong>keep</strong></td><td style="text-align:left;">keep, zero, replace, incr, incr_wrap, decr, decr_wrap, invert</td></tr><tr><td style="text-align:left;">stencilZFailOpFront</td><td style="text-align:left;">正面模板缓存深度测试失败时，如何处理缓冲区的值</td><td style="text-align:left;"><strong>keep</strong></td><td style="text-align:left;">keep, zero, replace, incr, incr_wrap, decr, decr_wrap, invert</td></tr><tr><td style="text-align:left;">stencilPassOpFront</td><td style="text-align:left;">正面模板缓存测试通过时，如何处理缓冲区的值</td><td style="text-align:left;"><strong>keep</strong></td><td style="text-align:left;">keep, zero, replace, incr, incr_wrap, decr, decr_wrap, invert</td></tr><tr><td style="text-align:left;">stencilRefFront</td><td style="text-align:left;">正面模板缓存中的比较函数用于比较的值</td><td style="text-align:left;"><strong>1</strong></td><td style="text-align:left;">1, <code>[0, 0, 0, 1]</code></td></tr><tr><td style="text-align:left;">stencilTestBack</td><td style="text-align:left;">是否开启背面模板缓存测试</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">stencilFuncBack</td><td style="text-align:left;">背面模板缓存比较方法</td><td style="text-align:left;"><strong>always</strong></td><td style="text-align:left;">never, less, equal, less_equal, greater, not_equal, greater_equal, always</td></tr><tr><td style="text-align:left;">stencilReadMaskBack</td><td style="text-align:left;">背面模板缓存读取掩码</td><td style="text-align:left;"><strong>0xffffffff</strong></td><td style="text-align:left;">0xffffffff, <code>[1, 1, 1, 1]</code></td></tr><tr><td style="text-align:left;">stencilWriteMaskBack</td><td style="text-align:left;">背面模板缓存写入掩码</td><td style="text-align:left;"><strong>0xffffffff</strong></td><td style="text-align:left;">0xffffffff, <code>[1, 1, 1, 1]</code></td></tr><tr><td style="text-align:left;">stencilFailOpBack</td><td style="text-align:left;">背面模板缓存测试失败时，如何处理缓冲区的值</td><td style="text-align:left;"><strong>keep</strong></td><td style="text-align:left;">keep, zero, replace, incr, incr_wrap, decr, decr_wrap, invert</td></tr><tr><td style="text-align:left;">stencilZFailOpBack</td><td style="text-align:left;">背面模板缓存深度测试失败时，如何处理缓冲区的值</td><td style="text-align:left;"><strong>keep</strong></td><td style="text-align:left;">keep, zero, replace, incr, incr_wrap, decr, decr_wrap, invert</td></tr><tr><td style="text-align:left;">stencilRefBack</td><td style="text-align:left;">背面模板缓存中的比较函数用于比较的值</td><td style="text-align:left;"><strong>1</strong></td><td style="text-align:left;">1, <code>[0, 0, 0, 1]</code></td></tr></tbody></table><h2 id="blendstate" tabindex="-1">BlendState <a class="header-anchor" href="#blendstate" aria-label="Permalink to &quot;BlendState&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选项</th></tr></thead><tbody><tr><td style="text-align:left;">isA2C</td><td style="text-align:left;">是否开启半透明反锯齿（Alpha To Coverage）</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true，false</td></tr><tr><td style="text-align:left;">isIndepend</td><td style="text-align:left;">RGB 和 Alpha 是否分开混合</td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true，false</td></tr><tr><td style="text-align:left;">blendColor</td><td style="text-align:left;">指定混合颜色</td><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;">0, <code>[0, 0, 0, 0]</code></td></tr><tr><td style="text-align:left;">targets</td><td style="text-align:left;">混合配置，请参考下方的 targets</td><td style="text-align:left;">[]</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="targets" tabindex="-1">Targets <a class="header-anchor" href="#targets" aria-label="Permalink to &quot;Targets&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th><th style="text-align:left;">可选项</th></tr></thead><tbody><tr><td style="text-align:left;">Targets[i].<br>blend</td><td style="text-align:left;">是否开启 <strong>混合</strong></td><td style="text-align:left;"><strong>false</strong></td><td style="text-align:left;">true, false</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendEq</td><td style="text-align:left;">指定 <strong>混合源</strong> 和 <strong>混合目标</strong> 的 RGB 的混合方程</td><td style="text-align:left;"><strong>add</strong></td><td style="text-align:left;">add, sub, rev_sub</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendSrc</td><td style="text-align:left;">指定 <strong>混合源</strong> 的 RGB 混合因子</td><td style="text-align:left;"><strong>one</strong></td><td style="text-align:left;">one, zero, src_alpha_saturate,<br>src_alpha, one_minus_src_alpha,<br>dst_alpha, one_minus_dst_alpha,<br>src_color, one_minus_src_color,<br>dst_color, one_minus_dst_color,<br>constant_color, one_minus_constant_color,<br>constant_alpha, one_minus_constant_alpha</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendDst</td><td style="text-align:left;">指定 <strong>混合目标</strong> 的 RGB 混合因子</td><td style="text-align:left;"><strong>zero</strong></td><td style="text-align:left;">one, zero, src_alpha_saturate,<br>src_alpha, one_minus_src_alpha,<br>dst_alpha, one_minus_dst_alpha,<br>src_color, one_minus_src_color,<br>dst_color, one_minus_dst_color,<br>constant_color, one_minus_constant_color,<br>constant_alpha, one_minus_constant_alpha</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendSrcAlpha</td><td style="text-align:left;">指定 <strong>混合源</strong> 的 Alpha 混合因子</td><td style="text-align:left;"><strong>one</strong></td><td style="text-align:left;">one, zero, src_alpha_saturate,<br>src_alpha, one_minus_src_alpha,<br>dst_alpha, one_minus_dst_alpha,<br>src_color, one_minus_src_color,<br>dst_color, one_minus_dst_color,<br>constant_color, one_minus_constant_color,<br>constant_alpha, one_minus_constant_alpha</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendDstAlpha</td><td style="text-align:left;">指定 <strong>混合目标</strong> 的 Alpha 混合因子</td><td style="text-align:left;"><strong>zero</strong></td><td style="text-align:left;">one, zero, src_alpha_saturate,<br>src_alpha, one_minus_src_alpha,<br>dst_alpha, one_minus_dst_alpha,<br>src_color, one_minus_src_color,<br>dst_color, one_minus_dst_color,<br>constant_color, one_minus_constant_color,<br>constant_alpha, one_minus_constant_alpha</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendAlphaEq</td><td style="text-align:left;">指定 <strong>混合源</strong> 与 <strong>混合目标</strong> 的 Alpha 混合方法</td><td style="text-align:left;"><strong>add</strong></td><td style="text-align:left;">add, sub, rev_sub</td></tr><tr><td style="text-align:left;">Targets[i].<br>blendColorMask</td><td style="text-align:left;">指定是否可将 RGB，Alpha 分量写入帧缓存</td><td style="text-align:left;"><strong>all</strong></td><td style="text-align:left;">all, none, r, g, b, a, rg, rb, ra, gb, ga, ba, rgb, rga, rba, gba</td></tr><tr><td style="text-align:left;">dynamics</td><td style="text-align:left;">可动态更新的管线状态</td><td style="text-align:left;">[]</td><td style="text-align:left;">LINE_WIDTH, DEPTH_BIAS, BLEND_CONSTANTS, DEPTH_BOUNDS, STENCIL_WRITE_MASK, STENCIL_COMPARE_MASK</td></tr></tbody></table>`,60),n=[a];function d(r,p,h,g,o,k){return e(),s("div",null,n)}const E=t(i,[["render",d]]);export{f as __pageData,E as default};
