import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.uQk9_EO2.js";const g=JSON.parse('{"title":"Import Maps (experimental)","description":"","frontmatter":{},"headers":[],"relativePath":"en/scripting/modules/import-map.md","filePath":"en/scripting/modules/import-map.md","lastUpdated":1712305443000}'),e={name:"en/scripting/modules/import-map.md"},p=t(`<h1 id="import-maps-experimental" tabindex="-1">Import Maps (experimental) <a class="header-anchor" href="#import-maps-experimental" aria-label="Permalink to &quot;Import Maps (experimental)&quot;">​</a></h1><p>Cocos Creator experimentally supports <a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">Import Maps</a> starting from v3.3.</p><p>Import maps control the import behavior of TypeScript/JavaScript, in particular, it can specify the import behavior for <a href="./spec#bare-specifiers">bare specifiers</a>.</p><h2 id="use" tabindex="-1">Use <a class="header-anchor" href="#use" aria-label="Permalink to &quot;Use&quot;">​</a></h2><p>The import map&#39;s file path can be specified via the <strong>Import Maps</strong> option in <strong>Project -&gt; Project Settings -&gt; Scripting</strong> in the top menu bar of the editor. After setting, the import maps function will be enabled and the import maps used will be read from the specified file.</p><blockquote><p><strong>Note</strong>: the import map&#39;s file path is crucial, because all relative paths in the import maps are relative to the import map&#39;s file path itself.</p></blockquote><h3 id="alias-mapping" tabindex="-1">Alias Mapping <a class="header-anchor" href="#alias-mapping" aria-label="Permalink to &quot;Alias Mapping&quot;">​</a></h3><p>If there is a module that is used by all modules in the project, and the developer does not want other modules to refer to it as a relative path, but rather to give it an alias, then using import maps is a good choice.</p><p>For example, if the real absolute path of a module is <code>&lt;project&gt;/assets/lib/foo.ts</code> then all modules to refer to it as <code>import {} from &#39;foo&#39;;</code>:</p><p>First, create an import-map file <code>import-map.json</code> in the project directory:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import-map.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets/lib/foo.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>&quot;imports&quot;</code>: specifies the <strong>Top Level Imports</strong> to be applied to all modules.</li><li><code>&quot;foo&quot;</code>: specifies the name of the module to map.</li><li><code>&quot;./assets/lib/foo.ts&quot;</code>: specifies how to map <code>&quot;foo&quot;</code>. <code>&quot;./assets/lib/foo.ts&quot;</code> is a relative path, <strong>all relative paths in import maps are relative to the location of the import map&#39;s file itself</strong>, so <code>./assets/lib/foo.ts</code> will be resolved to the absolute path <code>&lt;project&gt;/assets/lib/foo.ts</code>.</li></ul><p>Then <code>&#39;foo&#39;</code> will be resolved to the module <code>&lt;project&gt;/assets/lib/foo.ts</code> when referencing the module in any module using:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="directory-mapping" tabindex="-1">Directory Mapping <a class="header-anchor" href="#directory-mapping" aria-label="Permalink to &quot;Directory Mapping&quot;">​</a></h3><p>Import maps also allows mapping all modules in a given directory.</p><p>For example, to map all modules in the project <code>assets/lib/bar-1.2.3</code> directory, the json file for the import maps would look like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import-map.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;bar/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets/lib/bar-1.2.3/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This is consistent with <strong>alias mapping</strong> except that <code>&quot;bar/&quot;</code> specifies the directory to map to.</p><p>This way the modules in the project can all refer to the directory as <code>import {} from &#39;bar/...&#39; </code> to refer to modules in the directory <code>bar-1.2.3</code>.</p><p>For example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar/baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quux </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar/qux/quux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>&#39;bar/baz&#39;</code> will be resolved to the module <code>&lt;project&gt;/assets/lib/bar-1.2.3/baz.ts</code>.<br><code>&#39;bar/qux/quux&#39;</code> will be resolved to the module <code>&lt;project&gt;/assets/lib/bar-1.2.3/qux/quux.ts</code>.</p><h3 id="typescript-configuration" tabindex="-1">TypeScript configuration <a class="header-anchor" href="#typescript-configuration" aria-label="Permalink to &quot;TypeScript configuration&quot;">​</a></h3><p>TypeScript does not support import maps, which can lead to errors when using it. Additional configuration to tell the TypeScript type checker additional module resolution information.</p><p>In the two examples above, the <a href="https://www.typescriptlang.org/tsconfig#paths" target="_blank" rel="noreferrer">paths</a> field can be configured in the <code>tsconfig.json</code> file in the project directory. If this field is not present already, add it. Example:</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;paths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Note: the relative path here is relative to the path where tsconfig.json is located</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Since tsconfig.json and import-map.json are in the same directory in this example, the relative paths here are similar.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets/lib/foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;bar/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets/lib/bar-1.2.3/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For more information about import maps features, please refer to the <a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">Import Maps</a> documentation.</p><h2 id="support" tabindex="-1">Support <a class="header-anchor" href="#support" aria-label="Permalink to &quot;Support&quot;">​</a></h2><p>Cocos Creator supports all features in <a href="https://wicg.github.io/import-maps/" target="_blank" rel="noreferrer">Import Maps Draft Community Group Report, 12 January 2021</a> standard.</p>`,30),o=[p];function n(l,r,h,d,c,k){return a(),i("div",null,o)}const u=s(e,[["render",n]]);export{g as __pageData,u as default};
