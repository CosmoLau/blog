import{_ as s}from"./chunks/set-collider-config.a-PRM8yq.js";import{_ as i,c as a,o as t,a5 as n}from"./chunks/framework.CqnjdYks.js";const l="/docs/cocos/assets/cant-collider.BaqttPeG.png",h="/docs/cocos/assets/can-collider.Dae7dpEj.png",p="/docs/cocos/assets/mask-all.CTzRjPGB.jpg",B=JSON.parse('{"title":"分组和掩码","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/physics/physics-group-mask.md","filePath":"zh/manual/physics/physics-group-mask.md"}'),k={name:"zh/manual/physics/physics-group-mask.md"},e=n('<h1 id="分组和掩码" tabindex="-1">分组和掩码 <a class="header-anchor" href="#分组和掩码" aria-label="Permalink to &quot;分组和掩码&quot;">​</a></h1><p>分组和掩码是物体之间能否进行物理碰撞检测的必要条件。分组可以简单的理解为一个碰撞对象所处的分组，掩码可以简单的理解为该碰撞对象需要与哪些分组对象进行碰撞。</p><h2 id="碰撞检测原理" tabindex="-1">碰撞检测原理 <a class="header-anchor" href="#碰撞检测原理" aria-label="Permalink to &quot;碰撞检测原理&quot;">​</a></h2><p>在 Cocos Creator 中是否进行碰撞检测采用的是二进制 <a href="https://www.w3school.com.cn/js/js_bitwise.asp" target="_blank" rel="noreferrer">按位操作</a>，通过将分组值与掩码值进行“与”运算，从而判断是否满足条件。对象间允许进行碰撞检测的计算方式如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GroupA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MaskB) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (GroupB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MaskA)</span></span></code></pre></div><p>从这个公式中可以看出，分组 A 需要满足在分组 B 的掩码列表里并且分组 B 也需要满足在分组 A 的掩码列表里，这样的两个对象之间就能进行碰撞检测。如何将二进制操作与允许进行碰撞检测计算公式结合起来，这是下面需要了解的部分。但在这之前，需要用户在 <strong>项目设置 -&gt; 物理 -&gt; 碰撞矩阵</strong> 处先配置 <a href="./physics-configs.html#碰撞矩阵">碰撞分组</a>。</p><p><img src="'+s+'" alt="set-collider-config"></p><p>根据上图的配置，Cocos Creator 会将数据解析为以下值（此处仅针对讲解的部分做展示）：</p><ul><li><strong>DEFAULT</strong>：<strong>Index</strong> 值为 <code>0</code>，分组实际值为 <code>1&lt;&lt;0=1</code>，二进制值为 <code>0000 0001</code>；掩码值实际值为 <code>1&lt;&lt;0=1</code>，二进制值为 <code>0000 0001</code>。</li><li><strong>SELF_PLANE</strong>：<strong>Index</strong> 值为 <code>1</code>，分组实际值为 <code>1&lt;&lt;1=2</code>，二进制为 <code>0000 0010</code>；掩码值实际值为 <code>(1&lt;&lt;3)+(1&lt;&lt;4)=24</code>，二进制值为 <code>0001 1000</code>。</li><li><strong>ENEMY_BULLET</strong>：<strong>Index</strong> 值为 <code>4</code>，分组实际值为 <code>1&lt;&lt;4=16</code>，二进制为 <code>0001 0000</code>；掩码值实际值为 <code>1&lt;&lt;1=2</code>，二进制值为 <code>0000 0010</code>。</li></ul><p>根据数据就可以对分组之间是否碰撞做计算：</p><ul><li><p>分组 <strong>SELF_PLANE</strong> 是否与分组 <strong>DEFAULT</strong> 碰撞：</p><p><img src="'+l+'" alt="cant-collider"></p><p>根据以上计算最终得出的值是 <code>0</code>，因此两个分组间不会产生碰撞。</p></li><li><p>分组 <strong>SELF_PLANE</strong> 是否与分组 <strong>ENEMY_BULLET</strong> 碰撞：</p><p><img src="'+h+`" alt="can-collider"></p><p>根据以上计算最终得出的值大于 <code>0</code>，因此两个分组间会产生碰撞。</p></li></ul><blockquote><p><strong>注意</strong>：<code>&lt;&lt;</code> 左移运算符，是位运算符的一种，通过从右推入 0 向左位移，并使最左边的位脱落。</p></blockquote><h2 id="动态设置分组和掩码" tabindex="-1">动态设置分组和掩码 <a class="header-anchor" href="#动态设置分组和掩码" aria-label="Permalink to &quot;动态设置分组和掩码&quot;">​</a></h2><h3 id="定义分组" tabindex="-1">定义分组 <a class="header-anchor" href="#定义分组" aria-label="Permalink to &quot;定义分组&quot;">​</a></h3><p>通常，在游戏开发中，需要在碰撞发生前设置好可碰撞分组，在碰撞发生时处理相关的逻辑。在 Cocos Creator 中，所有的碰撞数据获取到的是数值，这样不利于开发过程中的判断。因此，可以通过定义分组对象或者枚举的形式，清晰的知道每一串数字的意义。</p><p>在可以采用左移操作符（&lt;&lt;）对分组或者掩码进行设置，并且无论是分组对象还是分组枚举，对应的值都应该和碰撞矩阵定义的值一致，否则可能出现数据不一致，从而导致判断失败。</p><p>方式一：定义在一个 <strong>object</strong> 中</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PHY_GROUP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DEFAULT: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SELF_PLANE: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ENEMY_PLANE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    SELF_BULLET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ENEMY_BULLET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    BULLET_PROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>方式二：定义在一个 <strong>enum</strong> 中</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PHY_GROUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    SELF_PLANE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ENEMY_PLANE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    SELF_BULLET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ENEMY_BULLET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    BULLET_PROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果该枚举需要在属性面板上显示，需要引入来自 cc 模块的 Enum 函数，将定义好的枚举注册到编辑器中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PHY_GROUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p><strong>注意</strong>：由于历史原因， <strong>Enum</strong> 函数对 <strong>-1</strong> 有特殊处理，如果不熟悉，请勿定义值为 <strong>-1</strong> 的属性。</p></blockquote><h3 id="设置-获取分组" tabindex="-1">设置/获取分组 <a class="header-anchor" href="#设置-获取分组" aria-label="Permalink to &quot;设置/获取分组&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此处案例使用的是上方 “定义分组” 处定义的枚举</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rigid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RigidBody);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于 rigid.setGroup(1 &lt;&lt; 1) 或 rigid.setGroup(1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PHY_GROUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SELF_PLANE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> group</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="添加-删除分组" tabindex="-1">添加/删除分组 <a class="header-anchor" href="#添加-删除分组" aria-label="Permalink to &quot;添加/删除分组&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果当前分组并未在碰撞矩阵中定义，也可以动态添加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> group</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rigid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RigidBody);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(group);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(group);</span></span></code></pre></div><h3 id="设置-获取掩码" tabindex="-1">设置/获取掩码 <a class="header-anchor" href="#设置-获取掩码" aria-label="Permalink to &quot;设置/获取掩码&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rigid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RigidBody);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于 1 &lt;&lt; 0 | 1 &lt;&lt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mask);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><blockquote><p><strong>注意</strong>：此处需要注意操作符的优先级。例如：3 + 1 &lt;&lt; 2 和 3 + (1 &lt;&lt; 2) 所计算的值是不相等的，操作符 + 的优先级大于 &lt;&lt;。</p></blockquote><h4 id="使用掩码" tabindex="-1">使用掩码 <a class="header-anchor" href="#使用掩码" aria-label="Permalink to &quot;使用掩码&quot;">​</a></h4><p>掩码可以根据分组进行定义，例如：</p><ul><li>定义一个只检测 <strong>DEFAULT</strong> 的掩码 <code>const maskForGroup1 = PHY_GROUP.DEFAULT;</code></li><li>定义一个可检测 <strong>DEFAULT</strong> 和 <strong>SELF_PLANE</strong> 的掩码 <code>const maskForGroup01 = PHY_GROUP.DEFAULT | PHY_GROUP.SELF_PLANE;</code></li><li>定义一个所有组都不检测的掩码 <code>const maskForNone = 0;</code></li><li>定义一个所有组都检测的掩码 <code>const maskForAll = 0xffffffff;</code></li></ul><h3 id="查看分组或掩码二进制" tabindex="-1">查看分组或掩码二进制 <a class="header-anchor" href="#查看分组或掩码二进制" aria-label="Permalink to &quot;查看分组或掩码二进制&quot;">​</a></h3><p>通过 <code>(value &gt;&gt;&gt; 0).toString(2)</code>，可以看到二进制的字符串表示。</p><p><img src="`+p+'" alt="查看二进制"></p>',34),r=[e];function d(o,g,E,c,F,y){return t(),a("div",null,r)}const A=i(k,[["render",d]]);export{B as __pageData,A as default};
