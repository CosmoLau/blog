import{_ as a,c as s,o as e,a5 as o}from"./chunks/framework.CqnjdYks.js";const t="/docs/cocos/assets/engine-core-architecture.BziVtG7V.png",i="/docs/cocos/assets/select-repo.DcyqfUuw.png",n="/docs/cocos/assets/download-repo.DWkVsUE5.png",r="/docs/cocos/assets/custom-engine.ksLYvOPb.png",c="/docs/cocos/assets/custom-engine-store-path.-ovGE3RP.png",l="/docs/cocos/assets/use-native-engine-for-editor.DK5p6JN3.png",p="/docs/cocos/assets/build-ts-engine.2SBcG-Zl.png",h="/docs/cocos/assets/download-external-zip.ClCZ7_Mj.png",d="/docs/cocos/assets/custom-native-simulator.h2i7PK-n.png",v=JSON.parse('{"title":"引擎定制工作流程","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/engine-customization.md","filePath":"zh/manual/advanced-topics/engine-customization.md"}'),g={name:"zh/manual/advanced-topics/engine-customization.md"},k=o('<h1 id="引擎定制工作流程" tabindex="-1">引擎定制工作流程 <a class="header-anchor" href="#引擎定制工作流程" aria-label="Permalink to &quot;引擎定制工作流程&quot;">​</a></h1><p>Cocos Creator 拥有两套引擎内核，C++ 内核 和 TypeScript 内核。C++ 内核用于原生平台，TypeScript 内核用于 Web 和小游戏平台。 在引擎内核之上，是用 TypeScript 编写的引擎框架层，用以统一两套内核的差异，让开发更便捷。</p><p><img src="'+t+'" alt="engine-core"></p><h2 id="获取引擎源码" tabindex="-1">获取引擎源码 <a class="header-anchor" href="#获取引擎源码" aria-label="Permalink to &quot;获取引擎源码&quot;">​</a></h2><p><img src="'+i+'" alt="download repo js"></p><h3 id="_1-进入-cocos-引擎仓库" tabindex="-1">1. 进入 Cocos 引擎仓库 <a class="header-anchor" href="#_1-进入-cocos-引擎仓库" aria-label="Permalink to &quot;1. 进入 Cocos 引擎仓库&quot;">​</a></h3><p>Cocos 是一个开源引擎，不同版本的引擎源码可以从 Cocos 引擎官方开源仓库中获取，地址如下：</p><ul><li>Cocos 引擎：<a href="https://github.com/cocos/cocos-engine/" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/engine/" target="_blank" rel="noreferrer">GitEE</a></li></ul><p>打开仓库主页，可以看到上图中左侧子图所示的内容，根据需求自行决定使用哪一个版本即可。</p><h3 id="_2-选择分支-branch" tabindex="-1">2. 选择分支（Branch） <a class="header-anchor" href="#_2-选择分支-branch" aria-label="Permalink to &quot;2. 选择分支（Branch）&quot;">​</a></h3><p>如果是要采用最新的分支，选择上图中间子图所示的 <code>develop</code> 分支即可。</p><blockquote><p><strong>注意</strong>：此分支由于是开发中的最新分支，并不确保稳定性。</p></blockquote><h3 id="选择-tag" tabindex="-1">选择 Tag <a class="header-anchor" href="#选择-tag" aria-label="Permalink to &quot;选择 Tag&quot;">​</a></h3><p>如果要采用对应 Cocos Creator 版本的稳定分支，则按上图右侧子图所示，切换到 Tags 标签，并选择对应的版本号。 比如，你所用的 Cocos Creator 为 3.7.3 版本，那么你就选择 3.7.3 即可。</p><blockquote><p><strong>注意</strong>：不同的 Cocos Creator 版本，需要对应不同的引擎分支，请确保二者版本匹配。</p></blockquote><h3 id="_3-clone-或者-下载" tabindex="-1">3. Clone 或者 下载 <a class="header-anchor" href="#_3-clone-或者-下载" aria-label="Permalink to &quot;3. Clone 或者 下载&quot;">​</a></h3><p><img src="'+n+`" alt="download-repo"></p><p>如上图所示，选择了对应的分支或者 Tag 后，就会切换到相应仓库（1）。</p><p>点击右边的 <strong>代码</strong>（2）按钮，会弹出代码下载面板。</p><p>你可以 <strong>复制仓库链接</strong>（3），然后使用 git 工具 clone 到本地，也可以选择 <code>Download ZIP</code>（4） 下载源码的 zip 包到本地并解压即可。</p><blockquote><p>记得在页面右上角给 Cocos 引擎的开源仓库加个星（5），谢谢！</p></blockquote><h2 id="配置环境" tabindex="-1">配置环境 <a class="header-anchor" href="#配置环境" aria-label="Permalink to &quot;配置环境&quot;">​</a></h2><h3 id="_1-引擎源码放到指定目录" tabindex="-1">1. 引擎源码放到指定目录 <a class="header-anchor" href="#_1-引擎源码放到指定目录" aria-label="Permalink to &quot;1. 引擎源码放到指定目录&quot;">​</a></h3><p>根据自身项目需求，从 Cocos 引擎的源码仓库获得引擎源码，放到适合的目录下。</p><ul><li>如果自定义引擎仅为某一个项目使用，则建议放入对应的项目目录。</li><li>如果多个项目会共享一套自定义引擎，则根据项目管理方案，放到适合的公共目录。</li></ul><h3 id="_2-安装编译依赖" tabindex="-1">2. 安装编译依赖 <a class="header-anchor" href="#_2-安装编译依赖" aria-label="Permalink to &quot;2. 安装编译依赖&quot;">​</a></h3><p>编译依赖项需要使用 <code>NodeJS</code>，请确保电脑安装了 <code>NodeJS v12.0</code> 以上版本，如未安装，请前往 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">https://nodejs.org/</a> 下载安装。</p><p>安装完成后，在自定义引擎根目录，执行以下命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 gulp 构建工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gulp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖的模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编译一些数据，包括 debug infos 和 .d.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gulp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="_3-修改引擎路径" tabindex="-1">3. 修改引擎路径 <a class="header-anchor" href="#_3-修改引擎路径" aria-label="Permalink to &quot;3. 修改引擎路径&quot;">​</a></h3><p>通过 <strong>Cocos Creator -&gt; 偏好设置</strong> 的 <strong>引擎管理器</strong> 选项卡来设置需要使用的引擎源码路径。需要注意的是 <strong>修改引擎路径后需要重启编辑器</strong>。</p><p><img src="`+r+'" alt="custom ts engine"></p><h4 id="指定-typescript-引擎" tabindex="-1">指定 TypeScript 引擎 <a class="header-anchor" href="#指定-typescript-引擎" aria-label="Permalink to &quot;指定 TypeScript 引擎&quot;">​</a></h4><p>默认情况下，<code>Use Built-in</code> 会处于选中状态，表示使用的是 Cocos Creator 内置的引擎。 为了使用自定义引擎，我们只需要将选项卡切换到 <code>Use Custom</code>， 并将路径指定为引擎源码根目录即可。</p><h4 id="指定原生-c-引擎" tabindex="-1">指定原生（C++）引擎 <a class="header-anchor" href="#指定原生-c-引擎" aria-label="Permalink to &quot;指定原生（C++）引擎&quot;">​</a></h4><p>如果需要定制和原生平台相关的引擎功能， 则还需要勾选 <code>Native Module</code> 下的 <code>Use Custom</code>。 会自动识别自定义引擎根目录下的 <code>native</code> 作为路径，不可更改。</p><h4 id="配置存储路径" tabindex="-1">配置存储路径 <a class="header-anchor" href="#配置存储路径" aria-label="Permalink to &quot;配置存储路径&quot;">​</a></h4><p><img src="'+c+'" alt="custom-engine-store-path"></p><p>默认情况下，自定义引擎的修改会保存为全局配置，将影响所有使用当前 Cocos Creator 版本的项目。</p><p>将鼠标移动到 <code>Cocos Engine</code> 文字上，文字前方会出现一个设置按钮，点击按钮可以选择存储位置。</p><h4 id="重启-cocos-creator" tabindex="-1">重启 Cocos Creator <a class="header-anchor" href="#重启-cocos-creator" aria-label="Permalink to &quot;重启 Cocos Creator&quot;">​</a></h4><p>自定义引擎路径修改完成后，需要重启 Cocos Creator 编辑器才能生效。 直接关闭 Cocos Creator 再次打开，或者点击界面上的 <strong>重启（Relaunch）</strong> 按钮。</p><blockquote><p><strong>注意</strong>：自定义引擎生效后，Cocos Creator 中的场景编辑器也会采用自定义引擎进行渲染。默认情况下采用的是 TypeScript 内核运行，如果要让编辑器也使用原生引擎进行渲染，需要在 <strong>偏号设置</strong> -&gt; <strong>实验室</strong> 面板下，开启 <strong>启用原生引擎加载场景编辑器</strong>。</p></blockquote><p><img src="'+l+'" alt="use-native-engine-for-editor"></p><h2 id="修改-typescript-引擎" tabindex="-1">修改 TypeScript 引擎 <a class="header-anchor" href="#修改-typescript-引擎" aria-label="Permalink to &quot;修改 TypeScript 引擎&quot;">​</a></h2><p>如果您只需要为 Web 和 小游戏平台的游戏定制引擎功能，或只需要修改 TypeScript 层的引擎相关代码（如 UI 系统，动画系统等），那么只需要在修改完成之后在 Cocos Creator 编辑器的菜单栏中点击 <strong>开发者 -&gt; 编译引擎</strong> 进行编译即可。</p><p><img src="'+p+`" alt="build"></p><p>该命令会在引擎目录下生成一个 <code>bin</code> 文件夹，并将引擎源码编译到这里。</p><h2 id="修改原生-c-引擎" tabindex="-1">修改原生（C++）引擎 <a class="header-anchor" href="#修改原生-c-引擎" aria-label="Permalink to &quot;修改原生（C++）引擎&quot;">​</a></h2><p>如果需要定制和原生平台相关的引擎功能，除了修改 TypeScript 代码，可能还需要修改 C++ 代码。</p><p>为了使原生部分的代码能够正常被编译，需要确保 <code>Native Module</code> 中的 <code>Use Custom</code> 被选中。</p><h3 id="获取-external" tabindex="-1">获取 external <a class="header-anchor" href="#获取-external" aria-label="Permalink to &quot;获取 external&quot;">​</a></h3><p>Cocos 原生引擎的编译，需要依赖 <code>cocos-engine/native/external</code> 中的库。这些库有几百 MB 大小，所以源码包内默认是没有的，可以通过以下三种方式获取。</p><p><strong>第一种方式</strong>：通过 git 命令行。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cd cocos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">native</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  git clone </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//github.com/cocos/cocos-engine-external external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cd external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b branch_name tag</span></span></code></pre></div><ul><li>branch_name：是新的分支名</li><li>tag：是第三方库对应的 tag 名字，可以从 cocos-engine/native/external-config.json 里的 checkout 字段获取该值。</li></ul><blockquote><p>示例： 假如我们要使用 3.7.3-1 版本，则可以写成 <code>git checkout -b 3.7.3-1 3.7.3-1</code></p></blockquote><p><strong>第二种方式</strong>：使用引擎自带的脚本下载。</p><p>该脚本只会下载某个 tag 对应的第三方库。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cd cocos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">native</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  npm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  gulp init</span></span></code></pre></div><blockquote><p>只要使用的 tag 有变化，就需要重新下载。每次需要下载几百兆的内容。</p></blockquote><p><strong>第三种方式</strong>：下载 ZIP 包</p><p>如果某些原因不能通过 NodeJS 和 git 命令下载 <code>external</code> 源码包，则可以直接在 <a href="https://github.com/cocos/cocos-engine-external" target="_blank" rel="noreferrer">cocos-engine-external</a> 仓库页面，按照以下步骤下载。</p><p><img src="`+h+'" alt="download-external-zip"></p><ol><li>选择对应的分支，需要使用哪一个分支可以从 cocos-engine/native/external-config.json 中的 <code>checkout</code> 字段中查看。</li><li>点击右边的 <strong>源代码（Code）</strong> 按钮，弹出源码下载页面。</li><li>点击 <strong>下载ZIP（Download ZIP）</strong> 按钮，下载源码压缩包。</li><li>解压，重命名为 <code>external</code>，并放到 <code>cocos-engine/native</code> 目录下。</li></ol><blockquote><p><strong>注意</strong>：external 与 cocos-engine 的版本号要一致，否则可能导致编译失败。</p></blockquote><h3 id="在-cocos-creator-中编译" tabindex="-1">在 Cocos Creator 中编译 <a class="header-anchor" href="#在-cocos-creator-中编译" aria-label="Permalink to &quot;在 Cocos Creator 中编译&quot;">​</a></h3><p>引擎修改完成后，打开 <strong>构建发布</strong> 面板，点击<strong>构建</strong>，构建完成后，点击 <strong>编译</strong>。</p><h3 id="在-ide-中编译" tabindex="-1">在 IDE 中编译 <a class="header-anchor" href="#在-ide-中编译" aria-label="Permalink to &quot;在 IDE 中编译&quot;">​</a></h3><p>第一次配置完自定义引擎路径后，需要 <strong>在构建发布</strong> 面板点击 <strong>构建</strong> 按钮，才会同步相关配置到 IDE（如 Xcode, Android Studio, Visual Studio 等）中。</p><p>此时的 IDE 中引用的 <code>Cocos Engine</code> 路径将会是自定义引擎的路径。修改完原生相关代码后，直接使用 IDE 的编译即可。</p><h2 id="重新编译原生引擎模拟器" tabindex="-1">重新编译原生引擎模拟器 <a class="header-anchor" href="#重新编译原生引擎模拟器" aria-label="Permalink to &quot;重新编译原生引擎模拟器&quot;">​</a></h2><p>Cocos Creator 提供了基于原生引擎的模拟器预览功能：</p><p><img src="'+d+`" alt="custom-native-simulator"></p><h3 id="自定义-typescript-引擎" tabindex="-1">自定义 TypeScript 引擎 <a class="header-anchor" href="#自定义-typescript-引擎" aria-label="Permalink to &quot;自定义 TypeScript 引擎&quot;">​</a></h3><p>若使用了自定义 TypeScript 引擎，则这个原生模拟器在启动时，会去加载自定义引擎路径下的<code>自定义引擎路径/native/simulator</code> 的 TS 引擎模块。</p><p>首次启动时，需要点击编辑器顶部菜单栏中的 <strong>开发者 -&gt; 编译原生模拟器引擎</strong>，否则会无法成功加载 TS 引擎模块。</p><h3 id="自定义原生引擎" tabindex="-1">自定义原生引擎 <a class="header-anchor" href="#自定义原生引擎" aria-label="Permalink to &quot;自定义原生引擎&quot;">​</a></h3><p>若勾选了自定义原生引擎，在运行模拟器时，Cocos Creator 会启动 <code>自定义引擎路径/native/simulator/</code> 路径下的模拟器应用程序。</p><p>为了避免安装包过大，Cocos Creator 在发布时剔除了原生引擎模拟器相关工程，需要按以下步骤配置环境，重新编译生成，否则无法启动：</p><h3 id="cmake-安装与配置" tabindex="-1">CMake 安装与配置 <a class="header-anchor" href="#cmake-安装与配置" aria-label="Permalink to &quot;CMake 安装与配置&quot;">​</a></h3><blockquote><p>Cocos Creator 在构建、编译、发布应用时，使用的是自带的 CMake，并配置好了路径，不需要再做相关配置。</p></blockquote><p>原生模拟器的编译不属于构建流程，因此需要自己配置 CMake 编译环境。</p><p>由于不同的系统平台和系统版本有差异，请参考 <a href="https://cmake.org/install/" target="_blank" rel="noreferrer">CMake 官方文档</a> 安装 CMake 并配置系统环境变量。</p><h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h3><p><code>CMake</code> 配置完成后在 <code>自定义引擎路径/native</code> 目录下依次执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖的模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成原生模拟器相关文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gulp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen-simulator</span></span></code></pre></div><p>编译完成后，会在 <code>自定义引擎路径/native/simulator</code> 路径下生成一个模拟器工程和模拟器可执行文件，便可运行原生模拟器了。</p><p>模拟器编译成功后，若后续只改动了 <strong>TypeScript</strong> 部分，则只需要点击编辑器顶部菜单栏中的 <strong>开发者 -&gt; 编译原生模拟器引擎</strong> 即可。</p>`,89),u=[k];function b(m,C,E,y,_,q){return e(),s("div",null,u)}const x=a(g,[["render",b]]);export{v as __pageData,x as default};
