import{_ as t,c as e,o as a,a4 as l}from"./chunks/framework.uQk9_EO2.js";const i="/docs/cocos/assets/unlit-shademode.BGso6kc9.png",u=JSON.parse('{"title":"Unlit","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/effect-builtin-unlit.md","filePath":"en/shader/effect-builtin-unlit.md","lastUpdated":1712305443000}'),r={name:"en/shader/effect-builtin-unlit.md"},n=l('<h1 id="unlit" tabindex="-1">Unlit <a class="header-anchor" href="#unlit" aria-label="Permalink to &quot;Unlit&quot;">​</a></h1><p>Unlit is the most basic shading model, under which no light source from the engine can affect the final effect, and is applicable to:</p><ul><li>Objects that are not affected by light sources</li><li>Scenes with low screen requirements or high performance requirements</li></ul><p>When switching the shader to the Creator&#39;s built-in unlit shader (builtin-unlit.effect) in the material&#39;s <strong>Effect</strong> property, the following image is shown:</p><p><img src="'+i+'" alt="unlit"></p><h2 id="art-standards" tabindex="-1">Art standards <a class="header-anchor" href="#art-standards" aria-label="Permalink to &quot;Art standards&quot;">​</a></h2><p>For technical selection, to work with lighting under a model using the <strong>unlit</strong> material, draw the lighting information on the texture map and then drag the texture map into the <strong>MainTexture</strong> property box of the material.</p><p>To use PBR lighting, see: <a href="./effect-builtin-pbr">Physically Based Rendering</a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">parameter</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;">mainTexture</td><td style="text-align:left;">The main texture</td></tr><tr><td style="text-align:left;">tilingOffset</td><td style="text-align:left;">Scaling and offset of the model UV, xy corresponds to scaling, zw corresponds to offset</td></tr><tr><td style="text-align:left;">mainColor</td><td style="text-align:left;">The main color, which will be processed within the slice shader</td></tr><tr><td style="text-align:left;">colorScale</td><td style="text-align:left;">Multiply with main color to scale the main color</td></tr><tr><td style="text-align:left;">alphaThreshold</td><td style="text-align:left;">Used for semi-transparent tests, with USE_ALPHA_TEST enabled, pixels smaller than this value will be discarded</td></tr></tbody></table><h2 id="pre-compiled-macro-definitions" tabindex="-1">Pre-compiled macro definitions <a class="header-anchor" href="#pre-compiled-macro-definitions" aria-label="Permalink to &quot;Pre-compiled macro definitions&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">macro</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;">USE_INSTANCING</td><td style="text-align:left;">Whether to enable GPU geometry instancing</td></tr><tr><td style="text-align:left;">USE_VERTEX_COLOR</td><td style="text-align:left;">Whether to overlay vertex colors and alpha values</td></tr><tr><td style="text-align:left;">USE_TEXTURE</td><td style="text-align:left;">Whether to use the main texture (<code>mainTexture</code>)</td></tr><tr><td style="text-align:left;">USE_ALPHA_TEST</td><td style="text-align:left;">Whether to perform translucency testing (AlphaTest)</td></tr><tr><td style="text-align:left;">SAMPLE_FROM_RT</td><td style="text-align:left;">Whether to sample from the RenderTexture or not, when checked the Y value of the UV will be flipped</td></tr></tbody></table>',12),s=[n];function o(d,h,c,f,m,p){return a(),e("div",null,s)}const x=t(r,[["render",o]]);export{u as __pageData,x as default};
