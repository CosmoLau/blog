import{_ as a,E as s,c as n,m as t,a as e,J as i,w as l,a4 as o,o as c}from"./chunks/framework.uQk9_EO2.js";const d="/docs/cocos/assets/camera.DttwPkIr.png",g="/docs/cocos/assets/camera-view.yPChjHuP.gif",h="/docs/cocos/assets/camera-component.mTsx8cCy.png",p="/docs/cocos/assets/camera-visibility-gizmo.CR12kemS.png",m="/docs/cocos/assets/hdr1.BHygyyAO.png",f="/docs/cocos/assets/hdr2.nnYozvcx.png",k=JSON.parse('{"title":"Camera","description":"","frontmatter":{},"headers":[],"relativePath":"en/editor/components/camera-component.md","filePath":"en/editor/components/camera-component.md","lastUpdated":1712305443000}'),u={name:"en/editor/components/camera-component.md"},y=o('<h1 id="camera" tabindex="-1">Camera <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;Camera&quot;">​</a></h1><p>The <strong>Camera</strong> in a game is the main tool used to capture <strong>Scenes</strong>. The visible range of the <strong>Camera</strong> is controlled by adjusting camera-related parameters. The <strong>Camera</strong> is represented as follows in the <strong>Cocos Creator</strong> editor:</p><p><img src="'+d+'" alt="camera"></p><p>The <strong>Camera</strong>&#39;s visual range is composed of <strong>6</strong> planes forming a <strong>Frustum</strong>, a <strong>Near Plane</strong>, and a <strong>Far Plane</strong> to control the visible distance and range of near and far distance, at the same time, they also constitute the size of the viewport.</p><p><img src="'+g+'" alt="camera view"></p><p>To use <code>Camera</code>, please refer to the <a href="./__APIDOC__/en/class/Camera">Camera API</a>.</p><h2 id="camera-component" tabindex="-1">Camera component <a class="header-anchor" href="#camera-component" aria-label="Permalink to &quot;Camera component&quot;">​</a></h2><p>The <strong>Camera Component</strong> is an important functional component that we use to present a <strong>Scene</strong>.</p><p><img src="'+h+'" alt="camera component"></p><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Priority</strong></td><td style="text-align:left;">Render priority of the camera. High-priority <strong>Camera</strong>&#39;s will be rendered first in the rendering process</td></tr><tr><td style="text-align:left;"><strong>Visibility</strong></td><td style="text-align:left;">The <code>Visibility</code> of the <strong>Camera</strong>. Used to control the <code>Visibility</code> of different models in the same <strong>Camera</strong>.</td></tr><tr><td style="text-align:left;"><strong>ClearFlags</strong></td><td style="text-align:left;">Clearing flags of the Camera, spaces which part of the framebuffer will be actually clearedevery frame. Contains: <br> <strong>DONT_CLEAR</strong>: not clear. <br> <strong>DEPTH_ONLY</strong>: only clear the depth. <br> <strong>SLOD_COLOR</strong>: clear the color, depth and template buffer. <br> <strong>SKYBOX</strong>: enable skybox to clear depth only.</td></tr><tr><td style="text-align:left;"><strong>ClearColor</strong></td><td style="text-align:left;">Clear the specified color</td></tr><tr><td style="text-align:left;"><strong>ClearDepth</strong></td><td style="text-align:left;">Clear the specified depth</td></tr><tr><td style="text-align:left;"><strong>ClearStencil</strong></td><td style="text-align:left;">Clear the specified template buffer</td></tr><tr><td style="text-align:left;"><strong>Projection</strong></td><td style="text-align:left;">Projection mode. Divided into <strong>perspective projection (PERSPECTIVE)</strong> and <strong>orthogonal projection (ORTHO)</strong></td></tr><tr><td style="text-align:left;"><strong>FovAxis</strong></td><td style="text-align:left;">The axis on which the FOV would be fixed regardless of screen aspect changes</td></tr><tr><td style="text-align:left;"><strong>Fov</strong></td><td style="text-align:left;">Field of view of the camera</td></tr><tr><td style="text-align:left;"><strong>OrthoHeight</strong></td><td style="text-align:left;">Viewport height in orthogonal mode</td></tr><tr><td style="text-align:left;"><strong>Near</strong></td><td style="text-align:left;">The near clipping distance of the camera, should be as large as possible within acceptable range</td></tr><tr><td style="text-align:left;"><strong>Far</strong></td><td style="text-align:left;">The far clipping distance of the camera, should be as small as possible within acceptable range</td></tr><tr><td style="text-align:left;"><strong>Aperture</strong></td><td style="text-align:left;">The camera aperture, which affects the exposure parameters of the camera</td></tr><tr><td style="text-align:left;"><strong>Shutter</strong></td><td style="text-align:left;">The camera shutter, which affects the exposure parameters of the camera</td></tr><tr><td style="text-align:left;"><strong>Iso</strong></td><td style="text-align:left;">The camera ISO, which affects the exposure parameters of the camera <br> Please refer to <strong>Exposure</strong> below for more information</td></tr><tr><td style="text-align:left;"><strong>Rect</strong></td><td style="text-align:left;">The position and size of the viewport that the camera will eventually render to the screen</td></tr><tr><td style="text-align:left;"><strong>TargetTexture</strong></td><td style="text-align:left;">Output render target texture of the camera, which renders directly to the screen. Defaults to null</td></tr></tbody></table><h2 id="camera-group-rendering" tabindex="-1">Camera group rendering <a class="header-anchor" href="#camera-group-rendering" aria-label="Permalink to &quot;Camera group rendering&quot;">​</a></h2><p>The <strong>Camera</strong>&#39;s group rendering function is determined by the <code>Visibility</code> property and the <a href="./../../concepts/scene/node-component#set-the-layer-property-of-the-node">Layer property</a> of the node. The user can set the <strong>Visibility</strong> value through code to complete the group rendering. It should be noted that the <strong>Visibility</strong> value is <strong>bitwise comparison</strong>, and the user can manipulate the <strong>top 20 bits of Visibility</strong> through <strong>bit operations</strong> to complete the grouping.</p><p>The <strong>Camera</strong> and models provided by default are all <strong>rendered without grouping</strong>. You do not need to change this value if the game has no special requirements to do so.</p><h3 id="set-the-visibility-property" tabindex="-1">Set the Visibility property <a class="header-anchor" href="#set-the-visibility-property" aria-label="Permalink to &quot;Set the Visibility property&quot;">​</a></h3><p>The <code>Visibility</code> property is used to set which layers of nodes should be observed by the camera, and multiple Layers can be selected at the same time.</p><blockquote><p><strong>Note</strong>: the rendering of 2d elements (such as Sprite) also follows the <code>Layer</code> and <code>Visibility</code> judgement, adjust the <code>Layer</code> and <code>Visibility</code> as required.</p></blockquote><p>When you check multiple Layers in the <code>Visibility</code> property, the value of the <code>Visibility</code> property is calculated by performing a <code>|</code> operation on the property values of multiple Layers.</p><p>For example, in the following image, the <code>Visibility</code> property of the camera has both <strong>UI_3D</strong> and <strong>DEFAULT</strong> Layer checked, and by looking up <a href="./../../concepts/scene/layer">the value of the Layer property</a>, notice the value of the <strong>UI_3D</strong> property is <strong>1 &lt;&lt; 23</strong> , the value of the <strong>DEFAULT</strong> property is <strong>1 &lt;&lt; 30</strong>, and the value of the <code>Visibility</code> property is <strong>1 &lt;&lt; 23 | 1 &lt;&lt; 30 = 1082130432</strong>.</p><p><img src="'+p+'" alt="camera visibility gizmo"></p><p>For additional information on the implementation of Layer, please refer to the <a href="./../../concepts/scene/layer">Layer</a> documentation.</p><h3 id="visibility-calculations-for-the-camera" tabindex="-1">Visibility calculations for the camera <a class="header-anchor" href="#visibility-calculations-for-the-camera" aria-label="Permalink to &quot;Visibility calculations for the camera&quot;">​</a></h3><p>The <code>Visibility</code> property allows multiple Layers to be selected at the same time, while the <code>Layer</code> on the Node has its own value, so the <code>Visibility</code> property of the camera is an <strong>2<sup>32</sup></strong> bit integer. Each visible Layer occupies one bit, using bitwise operations, and supports up to 32 different Layer labels (one bit for each Layer value, that is, represented by <strong>2<sup>32</sup></strong>). When the camera is culling, the Layer&#39;s property value of each node will perform a <code>&amp;</code> operation with the camera, and if the <code>Visibility</code> property of the camera contains this <code>Layer</code>, then the current node will be visible to the camera, and vice versa.</p><h3 id="exposure" tabindex="-1">Exposure <a class="header-anchor" href="#exposure" aria-label="Permalink to &quot;Exposure&quot;">​</a></h3><p><strong>Aperture</strong>, <strong>Shutter</strong>, <strong>Iso</strong>: These three parameters of <strong>Camera</strong> will determine the amount of incoming light, which in turn affects the exposure value. Only takes effect if the scene has HDR turned on. The algorithm is usually as follows:</p>',24),b=t("sub",null,"2",-1),x=t("sup",null,"2",-1),_=o('<p><code>ApertureValue</code>, <code>ShutterValue</code> and <code>IsoValue</code> are obtained by looking up the enumeration values of the three attributes <strong>Aperture</strong>, <strong>Shutter</strong>, <strong>Iso</strong>. Where k is a cosntant.</p><p>The following images demonstrate the effect of exposure on a scene:</p><p><img src="'+m+'" alt="hdr1"></p><p><img src="'+f+'" alt="hdr2"></p><p>To enable scene HDR, please refer to <a href="./../../concepts/scene/skybox#Toggling%HDR/LDR%mode">Skybox - Toggling HDR/LDR mode</a>.</p>',5);function C(T,v,w,V,P,L){const r=s("mlog");return c(),n("div",null,[y,t("p",null,[e("ev = "),i(r,null,{default:l(()=>[e("log")]),_:1}),e(),b,e(" (ApertureValue"),x,e(" / ShutterValue*k / IsoValue)")]),_])}const D=a(u,[["render",C]]);export{k as __pageData,D as default};
