import{_ as t,v as e,b as s,R as a}from"./chunks/framework.5ffcbaff.js";const n="/docs/cocos/assets/octree-scene-culling.70b78894.png",b=JSON.parse('{"title":"原生场景剔除","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/native-scene-culling.md","filePath":"zh/manual/advanced-topics/native-scene-culling.md"}'),l={name:"zh/manual/advanced-topics/native-scene-culling.md"},o=a('<h1 id="原生场景剔除" tabindex="-1">原生场景剔除 <a class="header-anchor" href="#原生场景剔除" aria-label="Permalink to &quot;原生场景剔除&quot;">​</a></h1><p>Creator 从 v3.4.0 开始支持原生场景剔除，包括 <strong>八叉树场景剔除</strong> 和 <strong>遮挡查询剔除</strong>，仅对原生平台生效。</p><h2 id="八叉树场景剔除" tabindex="-1">八叉树场景剔除 <a class="header-anchor" href="#八叉树场景剔除" aria-label="Permalink to &quot;八叉树场景剔除&quot;">​</a></h2><p>一般情况下，引擎剔除不在视锥（摄像机的可见范围）内的模型，是通过逐个检测模型的包围盒是否在视锥内，速度较慢。若开启八叉树场景剔除，则通过八叉树可以快速剔除不在视锥内的模型。</p><p>该功能默认关闭，若需要开启，在 <strong>层级管理器</strong> 中选中场景根节点 <strong>Scene</strong>，然后在 <strong>属性检查器</strong> 中便可看到 <strong>Octree Scene Culling</strong> 项，勾选 <strong>Enabled</strong> 即可：</p><p><img src="'+n+'" alt="octree scene culling"></p><p>开启八叉树场景剔除后，在 <strong>场景编辑器</strong> 中会显示整个世界的包围盒（例如上图场景中白色边框的立方体）。</p><p><strong>Octree Scene Culling</strong> 的属性说明如下：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Enabled</td><td style="text-align:left;">勾选该项即可开启八叉树场景剔除，仅对原生平台生效</td></tr><tr><td style="text-align:left;">World MinPos</td><td style="text-align:left;">世界包围盒的最小顶点坐标（超出包围盒的物体不渲染）</td></tr><tr><td style="text-align:left;">World MaxPos</td><td style="text-align:left;">世界包围盒的最大顶点坐标（超出包围盒的物体不渲染）</td></tr><tr><td style="text-align:left;">Depth</td><td style="text-align:left;">八叉树深度，默认值为 8。若场景较小，该值建议不要设置太大，否则可能会耗费内存</td></tr></tbody></table><h2 id="遮挡查询剔除" tabindex="-1">遮挡查询剔除 <a class="header-anchor" href="#遮挡查询剔除" aria-label="Permalink to &quot;遮挡查询剔除&quot;">​</a></h2><p><strong>遮挡查询剔除</strong> 默认关闭，如果开启，则 GFX 后端会通过图形 API 进行遮挡查询，若物体被遮挡，则只使用简化的包围盒及材质来渲染该物体，以提升性能。</p><p>该功能可通过代码开启：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">director</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOcclusionQueryEnabled</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p><strong>注意</strong>：GLES 2.0 不支持遮挡查询剔除，某些 GLES 3.0 设备如果没有 <code>GL_EXT_occlusion_query_boolean</code> 扩展也不支持。</p></blockquote><h2 id="性能优化建议" tabindex="-1">性能优化建议 <a class="header-anchor" href="#性能优化建议" aria-label="Permalink to &quot;性能优化建议&quot;">​</a></h2><ul><li>如果场景中大部分物体都可见，建议不要开启 <strong>八叉树场景剔除</strong> 和 <strong>遮挡查询剔除</strong>。</li><li>不同设备可能表现略有差异，可通过性能测试对比后，决定是否开启相应的剔除功能。</li></ul>',16),r=[o];function c(i,p,d,g,h,u){return e(),s("div",null,r)}const f=t(l,[["render",c]]);export{b as __pageData,f as default};
