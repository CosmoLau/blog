import{_ as t,c as e,o,a4 as n}from"./chunks/framework.uQk9_EO2.js";const r="/docs/cocos/assets/layout.CMLh5Z8V.png",f=JSON.parse('{"title":"Layout Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/layout.md","filePath":"en/ui-system/components/editor/layout.md","lastUpdated":1712305443000}'),s={name:"en/ui-system/components/editor/layout.md"},a=n('<h1 id="layout-component-reference" tabindex="-1">Layout Component Reference <a class="header-anchor" href="#layout-component-reference" aria-label="Permalink to &quot;Layout Component Reference&quot;">​</a></h1><p><strong>Layout</strong> is a component for UI container nodes. This component provide to the container various layout functionalities to automatically arrange all the children, so that the developer can make list, page, grid container, etc conveniently.</p><p><img src="'+r+'" alt="layout"></p><p>Click the <strong>Add Component</strong> button at the bottom of the <strong>Inspector</strong> panel and select <strong>UI -&gt; Layout</strong> to add the <strong>Layout</strong> component to the node.</p><p>To use <code>Layout</code>, please refer to the <a href="./__APIDOC__/en/class/Layout">Layout API</a> documentation and the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/05.layout" target="_blank" rel="noreferrer">05.layout example</a> of the <strong>test-cases-3d</strong> project.</p><h2 id="layout-properties" tabindex="-1">Layout Properties <a class="header-anchor" href="#layout-properties" aria-label="Permalink to &quot;Layout Properties&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Type</strong></td><td style="text-align:left;">Layout type, including <strong>NONE</strong>, <strong>HORIZONTAL</strong>, <strong>VERTICAL</strong> and <strong>GRID</strong>.</td></tr><tr><td style="text-align:left;"><strong>ResizeMode</strong></td><td style="text-align:left;">Resize mode, including <strong>NONE</strong>, <strong>CHILDREN</strong> and <strong>CONTAINER</strong>.</td></tr><tr><td style="text-align:left;"><strong>PaddingLeft</strong></td><td style="text-align:left;">The left padding between the children and the container frame.</td></tr><tr><td style="text-align:left;"><strong>PaddingRight</strong></td><td style="text-align:left;">The right padding between the children and the container frame.</td></tr><tr><td style="text-align:left;"><strong>PaddingTop</strong></td><td style="text-align:left;">The top padding between the children and the container frame.</td></tr><tr><td style="text-align:left;"><strong>PaddingBottom</strong></td><td style="text-align:left;">The bottom padding between the children and the container frame.</td></tr><tr><td style="text-align:left;"><strong>SpacingX</strong></td><td style="text-align:left;">The spacing between children in the horizontal layout. <strong>NONE</strong> mode doesn&#39;t have this property.</td></tr><tr><td style="text-align:left;"><strong>SpacingY</strong></td><td style="text-align:left;">The spacing between children in the vertical layout. <strong>NONE</strong> mode doesn&#39;t have this property.</td></tr><tr><td style="text-align:left;"><strong>HorizontalDirection</strong></td><td style="text-align:left;">When it is designated as horizontal layout, this property determines which side(left or right) does the first child node start in the layout. When the <strong>Layout</strong> type is set to <strong>GRID</strong>, this property along with <code>Start Axis</code> property determine the starting horizontal alignment of <strong>GRID</strong> layout elements.</td></tr><tr><td style="text-align:left;"><strong>VerticalDirection</strong></td><td style="text-align:left;">When it is designated as vertical layout, this property determines which side(top or bottom) does the first child node start in the layout. When the <strong>Layout</strong> type is set to <strong>GRID</strong>, this property with <code>Start Axis</code> property determines the starting vertical alignment of <strong>GRID</strong> layout elements.</td></tr><tr><td style="text-align:left;"><strong>CellSize</strong></td><td style="text-align:left;">This property is only available in <strong>GRID</strong> layout, <strong>CHILDREN</strong> resize mode, determines the size of each child node.</td></tr><tr><td style="text-align:left;"><strong>StartAxis</strong></td><td style="text-align:left;">This property is only available in <strong>GRID</strong> layout, determines the arrangement direction of children.</td></tr><tr><td style="text-align:left;"><strong>AffectedByScale</strong></td><td style="text-align:left;">Whether the scale of the child node affects the layout.</td></tr><tr><td style="text-align:left;"><strong>AutoAlignment</strong></td><td style="text-align:left;">Auto-alignment, in <code>Type</code> type <strong>HORIZONTAL</strong> or <strong>VERTICAL</strong> mode, ensures that the other axial value is zero.</td></tr><tr><td style="text-align:left;"><strong>Constraint</strong></td><td style="text-align:left;">Layout constraints that constrain the number of alignments in a given direction, supporting <strong>NONE</strong>, <strong>FIXED_ROW</strong> and <strong>FIXED_COL</strong>.</td></tr><tr><td style="text-align:left;"><strong>ConstraintNum</strong></td><td style="text-align:left;">The layout constraint value, valid in <code>Constraint</code> of type <strong>FIXED_ROW</strong> or <strong>FIXED_COL</strong> mode.</td></tr></tbody></table><h2 id="detailed-explanation" tabindex="-1">Detailed Explanation <a class="header-anchor" href="#detailed-explanation" aria-label="Permalink to &quot;Detailed Explanation&quot;">​</a></h2><p>After adding the <code>Layout</code> component, the default layout type is <strong>NONE</strong>, you can toggle the container alignment type by modifying <code>Type</code> in <strong>Inspector</strong>. The types are <strong>HORIZONTAL</strong>, <strong>VERTICAL</strong> and <strong>GRID</strong> layouts. Also, <code>ResizeMode</code> is supported for all layout types except <strong>NONE</strong>.</p><ul><li><p>The modes of <code>Resize Mode</code>:</p><ul><li><p>When <strong>Resize Mode</strong> is <strong>NONE</strong>, the size of the container and children is independent from each other.</p></li><li><p>When <strong>Resize Mode</strong> is <strong>CHILDREN</strong>, the size of the children will change with the size of the container to make sure all children fit inside the container&#39;s bounding box.</p></li><li><p>When <strong>Resize Mode</strong> is <strong>CONTAINER</strong>, the size of the container will change with the size of the children to make sure the container is large enough to contain all children inside its bounding box.</p></li></ul><p>All alignments are calculated based on the container size. If the sorting needs to be fixed, set the <code>Type</code> to <code>Grid</code> and then set the <code>Constraint</code> and <code>ConstraintNum</code> to fix the sorting.</p></li><li><p>The modes of <code>Constraint</code>:</p><ul><li><p>When <strong>Constraint</strong> is <strong>NONE</strong>, the layout is free of <strong>Constraint</strong>.</p></li><li><p>When <strong>Constraint</strong> is <strong>FIXED_ROW</strong>, a fixed number of rows is used with <code>ConstraintNum</code>.</p></li><li><p>When <strong>Constraint</strong> is <strong>FIXED_COL</strong>, a fixed number of columns is used with <code>ConstraintNum</code>.</p></li></ul></li></ul><blockquote><p><strong>Note</strong>: if the <strong>Layout</strong>&#39;s configuration is set in runtime, the results need to be updated until the next frame, unless you manually call <code>updateLayout</code> API.</p></blockquote><p>For more layout examples, please refer to the <a href="./../engine/auto-layout">Auto Layout</a> documentation for details.</p>',12),i=[a];function l(d,g,h,c,p,y){return o(),e("div",null,i)}const m=t(s,[["render",l]]);export{f as __pageData,m as default};
