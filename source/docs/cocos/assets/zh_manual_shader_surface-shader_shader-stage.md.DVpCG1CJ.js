import{_ as s,c as a,o as t,a5 as e}from"./chunks/framework.CqnjdYks.js";const g=JSON.parse('{"title":"Shader 类型","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/surface-shader/shader-stage.md","filePath":"zh/manual/shader/surface-shader/shader-stage.md"}'),i={name:"zh/manual/shader/surface-shader/shader-stage.md"},h=e(`<h1 id="shader-类型" tabindex="-1">Shader 类型 <a class="header-anchor" href="#shader-类型" aria-label="Permalink to &quot;Shader 类型&quot;">​</a></h1><p>渲染是由不同的着色器来完成的，有处理顶点的、有处理像素的、有用于通用计算的。</p><p>在 Surface Shader 架构中，为了良好的可读性和可维护性，不同的 Shader 类型会有一个约定的代码标识， 如下表所示：</p><table><thead><tr><th>着色器阶段</th><th>对应的 Surface Shader 代码标识</th></tr></thead><tbody><tr><td>Vertex Shader</td><td>vs</td></tr><tr><td>Fragment Shader</td><td>fs</td></tr><tr><td>Computer Shader</td><td>cs</td></tr></tbody></table><p>你可以在内置的 effect 和 chunk 文件中发现许多文件以 xxxx-vs 或者 xxxx-fs 命名。</p><p>而在 effect 和 chunk 文件中， 也有许多类似 <code>CCProgram xxx-vs %{}%</code> 和 <code>CCProgram xxx-fs %{}%</code> 的代码片段定义。</p><p>比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>用户在编写自己的 Shader 时，最好也遵守这个约定，以维持源码的可读性与维护性。</p>`,9),n=[h];function r(d,p,l,k,c,o){return t(),a("div",null,n)}const _=s(i,[["render",r]]);export{g as __pageData,_ as default};
