import{_ as s,v as a,b as e,R as n}from"./chunks/framework.5ffcbaff.js";const C=JSON.parse('{"title":"网页预览定制工作流程","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/preview/browser.md","filePath":"zh/manual/editor/preview/browser.md"}'),l={name:"zh/manual/editor/preview/browser.md"},o=n(`<h1 id="网页预览定制工作流程" tabindex="-1">网页预览定制工作流程 <a class="header-anchor" href="#网页预览定制工作流程" aria-label="Permalink to &quot;网页预览定制工作流程&quot;">​</a></h1><h2 id="自定义预览模板" tabindex="-1">自定义预览模板 <a class="header-anchor" href="#自定义预览模板" aria-label="Permalink to &quot;自定义预览模板&quot;">​</a></h2><p>预览支持自定义模板方便用户自定义需要的预览效果，自定义的预览模板可以放置在项目目录的 <code>preview-template</code> 文件夹中。或者点击编辑器主菜单中的 <strong>项目 -&gt; 生成预览模板</strong> 就可以在项目目录下创建一个最新的预览模板。编辑器中的预览也是使用模板来注入最新的项目数据，预览时将会查找该目录下的 index 文件，如果存在就是要该文件作为预览的模板。</p><p><code>preview-template</code> 文件夹的结构类似：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">project</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">folder</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|--</span><span style="color:#A6ACCD;">assets</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|--</span><span style="color:#A6ACCD;">build</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|--</span><span style="color:#A6ACCD;">preview</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">template</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 必须的入口文件</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">|--</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ejs</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 其他文件可根据想要实现的预览效果进行添加</span></span></code></pre></div><p>开始自定义网页预览，需要注意的是，预览模板中存在一些预览菜单项以及预览调试工具等内容，所以在增删一些模板语法的内容时要稍加注意，如果随意修改可能会导致预览模板不可用。建议使用 ejs 注入的内容都保留，然后在此基础上添加需要的内容即可。另外，假如 <code>index.html</code> 与 <code>index.ejs</code> 共存时，<strong><code>index.html</code> 将会替代 <code>index.ejs</code></strong> 成为预览的页面内容。</p><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><p>以下示例可以在 <a href="https://github.com/cocos/cocos-test-projects/tree/v3.7/preview-template" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.7/preview-template" target="_blank" rel="noreferrer">Gitee</a> 查找到。</p><ol><li><p>点击编辑器主菜单中的 <strong>项目 -&gt; 生成预览模板</strong>，<strong>控制台</strong> 便会输出“预览模板生成成功”的提示，并显示预览模板的生成路径。</p></li><li><p>添加需要使用的脚本如 <code>test.js</code>，其中 <code>&lt;%- include(cocosTemplate, {}) %&gt;</code> 中包含的是默认的启动游戏逻辑，添加的脚本可以根据需要在游戏逻辑启动前/后来决定存放的位置。下面的 <code>test.js</code> 是在游戏启动后加载。</p><ul><li><p>打开 <code>index.ejs</code> 修改如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;%- include(cocosTemplate, {}) %&gt; // 游戏启动处理逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/test.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> // 新增脚本</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li><li><p><code>test.js</code> 放置在页面内标识的相对路径（只能在 <code>preview-template</code> 文件夹中）</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">|--preview-template</span></span>
<span class="line"><span style="color:#A6ACCD;">        |--index.ejs</span></span>
<span class="line"><span style="color:#A6ACCD;">        |--test.js</span></span></code></pre></div></li></ul></li></ol>`,9),p=[o];function t(c,r,i,d,D,y){return a(),e("div",null,p)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
