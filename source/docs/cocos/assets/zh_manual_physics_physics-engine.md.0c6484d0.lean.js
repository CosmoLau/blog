import{_ as t,v as e,b as l,R as s}from"./chunks/framework.5ffcbaff.js";const a="/docs/cocos/assets/physics-module.e1fb77ad.jpg",x=JSON.parse('{"title":"设置物理引擎","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/physics/physics-engine.md","filePath":"zh/manual/physics/physics-engine.md"}'),n={name:"zh/manual/physics/physics-engine.md"},r=s('<h1 id="设置物理引擎" tabindex="-1">设置物理引擎 <a class="header-anchor" href="#设置物理引擎" aria-label="Permalink to &quot;设置物理引擎&quot;">​</a></h1><p>点击编辑器上方菜单栏的 <strong>项目 -&gt; 项目设置 -&gt; 功能裁剪</strong>，在 <strong>3D -&gt; 物理系统</strong> 中可以根据需要选择适合项目的物理引擎进行开发，也可以在开发过程中随时切换。目前 Creator 支持的物理引擎包括 <strong>Bullet （ammo.js）</strong>、<strong>cannon.js</strong>、<strong>PhysX</strong> 和 <strong>builtin</strong>，默认使用 <strong>Bullet（ammo.js）</strong>。</p><p><img src="'+a+`" alt="物理引擎选项"></p><h2 id="物理引擎" tabindex="-1">物理引擎 <a class="header-anchor" href="#物理引擎" aria-label="Permalink to &quot;物理引擎&quot;">​</a></h2><h3 id="bullet-ammo-js" tabindex="-1">Bullet （ammo.js） <a class="header-anchor" href="#bullet-ammo-js" aria-label="Permalink to &quot;Bullet （ammo.js）&quot;">​</a></h3><p>ammo.js（<a href="https://github.com/cocos-creator/ammo.js" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/ammo.js" target="_blank" rel="noreferrer">Gitee</a>）是 <a href="https://github.com/bulletphysics/bullet3" target="_blank" rel="noreferrer">bullet</a> 物理引擎的 asm.js/wasm 版本，由 <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> 工具编译而来。</p><p><strong>ammo.js</strong> 模块较大（约 1.5MB），但它具有完善的物理功能，以及更佳的性能，未来我们也将在此投入更多工作。</p><h3 id="builtin" tabindex="-1">builtin <a class="header-anchor" href="#builtin" aria-label="Permalink to &quot;builtin&quot;">​</a></h3><p><strong>builtin</strong> 内置物理引擎 <strong>仅有碰撞检测</strong> 的功能。相对于其它的物理引擎，它没有复杂的物理模拟计算，如果您的项目不需要这一部分的物理模拟，那么建议使用 <strong>builtin</strong>，使游戏的包体更小。</p><p>使用 <strong>builtin</strong> 进行开发时，请注意以下事项：</p><ul><li>只有 <strong>trigger</strong> 触发器类型的事件。</li><li>3D 碰撞组件中的 <strong>IsTrigger</strong> 属性无效，所有的碰撞组件都只能用作 <a href="./physics-event.html">触发器</a>。</li><li>3D 碰撞组件中的 <code>Material</code> 属性无效.</li><li>3D 碰撞组件中的 <code>Attached</code> 为 <code>null</code>。</li><li>3D 物理 <a href="./physics-rigidbody.html">刚体组件</a> 无效.</li><li>3D 物理 <a href="./physics-constantForce.html">恒力组件</a> 无效。</li><li>3D 物理 <a href="./physics-constraint.html">约束组件</a> 无效。</li></ul><h3 id="cannon-js" tabindex="-1">cannon.js <a class="header-anchor" href="#cannon-js" aria-label="Permalink to &quot;cannon.js&quot;">​</a></h3><p><strong>cannon.js</strong>（<a href="https://github.com/cocos-creator/cannon.js" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/cannon.js" target="_blank" rel="noreferrer">Gitee</a>）是一个开源的物理引擎，使用 JavaScript 开发并实现了比较全面的物理模拟功能。<strong>cannon.js</strong> 模块大小约为 <strong>141KB</strong>。</p><p>当选择的物理引擎为 <strong>cannon.js</strong> 时，需要在节点上添加 <strong>刚体组件</strong> 才能进行物理模拟。然后再根据需求添加 <strong>碰撞组件</strong>，该节点就会增加相应的碰撞体，用于检测是否与其它碰撞体产生碰撞。</p><p>目前 cannon.js 支持情况如下：</p><ul><li><a href="./physics-rigidbody.html">刚体</a></li><li><a href="./physics-collider.html">Box/Sphere 碰撞组件</a></li><li>触发和碰撞事件</li><li>物理材质</li><li>射线检测</li></ul><h3 id="physx" tabindex="-1">PhysX <a class="header-anchor" href="#physx" aria-label="Permalink to &quot;PhysX&quot;">​</a></h3><p><strong>PhysX</strong>（<a href="https://github.com/NVIDIAGameWorks/PhysX" target="_blank" rel="noreferrer">GitHub</a>）是由英伟达公司开发的开源实时商业物理引擎，它具有完善的功能特性和极高的稳定性，同时也兼具极佳的性能表现。</p><p>目前 Cocos Creator 支持的 <strong>PhysX</strong> 是 4.1 版本，允许在绝大部分原生和 Web 平台中使用。当发布到原生平台时，推荐使用 PhysX 物理，可以得到更好的物理性能，特别是发布到 iOS 时。</p><p>但由于 <strong>PhysX</strong> 目前的包体过于庞大（约 5MB）以及自身的一些限制，导致部分平台无法得到良好支持，包括：</p><ul><li>各类有包体限制的小游戏平台</li><li>安卓 x86 设备</li></ul><p>部分较新的平台和设备，例如 HarmonyOS 的设备，将在后续支持，请留意更新公告。Apple M1（Silicon）架构的设备已在 v3.4 支持。</p><p>除此之外，字节跳动平台提供了底层的原生物理功能，因此字节跳动小游戏中同样可以使用该功能，详情请参考 <a href="./../editor/publish/publish-bytedance-mini-game.html">发布到字节跳动小游戏 - 原生物理</a>。</p><h3 id="不同物理后端碰撞形状支持情况" tabindex="-1">不同物理后端碰撞形状支持情况 <a class="header-anchor" href="#不同物理后端碰撞形状支持情况" aria-label="Permalink to &quot;不同物理后端碰撞形状支持情况&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">功能特性</th><th style="text-align:left;">builtin</th><th style="text-align:left;">cannon.js</th><th style="text-align:left;">Bullet</th><th style="text-align:left;">PhysX</th></tr></thead><tbody><tr><td style="text-align:left;">质心</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">盒、球</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">胶囊</td><td style="text-align:left;">✔</td><td style="text-align:left;">可以用基础形状拼凑</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">凸包</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">静态地形、静态平面</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">静态网格</td><td style="text-align:left;"></td><td style="text-align:left;">极其有限的支持</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">圆锥、圆柱</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">单纯形</td><td style="text-align:left;"></td><td style="text-align:left;">有限的支持</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">复合形状</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">射线检测、掩码过滤</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">多步模拟、碰撞矩阵</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">触发事件</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">自动休眠</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">碰撞事件、碰撞数据</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">物理材质</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">静态、运动学</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">动力学</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">点对点、铰链约束（实验）</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">wasm</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr></tbody></table><h2 id="不使用物理" tabindex="-1">不使用物理 <a class="header-anchor" href="#不使用物理" aria-label="Permalink to &quot;不使用物理&quot;">​</a></h2><p>若不需要用到任何物理相关的组件和接口，可以取消物理系统选项的勾选，使游戏的包体更小。</p><blockquote><p><strong>注意</strong>：若物理系统选项处于取消勾选的状态，项目将不可以使用物理相关的组件和接口，否则运行时将会报错。</p></blockquote><h2 id="物理引擎的性能表现" tabindex="-1">物理引擎的性能表现 <a class="header-anchor" href="#物理引擎的性能表现" aria-label="Permalink to &quot;物理引擎的性能表现&quot;">​</a></h2><p>主要针对各类小游戏平台和原生平台，并对使用 <strong>Bullet</strong> 和 <strong>PhysX</strong> 物理时的性能进行了对比：</p><ul><li>在原生和字节跳动小游戏平台上，使用 <strong>PhysX</strong> 物理可以得到更加良好的性能。</li><li>在各类小游戏平台上，使用 <strong>Bullet</strong> 物理可以得到更加良好的性能。</li></ul><h2 id="物理引擎的效果差异" tabindex="-1">物理引擎的效果差异 <a class="header-anchor" href="#物理引擎的效果差异" aria-label="Permalink to &quot;物理引擎的效果差异&quot;">​</a></h2><p>不同的物理引擎，其内部的设计和算法都不相同，因此会出现一些参数相同但是效果不同的情况，这些差异主要包括以下三类：</p><ol><li><p>刚体组件上的 <strong>damping</strong> 属性</p><p>由于 PhysX 物理使用了不同的阻尼算法模型导致的差异。但此差异已被内部消除，如果需要同步之前在 PhysX 中设置的阻尼值，可以参考以下代码进行转换：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> PhysicsSystem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fixedTimeStep</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newDamping </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> oldDamping </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> dt) </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> dt)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p>刚体组件上的 <strong>factor</strong> 属性</p><p>由于 PhysX 物理只固定刚体自由度，没有提供刚体速度的缩放因子导致的，即刚体组件中的 <strong>Linear Factor</strong> 和 <strong>Angular Factor</strong> 属性对 PhysX 物理只有固定效果。之后将会在内部消除此差异。</p></li><li><p>物理材质</p><p>PhysX 中的物理材质支持静态摩擦系数和弹性系数，与 Creator 中的物理材质资源相比，缺少了动态摩擦系数。该系数目前与静态摩擦系数保持一致，这部分的差异目前暂时无法提供转换方式。</p></li></ol><p>除了以上提到的几点之外，也存在其它算法的差异，例如数值积分方法、LCP 求解算法、求解精度等，因此始终会有不同的效果，不过这些在实际项目开发中不太容易感知。</p>`,35),i=[r];function o(d,g,y,p,c,h){return e(),l("div",null,i)}const m=t(n,[["render",o]]);export{x as __pageData,m as default};
