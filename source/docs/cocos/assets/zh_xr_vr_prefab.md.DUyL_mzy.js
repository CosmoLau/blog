import{_ as t,c as e,o as a,a4 as l}from"./chunks/framework.uQk9_EO2.js";const r="/docs/cocos/assets/prefab.DzO-UXBm.png",s="/docs/cocos/assets/prefabs.Dcyn80sT.png",n="/docs/cocos/assets/material.Dtq4Rvjd.png",o="/docs/cocos/assets/model.C7kXSNg6.png",m=JSON.parse('{"title":"内置资源与预制体","description":"","frontmatter":{},"headers":[],"relativePath":"zh/xr/vr/prefab.md","filePath":"zh/xr/vr/prefab.md","lastUpdated":1712305443000}'),d={name:"zh/xr/vr/prefab.md"},i=l('<h1 id="内置资源与预制体" tabindex="-1">内置资源与预制体 <a class="header-anchor" href="#内置资源与预制体" aria-label="Permalink to &quot;内置资源与预制体&quot;">​</a></h1><p>在 Cocos 扩展管理器中 <a href="./extension">开启 XR 扩展</a> 之后就可以允许在编辑器中使用传统创建对象的方式创建 XR 对象。</p><p>在 <strong>层级管理器</strong> 右键选择 <strong>创建</strong> -&gt; <strong>XR</strong>，右侧会出现当前可以创建的所有 XR 预制体。选择想要实例化生成的对象即可在场景中创建出来。</p><p><img src="'+r+'" alt="prefab.png"></p><h2 id="内置预制体" tabindex="-1">内置预制体 <a class="header-anchor" href="#内置预制体" aria-label="Permalink to &quot;内置预制体&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">包含组件</th></tr></thead><tbody><tr><td style="text-align:left;">XR Agent</td><td style="text-align:left;">现实世界主角相关的信息在虚拟场景中的代理节点，同时具有用于控制虚拟世界中 XR 主角的生命周期的功能。</td><td style="text-align:left;">TrackingOrigin</td></tr><tr><td style="text-align:left;">XR HMD</td><td style="text-align:left;">头戴显示器设备在虚拟世界中的抽象节点，基于 Camera 对象进行改造生成，用于同步现实世界中头戴显示器的输入信号并将引擎渲染结果输出至设备。</td><td style="text-align:left;">Camera <br>AudioSource <br>HMDCtrl <br>MRSight <br>PoseTracker <br>TargetEye</td></tr><tr><td style="text-align:left;">Ray Interactor</td><td style="text-align:left;">用于进行远距离交互的射线交互器，包含对 XR 设备手柄控制器的 I/O 映射以及射线交互功能。</td><td style="text-align:left;">PoseTracker<br>XRController<br>RayInteractor<br>Line</td></tr><tr><td style="text-align:left;">Direct Interactor</td><td style="text-align:left;">用于进行近距离直接交互的交互器，同时也包含了对 XR 设备手柄控制器的 I/O 映射以及交互功能</td><td style="text-align:left;">PoseTracker<br>XRController<br>DirectInteractor</td></tr><tr><td style="text-align:left;">Locomotion Checker</td><td style="text-align:left;">运动检查器，充当所有虚拟运动驱动访问 XR Agent 的仲裁者，可以保证固定时间内对唯一的运动状态的维持。</td><td style="text-align:left;">LocomotionChecker</td></tr><tr><td style="text-align:left;">Teleportable</td><td style="text-align:left;">支持与交互器发生传送交互行为的交互物，可以传送 XR Agent 到此对象相关的一个位置。</td><td style="text-align:left;">Teleportable <br>InteractableEvents</td></tr><tr><td style="text-align:left;">Simple Interactable</td><td style="text-align:left;">简易的交互物对象，用户可以在此对象上自定义扩展任意的交互行为</td><td style="text-align:left;">InteractableEvents</td></tr><tr><td style="text-align:left;">Grab Interactable</td><td style="text-align:left;">支持与交互器发生抓取行为的交互物</td><td style="text-align:left;">RigidBody<br>GrabInteractable<br>InteractableEvents</td></tr></tbody></table><h2 id="内置资源" tabindex="-1">内置资源 <a class="header-anchor" href="#内置资源" aria-label="Permalink to &quot;内置资源&quot;">​</a></h2><p>开启 XR 的扩展后，在内置资源数据库（xr-plugin）中会新增 XR 预制体、材质和模型等资源，可供用户直接使用。具体位置如下图所示。</p><ul><li><p>预制体资源</p><p><img src="'+s+'" alt="default_prefabs_xr"></p></li><li><p>材质资源</p><p><img src="'+n+'" alt="default_material_xr"></p></li><li><p>模型资源</p><p><img src="'+o+'" alt="prefab/default_model_xr"></p></li></ul>',9),c=[i];function g(p,f,b,x,_,h){return a(),e("div",null,c)}const R=t(d,[["render",g]]);export{m as __pageData,R as default};
