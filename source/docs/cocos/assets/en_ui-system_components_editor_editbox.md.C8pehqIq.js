import{_ as s,c as i,o as t,a4 as a}from"./chunks/framework.uQk9_EO2.js";const n="/docs/cocos/assets/editbox.C5mNi4kK.png",e="/docs/cocos/assets/editbox-event.QFjyl6VU.png",u=JSON.parse('{"title":"EditBox Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/editbox.md","filePath":"en/ui-system/components/editor/editbox.md","lastUpdated":1712305443000}'),h={name:"en/ui-system/components/editor/editbox.md"},l=a('<h1 id="editbox-component-reference" tabindex="-1">EditBox Component Reference <a class="header-anchor" href="#editbox-component-reference" aria-label="Permalink to &quot;EditBox Component Reference&quot;">​</a></h1><p><strong>EditBox</strong> is a text input component, use this component to get user input easily.</p><p><img src="'+n+'" alt="editbox"></p><p>Click the <strong>Add Component</strong> button at the bottom of the <strong>Inspector</strong> panel and select <strong>UI/EditBox</strong> to add the <strong>EditBox</strong> component to the node.</p><p>To use <code>EditBox</code>, please refer to the <a href="./__APIDOC__/en/class/EditBox">EditBox API</a> documentation and the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/12.editbox" target="_blank" rel="noreferrer">EditBox</a> scene of the test-cases-3d project.</p><h2 id="editbox-properties" tabindex="-1">EditBox Properties <a class="header-anchor" href="#editbox-properties" aria-label="Permalink to &quot;EditBox Properties&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Function Explanation</th></tr></thead><tbody><tr><td><strong>BackgroundImage</strong></td><td>The Sprite component attached to the node for EditBox&#39;s background</td></tr><tr><td><strong>FontColor</strong></td><td>The input text color of EditBox</td></tr><tr><td><strong>FontSize</strong></td><td>The input text size of EditBox</td></tr><tr><td><strong>InputFlag</strong></td><td>Specify the input flag: password or capitalized word. (Only supports Android platform)</td></tr><tr><td><strong>InputMode</strong></td><td>Specify the input mode: multiline or single line</td></tr><tr><td><strong>LineHeight</strong></td><td>The input text line height of EditBox</td></tr><tr><td><strong>MaxLength</strong></td><td>The maximize input characters of EditBox</td></tr><tr><td><strong>Placeholder</strong></td><td>The text content of EditBox placeholder</td></tr><tr><td><strong>PlaceholderFontColor</strong></td><td>The text font color of EditBox placeholder</td></tr><tr><td><strong>PlaceholderFontSize</strong></td><td>The text font size of EditBox placeholder</td></tr><tr><td><strong>PlaceholderLabel</strong></td><td>The Label component attached to the node for EditBox&#39;s placeholder text label</td></tr><tr><td><strong>ReturnType</strong></td><td>The keyboard return type of EditBox. This is useful for keyboard of mobile device</td></tr><tr><td><strong>String</strong></td><td>The initial input text of EditBox, which displays the text of the placeholder if not set</td></tr><tr><td><strong>TabIndex</strong></td><td>Set the <code>tabIndex</code> of the DOM input element, only useful on the Web</td></tr><tr><td><strong>TextLabel</strong></td><td>The Label component attached to the node for EditBox&#39;s input text label</td></tr></tbody></table><h2 id="editbox-events" tabindex="-1">EditBox Events <a class="header-anchor" href="#editbox-events" aria-label="Permalink to &quot;EditBox Events&quot;">​</a></h2><p><img src="'+e+`" alt="editbox-event"></p><p>For event structure you can refer to the <a href="./button">Button</a> documentation.</p><ul><li><strong>Editing Did Began</strong>: This event will be triggered when the user <strong>clicks</strong> on the <strong>EditBox</strong>.</li><li><strong>Editing Did Ended</strong>: This event will be triggered when the <strong>EditBox loses focus</strong>. <ul><li>When in <strong>single line input mode</strong>, it&#39;s triggered after user presses <strong>Enter</strong> key or <strong>clicks</strong> the area <strong>outside</strong> of <strong>EditBox</strong>.</li><li>When in <strong>multiline input mode</strong>, it&#39;s triggered only after user <strong>clicks</strong> the area <strong>outside</strong> of <strong>EditBox</strong>.</li></ul></li><li><strong>Text Changed</strong>: This event will be triggered when the <strong>content</strong> in <strong>EditBox</strong> is <strong>changed each time</strong>. However, it is not dispatched if it is set by <code>setter</code> of <code>EditBox.string</code>.</li></ul><h2 id="detailed-explanation" tabindex="-1">Detailed Explanation <a class="header-anchor" href="#detailed-explanation" aria-label="Permalink to &quot;Detailed Explanation&quot;">​</a></h2><ul><li>If you want to input password, you need set <strong>Input Flag</strong> to <code>PASSWORD</code> and the <strong>Input Mode</strong> mustn&#39;t be <code>ANY</code>, usually we use <strong>Single Line</strong>.</li><li>If you want to enable multiline input support, you can set the <strong>Input Mode</strong> to <code>Any</code>.</li><li>The background image of EditBox support 9-slicing sprite frame, you could customize the border as you did in Sprite component.</li></ul><h2 id="add-a-callback-through-the-script-code" tabindex="-1">Add a callback through the script code <a class="header-anchor" href="#add-a-callback-through-the-script-code" aria-label="Permalink to &quot;Add a callback through the script code&quot;">​</a></h2><h3 id="method-one" tabindex="-1">Method one <a class="header-anchor" href="#method-one" aria-label="Permalink to &quot;Method one&quot;">​</a></h3><p>The event callback added by this method is the same as the event callback added by the editor, all added by code. First you need to construct a <code>EventHandler</code> object, and then set the corresponding <code>target</code>, <code>component</code>, <code>handler</code> and <code>customEventData</code> parameters.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, EditBoxComponent, EventHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> editboxEventHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This node is the node to which your event handler code component belongs.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        editboxEventHandler.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        editboxEventHandler.component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        editboxEventHandler.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;onEditDidBegan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        editboxEventHandler.customEventData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foobar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> editbox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EditBoxComponent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        editbox.editingDidBegan.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(editboxEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // You can also register other callback functions in a similar way.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // editbox.editingDidEnded.push(editboxEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // editbox.textChanged.push(editboxEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // editbox.editingReturn.push(editboxEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onEditDidBegan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">editbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The editbox here is a EditBox object.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The customEventData parameter here is equal to the &quot;foobar&quot; you set before.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Suppose this callback is for the editingDidEnded event.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onEditDidEnded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">editbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The editbox here is a EditBox object.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The customEventData parameter here is equal to the &quot;foobar&quot; you set before.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Suppose this callback is for the textChanged event.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onTextChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">editbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The text here indicates the text content of the modified EditBox.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The editbox here is a EditBox object.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The customEventData parameter here is equal to the &quot;foobar&quot; you set before.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Suppose this callback is for the editingReturn event.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onEditingReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">editbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The editbox here is a EditBox object.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The customEventData parameter here is equal to the &quot;foobar&quot; you set before.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="method-two" tabindex="-1">Method two <a class="header-anchor" href="#method-two" aria-label="Permalink to &quot;Method two&quot;">​</a></h3><p>Added with <strong>Node</strong>&#39;s event API <code>editbox.node.on(&#39;editing-did-began&#39;, ...)</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Suppose we add an event handler callback inside a component&#39;s onLoad method and event handlers in the callback function.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, EditBoxComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EditBoxComponent)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    editbox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EditBoxComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.editbox.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;editing-did-began&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">editbox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EditBoxComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The callback parameter is the EditBox component, note that events registered this way cannot pass customEventData.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Similarly, you can register events such as <code>editing-did-ended</code>, <code>text-changed</code>, <code>editing-return</code>, etc. The parameters of the callback function for these events are consistent with the parameters of <code>editing-did-began</code>.</p>`,21),o=[l];function p(d,r,k,E,g,c){return t(),i("div",null,o)}const F=s(h,[["render",p]]);export{u as __pageData,F as default};
