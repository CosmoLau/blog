import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.CqnjdYks.js";const g=JSON.parse('{"title":"原生插件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/native-plugins/brief.md","filePath":"zh/manual/advanced-topics/native-plugins/brief.md"}'),t={name:"zh/manual/advanced-topics/native-plugins/brief.md"},e=n(`<h1 id="原生插件" tabindex="-1">原生插件 <a class="header-anchor" href="#原生插件" aria-label="Permalink to &quot;原生插件&quot;">​</a></h1><blockquote><p>注意：对 3.6.2 的原生插件支持有问题，请升级到 3.6.3 或更高版本。</p></blockquote><p>原生插件是编辑器插件的一部分。开发者通过原生插件调用脚本绑定接口（如 sebind）可以扩展 JS 脚本调用 C++ 的接口的能力，对解决脚本的性能瓶颈和复用现有代码库都非常有利。</p><h2 id="和现有插件系统的关系" tabindex="-1">和现有插件系统的关系 <a class="header-anchor" href="#和现有插件系统的关系" aria-label="Permalink to &quot;和现有插件系统的关系&quot;">​</a></h2><p>原生插件能独立于编辑器插件存在，用户通过拷贝到指定目录就可以使用原生插件。</p><p>同时，原生插件也作为现有编辑器插件系统的补充，扩展游戏运行时的能力。利用编辑插件的能力实现对原生插件管理， 如：下载/开关/版本升级等功能。</p><h3 id="插件的结构" tabindex="-1">插件的结构 <a class="header-anchor" href="#插件的结构" aria-label="Permalink to &quot;插件的结构&quot;">​</a></h3><p>每个插件的根目录下都有一个插件的描述文件 <code>cc_plugin.json</code>，这是一个标准的 JSON 文件。</p><p>在构建原生工程的时候，构建系统会从工程的 <code>extensions</code> 和 <code>native</code> 目录中去递归查找这所有的 <code>cc_plugin.json</code> 文件，以定位原生插件。一旦在目录中找到 <code>cc_plugins.json</code>，就不会再查找子目录中的内容。</p><h2 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h2><p>在少数未安装编辑器的环境下，需要安装 <a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer">NodeJS</a> 8.0 以上的版本，以支持插件配置解析。开发者可以将 NodeJS 并设置环境变量 <code>PATH</code>，也可以在 <code>CMakeLists.txt</code> 中通过设置 <code>NODE_EXECUTABLE</code> 指定。</p><p>也可以设置环境变量 <code>NODE_EXECUTABLE</code> 为 node 的完整路径。3.6.2 开始，如果 CMake 仍然定位不到 nodejs，可以在 <code>native/engine/common/localCfg.cmake</code> 中直接设置 <code>NODE_EXECUTABLE</code>。</p><h2 id="目录结构示例" tabindex="-1">目录结构示例 <a class="header-anchor" href="#目录结构示例" aria-label="Permalink to &quot;目录结构示例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── cc_plugin.json</span></span>
<span class="line"><span>├── android</span></span>
<span class="line"><span>│   ├── arm64-v8a</span></span>
<span class="line"><span>│   ├── armeabi-v7a</span></span>
<span class="line"><span>│   ├── x86</span></span>
<span class="line"><span>│   └── x86_64</span></span>
<span class="line"><span>├── ios</span></span>
<span class="line"><span>│   ├── include</span></span>
<span class="line"><span>│   └── lib</span></span>
<span class="line"><span>├── mac</span></span>
<span class="line"><span>│   ├── include</span></span>
<span class="line"><span>│   └── lib</span></span>
<span class="line"><span>└── windows</span></span>
<span class="line"><span>    ├── include</span></span>
<span class="line"><span>    └── lib</span></span></code></pre></div><p>文件 <code>cc_plugin.json</code> 是提供了加载插件所必须的信息，是原生插件的标识。每一个支持的原生平台对应一个目录，目录中至少包含一个 <code>&lt;PackageName&gt;-Config.cmake</code> 文件。构建系统会子使用 CMake 的 <a href="https://cmake.org/cmake/help/latest/command/find_package.html#id7" target="_blank" rel="noreferrer"><code>find_package</code></a> 机制定位或链接到所需的库文件。</p><p>如果插件中存在可跨平台的源文件或 CMake 配置, 可以将这些文件合并到顶层目录。详情请参考 <a href="https://github.com/PatriceJiang/ccplugin_tutorial/tree/main/NewProject/native/plugins/hello_cocos" target="_blank" rel="noreferrer">示例工程</a>。</p><h2 id="描述文件-cc-plugin-json-格式" tabindex="-1">描述文件 <code>cc_plugin.json</code> 格式 <a class="header-anchor" href="#描述文件-cc-plugin-json-格式" aria-label="Permalink to &quot;描述文件 \`cc_plugin.json\` 格式&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：插件名称</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：插件版本</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;engine-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：对应引擎版本的区间</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：插件作者</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：插件描述</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string[];       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：支持的平台列表，不填默认支持所有原生平台。包括 windows, android, mac, ios</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;disabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：禁用插件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;disable-by-platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string[];    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可选：指定平台禁用插件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：插件包含的库, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填：对应 \`find_package\` 名称，需和 \`CC_PLUGIN_ENTRY\` 的首参数保持一致</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;depends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string[];     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：依赖其他 module 名称 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string[];           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：重新限定支持的原生平台</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>engine-version</code> 可以指定版区间和排除指定版本，代码示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;engine-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3.3 &lt;= 3.6.0 !3.5.2|| 4.x&quot;</span></span></code></pre></div><h3 id="文件示例" tabindex="-1">文件示例 <a class="header-anchor" href="#文件示例" aria-label="Permalink to &quot;文件示例&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-cocos-demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo group&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;engine-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3.6.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello_cocos_glue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mac&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iOS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="安装原生插件" tabindex="-1">安装原生插件 <a class="header-anchor" href="#安装原生插件" aria-label="Permalink to &quot;安装原生插件&quot;">​</a></h2><p>开发者可以从 Store 下载并启用包含原生插件的编辑器扩展，同时完成插件的安装到 <code>extensions</code> 目录。也可以从论坛获取插件压缩包，手动解压到 <code>native/</code> 目录或其子目录。</p><p>如果想关闭插件，或者仅在特地平台关闭，可以修改 cc_plugin.json 中的 <code>disabled</code> 和 <code>disable-by-platforms</code> 字段。</p><blockquote><p><strong>注意</strong>：原生插件要求 CMake 为 3.12+，Android 需要 <a href="https://developer.android.com/studio/projects/install-ndk#vanilla_cmake" target="_blank" rel="noreferrer">指定 CMake 版本</a> 为 3.18.1. 其他平台使用编辑器内建的 CMake，可不必指定版本号。</p></blockquote><h2 id="创建原生插件" tabindex="-1">创建原生插件 <a class="header-anchor" href="#创建原生插件" aria-label="Permalink to &quot;创建原生插件&quot;">​</a></h2><p>Cocos 原生工程使用 CMake 管理，原生插件会通过 find_package 的搜索路径/目录来进行管理，因此只要目录符合 CMake find_package 的搜索规则，插件就能正确加载。所以，原生插件的开发过程，就是提供 CMake 配置和相关的资源，以及编写 cc_plugin.json 的过程。相关示例请参考 <a href="./tutorial.html">原生插件构建工程示例</a>。</p>`,28),l=[e];function p(h,k,o,d,r,c){return i(),a("div",null,l)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
