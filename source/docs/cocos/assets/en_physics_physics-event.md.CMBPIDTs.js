import{_ as t,c as e,o as i,a4 as s}from"./chunks/framework.uQk9_EO2.js";const l="/docs/cocos/assets/isTrigger.DtIz6Cpa.jpg",E=JSON.parse('{"title":"Physical Event","description":"","frontmatter":{},"headers":[],"relativePath":"en/physics/physics-event.md","filePath":"en/physics/physics-event.md","lastUpdated":1712305443000}'),n={name:"en/physics/physics-event.md"},a=s('<h1 id="physical-event" tabindex="-1">Physical Event <a class="header-anchor" href="#physical-event" aria-label="Permalink to &quot;Physical Event&quot;">​</a></h1><h2 id="trigger-and-collider" tabindex="-1">Trigger and Collider <a class="header-anchor" href="#trigger-and-collider" aria-label="Permalink to &quot;Trigger and Collider&quot;">​</a></h2><p><img src="'+l+`" alt="img"></p><p>Collider property <strong>IsTrigger</strong> determines whether the component is a trigger or a collider. When <strong>IsTrigger</strong> is set to <code>true</code>, the component is a trigger. Triggers are only used for collision detection and triggering events, and are ignored by the physics engine. With <code>false</code> set by default, the component is a collider and can be combined with <a href="./physics-rigidbody">Rigidbody</a> to produce collision effects.</p><p>The difference between the two is as follows.</p><ul><li>Triggers do not do more detailed detection with other triggers or colliders.</li><li>Colliders will do finer detection with colliders and will generate collision data such as collision points, normals, etc.</li></ul><h2 id="trigger-events" tabindex="-1">Trigger events <a class="header-anchor" href="#trigger-events" aria-label="Permalink to &quot;Trigger events&quot;">​</a></h2><p>Trigger events currently include the following three types:</p><table><thead><tr><th style="text-align:left;">Event</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>onTriggerEnter</code></td><td style="text-align:left;">Triggered when the trigger starts</td></tr><tr><td style="text-align:left;"><code>onTriggerStay</code></td><td style="text-align:left;">Triggered frequently when the trigger is held</td></tr><tr><td style="text-align:left;"><code>onTriggerExit</code></td><td style="text-align:left;">Triggered at the end of a trigger</td></tr></tbody></table><p>The collision pairs that can generate trigger events are</p><table><thead><tr><th style="text-align:left;">type</th><th style="text-align:left;">Static</th><th style="text-align:left;">Kinematic</th><th style="text-align:left;">Dynamic</th></tr></thead><tbody><tr><td style="text-align:left;">Static</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">Kinematic</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">Dynamic</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr></tbody></table><blockquote><p><strong>Note</strong>: To receive a trigger event, both must have a <strong>Collider</strong> component and at least one of them must be a trigger type. When using a physics engine that is not <strong>builtin</strong> physics engine, you also need to make sure that at least one object with a non-static rigid body (objects with only collider components and no rigid body components are considered to hold a static rigid body), whereas the <strong>builtin</strong> physics engine does not have this restriction.</p></blockquote><h3 id="listening-to-trigger-events" tabindex="-1">Listening to Trigger Events <a class="header-anchor" href="#listening-to-trigger-events" aria-label="Permalink to &quot;Listening to Trigger Events&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Make sure that the BoxCollider component is added to the node here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { BoxCollider, ITriggerEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BoxCollider);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onTriggerStay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onTriggerStay, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">private </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onTriggerStay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event: ITriggerEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="collision-events" tabindex="-1">Collision Events <a class="header-anchor" href="#collision-events" aria-label="Permalink to &quot;Collision Events&quot;">​</a></h2><p>Collision events are generated based on collision data, and no collision data is generated between rigid bodies of static types.</p><p>Currently collision events include the following three types:</p><table><thead><tr><th style="text-align:left;">Event</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>onCollisionEnter</code></td><td style="text-align:left;">Triggered when collision starts</td></tr><tr><td style="text-align:left;"><code>onCollisionStay</code></td><td style="text-align:left;">Triggered continuously when the collision is held.</td></tr><tr><td style="text-align:left;"><code>onCollisionExit</code></td><td style="text-align:left;">triggered when collision ends</td></tr></tbody></table><p>Where the collision pairs that can generate collision events are</p><table><thead><tr><th style="text-align:left;">type</th><th style="text-align:left;">Static</th><th style="text-align:left;">Kinematic</th><th style="text-align:left;">Dynamic</th></tr></thead><tbody><tr><td style="text-align:left;">Static</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">Kinematic</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">Dynamic</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr></tbody></table><blockquote><p><strong>Note</strong>: The collision event must be received if both have a collider component, at least one is a non-static rigid body, and a non-builtin physics engine is used.</p></blockquote><h3 id="listening-to-collision-events" tabindex="-1">Listening to Collision Events <a class="header-anchor" href="#listening-to-collision-events" aria-label="Permalink to &quot;Listening to Collision Events&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Collider, ICollisionEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collider);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Listening to &#39;onCollisionStay&#39; Events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onCollisionStay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onCollision, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">private </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCollision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event: ICollisionEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>Note</strong>: Currently collision events are in physical elements, and all collider components on that element receive collision events.</p></blockquote><h2 id="difference-between-trigger-events-and-collision-events" tabindex="-1">Difference between Trigger Events and Collision Events <a class="header-anchor" href="#difference-between-trigger-events-and-collision-events" aria-label="Permalink to &quot;Difference between Trigger Events and Collision Events&quot;">​</a></h2><ul><li>Trigger events are generated by triggers, collision events are generated based on collision data.</li><li>Trigger events can be generated by a trigger and another trigger/collider.</li><li>Collision events need to be generated by two colliders, and at least one of them is a dynamic rigid body.</li></ul><h2 id="continuous-collision-detection" tabindex="-1">Continuous Collision Detection <a class="header-anchor" href="#continuous-collision-detection" aria-label="Permalink to &quot;Continuous Collision Detection&quot;">​</a></h2><p>Compared to the continuous real world, the physics engine simulation is actually discrete, which means that the physics engine takes 1/60th of a second or some other defined time to sample once. Therefore, for faster objects, the physics engine may not be able to detect the collision results correctly, to solve this phenomenon, you can turn on continuous physics detection (CCD).</p><p>Turn on continuous collision detection in the engine as follows：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rigidBody</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RigidBody);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidBody.useCCD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Refer to <a href="./physics-ccd">Continuous Collision Detection</a> for a more detailed description.</p><h2 id="event-trigger-rules" tabindex="-1">Event Trigger Rules <a class="header-anchor" href="#event-trigger-rules" aria-label="Permalink to &quot;Event Trigger Rules&quot;">​</a></h2><p>The generation of collision events will vary depending on the type of rigid body, collider or trigger, the results are organized here as shown below.</p><blockquote><p><strong>Note</strong>: The rigid bodies marked here all carry collider and are configured to allow collisions within the collision matrix.</p></blockquote><table><thead><tr><th style="text-align:left;">-</th><th style="text-align:left;">Static</th><th style="text-align:left;">Kinematic</th><th style="text-align:left;">Dynamical</th><th style="text-align:left;">Collider</th><th style="text-align:left;">Trigger</th></tr></thead><tbody><tr><td style="text-align:left;">Static</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Kinematic</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">Dynamic</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">Collider</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Trigger</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p><strong>Note</strong>: The collision event between two triggers is not supported in the PhysX backend.</p></blockquote>`,36),o=[a];function r(d,h,g,p,c,k){return i(),e("div",null,o)}const f=t(n,[["render",r]]);export{E as __pageData,f as default};
