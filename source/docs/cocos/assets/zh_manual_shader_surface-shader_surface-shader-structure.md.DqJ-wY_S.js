import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.CqnjdYks.js";const o=JSON.parse('{"title":"Surface Shader 结构","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/surface-shader/surface-shader-structure.md","filePath":"zh/manual/shader/surface-shader/surface-shader-structure.md"}'),e={name:"zh/manual/shader/surface-shader/surface-shader-structure.md"},h=n(`<h1 id="surface-shader-结构" tabindex="-1">Surface Shader 结构 <a class="header-anchor" href="#surface-shader-结构" aria-label="Permalink to &quot;Surface Shader 结构&quot;">​</a></h1><p>一个典型的 Surface Shader 通常由四个主要部分构成：</p><ol><li>CCEffect</li><li>共享常量声明</li><li>宏映射</li><li>主体功能函数</li><li>Shader组装器：用于将上面4个部分与内置的Surface Shader 功能进行级任</li></ol><h2 id="_1、cceffect" tabindex="-1">1、CCEffect <a class="header-anchor" href="#_1、cceffect" aria-label="Permalink to &quot;1、CCEffect&quot;">​</a></h2><p>CCEffect 用于描述 Surface Shader 的 techniques, pass , 属性以及渲染状态等信息。材质会根据 CCEffect 中的描述生成默认值，以及在材质面板上显示。</p><p>具体内容请参考 <a href="./../effect-syntax.html">Cocos Shader 语法</a>。</p><h2 id="_2、共享常量声明" tabindex="-1">2、共享常量声明 <a class="header-anchor" href="#_2、共享常量声明" aria-label="Permalink to &quot;2、共享常量声明&quot;">​</a></h2><p>共享常量声明会将所有 pass， vs 和 fs 都需要用到的常量写在一起，简化 Shader 编写。</p><p>这是一个可选项，但对于复杂的 Shader 来说，建议使用。以内置 Surface Shader 为例：</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ubos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uniform Constants {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vec4 titlingOffset;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><blockquote><p>注意：并不一定非要叫 <code>shared-ubos</code> 和 <code>Constants</code> ，只要方便记忆即可。</p></blockquote><h2 id="_3、宏映射" tabindex="-1">3、宏映射 <a class="header-anchor" href="#_3、宏映射" aria-label="Permalink to &quot;3、宏映射&quot;">​</a></h2><p>Surface Shader 提供了大量的内置宏，这些宏默认是不显示在面板上的，如果想让这些宏显示在面板上，就需要重新映射它们的名字。</p><p>并且，你可以将一些宏集中放在这个代码片段中，方便管理，以内置 Surface Shader 为例：</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ui displayed macros</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define-meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAS_SECOND_UV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define-meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> USE_TWOSIDE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_USE_SECOND_UV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_SECOND_UV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_USE_TWO_SIDED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USE_TWOSIDE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>更多详情请参考 <a href="./macro-remapping.html">宏定义与重映射</a>。</p><blockquote><p>注意：并不一定非要叫 <code>macro-remapping</code> 只要方便记忆即可。</p></blockquote><h2 id="_4、函数块" tabindex="-1">4、函数块 <a class="header-anchor" href="#_4、函数块" aria-label="Permalink to &quot;4、函数块&quot;">​</a></h2><p>Surface Shader 统一了渲染流程，同时也暴露了许函数可供用户自定义渲染细节。</p><p>为了方便管理，我们一般至少需要声明两个 CCProgram 代码片段，用于 vs 和 fs。</p><p>以内置的 Surface Shader 为例：</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vertex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p><code>surface-vertex</code> 用于 vs 相关函数的处理，<code>surface-fragment</code> 用于 fs 相关函数的处理。</p><p>在这两个代码片段中，通过宏定义机制，替换内部函数。也可以增加自己的 vs 到 fs 的输入。</p><p>详情请参考 <a href="./function-replace.html">使用宏定义实现函数替换</a>， <a href="./vs-input.html">Vertex Shader 的输入值</a> 和 <a href="./fs-input.html">Fragment Shader 的输入值</a>。</p><h2 id="_5、shader-组装器" tabindex="-1">5、Shader 组装器 <a class="header-anchor" href="#_5、shader-组装器" aria-label="Permalink to &quot;5、Shader 组装器&quot;">​</a></h2><p>Surface Shader 中，最后一个部分，是 Shader 的组装。</p><p>我们以内置的 Surface Shader 为例：</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>值得说明的是，上面三个部分（共享常量声明、宏映射 主体功能函数）的代码片段，可以有零个或者多个。最后根据需求组装出最后的 Shader， 供 Surface Shader 开头部分的 CCEffect 引用。</p><p>详情请参考 <a href="./shader-assembly.html">Surface Shader 组装</a>。</p>`,31),l=[h];function p(t,k,r,d,E,c){return i(),a("div",null,l)}const y=s(e,[["render",p]]);export{o as __pageData,y as default};
