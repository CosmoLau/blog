import{_ as o,c as t,o as e,a5 as s}from"./chunks/framework.CqnjdYks.js";const r="/docs/cocos/assets/right_hand.D6ze-Iei.png",n="/docs/cocos/assets/node-tree.BAKtF6Yx.png",a="/docs/cocos/assets/transform-properties.hc-wm3H9.png",c="/docs/cocos/assets/position-nodeA.BDBSfoFb.png",d="/docs/cocos/assets/position-nodeB.DwFCyxBS.png",i="/docs/cocos/assets/position-nodeB-world.C2VOw1u4.png",p="/docs/cocos/assets/rotation.Bja8yUFE.png",g="/docs/cocos/assets/scale.PxlxAgGz.png",x=JSON.parse('{"title":"坐标系和节点变换属性","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/concepts/scene/coord.md","filePath":"zh/manual/concepts/scene/coord.md"}'),l={name:"zh/manual/concepts/scene/coord.md"},h=s('<h1 id="坐标系和节点变换属性" tabindex="-1">坐标系和节点变换属性 <a class="header-anchor" href="#坐标系和节点变换属性" aria-label="Permalink to &quot;坐标系和节点变换属性&quot;">​</a></h1><p>在文档 <a href="./../../editor/scene/">场景编辑器</a> 和 <a href="./node-component.html">节点和组件</a> 中，我们介绍了可以通过 <strong>变换工具 Gizmo</strong> 和编辑 <strong>属性检查器</strong> 中节点的属性来变更节点的显示行为。这篇文档我们将会深入了解节点所在场景空间的坐标系，以及节点的 <strong>位置（Position）</strong>、<strong>旋转（Rotation）</strong>、<strong>缩放（Scale）</strong> 三大变换属性的工作原理。</p><h2 id="坐标系" tabindex="-1">坐标系 <a class="header-anchor" href="#坐标系" aria-label="Permalink to &quot;坐标系&quot;">​</a></h2><p>我们已经知道可以为节点设置位置属性，那么一个有着特定位置属性的节点在游戏运行时将会呈现在屏幕上的什么位置呢？就好像日常生活的地图上有了经度和纬度才能进行卫星定位，我们也要先了解 Cocos Creator 3.0 的坐标系，才能理解节点位置的意义。</p><h3 id="世界坐标系-world-coordinate" tabindex="-1">世界坐标系（World Coordinate） <a class="header-anchor" href="#世界坐标系-world-coordinate" aria-label="Permalink to &quot;世界坐标系（World Coordinate）&quot;">​</a></h3><p>世界坐标系也叫做绝对坐标系，在 Cocos Creator 3.0 游戏开发中表示场景空间内的统一坐标体系，「世界」用来表示我们的游戏场景。</p><p>Creator 3.0 的世界坐标系采用的是笛卡尔右手坐标系，默认 x 向右，y 向上，z 向外，同时使用 -z 轴为正前方朝向。</p><p><img src="'+r+'" alt="right hand"></p><h3 id="本地坐标系-local-coordinate" tabindex="-1">本地坐标系（Local Coordinate） <a class="header-anchor" href="#本地坐标系-local-coordinate" aria-label="Permalink to &quot;本地坐标系（Local Coordinate）&quot;">​</a></h3><p>本地坐标系也叫相对坐标系，是和节点相关联的坐标系。每个节点都有独立的坐标系，当节点移动或改变方向时，和该节点关联的坐标系将随之移动或改变方向。</p><p>Creator 3.0 的 <strong>节点（Node）</strong> 之间可以有父子关系的层级结构，我们通过修改节点的 <code>Position</code> 属性设定的节点位置是该节点相对于父节点的 <strong>本地坐标系</strong>，而非世界坐标系。</p><p>最后在绘制整个场景时 Creator 会把这些节点的本地坐标映射成世界坐标系坐标。<br> 假设场景中有三个节点：NodeA、NodeB、NodeC，节点的结构如下图所示：</p><p><img src="'+n+'" alt="node tree"></p><p>当场景中包含不同层级的节点时，会按照以下的流程确定每个节点在世界坐标系下的位置：</p><ol><li>从场景根级别开始处理每个节点，上图中 NodeA 就是一个根级别节点。首先根据 NodeA 的 <strong>位置（Position）</strong> 属性，在世界坐标系中确定 NodeA 的本地坐标系原点位置（也就是 <code>Position</code>）。</li><li>接下来处理 NodeA 的所有直接子节点，也就是上图中的 NodeB（以及其他和 NodeB 平级的节点）。根据 NodeB 的 <code>Position</code> 属性，在 NodeA 的本地坐标系中确定 NodeB 在世界坐标系中的位置。</li><li>之后不管有多少级节点，都继续按照层级高低依次处理，每个节点都使用父节点的坐标系和自身位置属性来确定在世界坐标系中的位置。</li></ol><h2 id="变换属性" tabindex="-1">变换属性 <a class="header-anchor" href="#变换属性" aria-label="Permalink to &quot;变换属性&quot;">​</a></h2><p>节点包括了 <strong>位置（Position）</strong>、<strong>旋转（Rotation）</strong> 和 <strong>缩放（Scale）</strong> 三个主要的变换属性，下面我们依次介绍。</p><p><img src="'+a+'" alt="transform properties"></p><h3 id="位置-position" tabindex="-1">位置（Position） <a class="header-anchor" href="#位置-position" aria-label="Permalink to &quot;位置（Position）&quot;">​</a></h3><p><strong>位置（Position）</strong> 由 <code>X</code>、<code>Y</code> 和 <code>Z</code> 属性组成，分别规定了节点在当前坐标系 x 轴、y 轴和 z 轴上的坐标，默认为 <code>(0, 0, 0)</code>。</p><p><img src="'+c+'" alt="position"></p><p><img src="'+d+'" alt="position"></p><p>上图中节点 NodeA 的世界坐标是 <code>(50, 50, 50)</code>，子节点 NodeB 的本地坐标是 <code>(0, 2, 0)</code>，此时若将 NodeB 移动到场景根目录，可以看到 NodeB 的世界坐标变成了 <code>(50, 52, 50)</code>：</p><p><img src="'+i+'" alt="position"></p><p>由此可见，子节点 NodeB 的 <code>Position</code> 是以父节点 NodeA 的 <code>Position</code> 为坐标系原点的。</p><p>如果父节点 NodeA 改变 <code>Position</code>，子节点 NodeB 也会跟着改变位置（世界坐标系），但是子节点 NodeB 的 <code>Position</code> 属性不会发生变化，因为子节点 NodeB 在以父节点 NodeA 的 <code>Position</code> 为原点的本地坐标系中没有发生变化。</p><p>在 <strong>场景编辑器</strong> 中，可以随时使用 <a href="./../../editor/toolbar/#移动变换工具">移动变换工具</a> 来改变节点位置。</p><h3 id="旋转-rotation" tabindex="-1">旋转（Rotation） <a class="header-anchor" href="#旋转-rotation" aria-label="Permalink to &quot;旋转（Rotation）&quot;">​</a></h3><p><strong>旋转（Rotation）</strong> 由 <code>X</code>、<code>Y</code> 和 <code>Z</code> 属性组成，默认为 <code>(0, 0, 0)</code>，是另外一个会对节点本地坐标系产生影响的重要属性。当改变 <code>X</code> 属性时，表示节点会以 x 轴为中心进行逆时针/顺时针旋转，以此类推，改变 <code>Y</code> 或者 <code>Z</code> 属性时也是一样的。</p><ul><li>当属性值为 <strong>正</strong> 时，节点 <strong>逆时针</strong> 旋转。</li><li>当属性值为 <strong>负</strong> 时，节点 <strong>顺时针</strong> 旋转。</li></ul><p><img src="'+p+'" alt="rotation"></p><p>上图所示的节点层级关系和前一张图相同，只是节点 NodeA 在 z 轴上的 <strong>旋转（Rotation）</strong> 属性设为了 <strong>60</strong> 度，可以看到除了 NodeA 本身在以 z 轴为中心 <strong>逆时针</strong> 旋转了 60 度之外，其子节点 NodeB 也以 NodeA 的 z 轴为中心，一起 <strong>逆时针</strong> 旋转了 60 度。这也意味着旋转属性会影响到子节点。</p><blockquote><p><strong>注意</strong>：节点上的四元数 <a href="./__APIDOC__/zh/class/Node.html?id=rotation">rotation</a> 属性，表示的是绕任意轴旋转的角度。而 <strong>属性检查器</strong> 中的 <code>Rotation</code> 所对应的属性是欧拉角属性 <a href="./__APIDOC__/zh/class/Node.html?id=eulerAngles">EulerAngles</a>，在脚本中可通过 <code>Node.eulerAngles</code> 获取 <code>Rotation</code> 的值。这两个属性可以根据需求分别使用，在使用 API 时请一定要注意它们和编辑器面板属性名的对应区别。</p></blockquote><p>在 <strong>场景编辑器</strong> 中，可以随时使用 <a href="./../../editor/toolbar/#旋转变换工具">旋转变换工具</a> 来设置节点的旋转。</p><h3 id="缩放-scale" tabindex="-1">缩放（Scale） <a class="header-anchor" href="#缩放-scale" aria-label="Permalink to &quot;缩放（Scale）&quot;">​</a></h3><p><strong>缩放（Scale）</strong> 属性也是由 <code>X</code>、<code>Y</code> 和 <code>Z</code> 三个属性组成，分别表示节点在 x 轴、y 轴和 z 轴上的缩放倍率，默认为 <code>(1, 1, 1)</code>。</p><p><img src="'+g+'" alt="scale"></p><p>上图所示的节点层级关系和介绍 <code>Position</code> 时的相同。将节点 NodeA 的缩放属性设为 <code>(2, 1, 1)</code>，也就是将 NodeA 在 x 轴方向放大到原来的 <strong>2</strong> 倍，y 轴和 z 轴则保持不变。可以看到子节点 NodeB 也在 x 轴方向放大到了原来的两倍，所以缩放属性会影响所有子节点。</p><p>在子节点上设置的缩放属性会和父节点的缩放叠加作用，子节点的子节点会将每一层级的缩放属性全部 <strong>相乘</strong> 来获得在世界坐标系下显示的缩放倍率。这一点和 <strong>位置</strong>、<strong>旋转</strong> 属性其实是一致的，只不过 <strong>位置</strong> 和 <strong>旋转</strong> 属性是 <strong>相加</strong> 作用，而 <strong>缩放</strong> 属性是 <strong>相乘</strong>，作用表现得更加明显。</p><p><strong>缩放</strong> 属性不会影响当前节点的 <strong>位置</strong> 和 <strong>旋转</strong>，但会影响子节点的 <strong>位置</strong>。</p><p>在 <strong>场景编辑器</strong> 中，可以随时使用 <a href="./../../editor/toolbar/#缩放变换工具">缩放变换工具</a> 来修改节点缩放。</p>',41),_=[h];function m(N,u,P,A,f,b){return e(),t("div",null,_)}const q=o(l,[["render",m]]);export{x as __pageData,q as default};
