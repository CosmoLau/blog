import{_ as e,c as t,o,a4 as i}from"./chunks/framework.uQk9_EO2.js";const r="/docs/cocos/assets/sprite-component.BpeAC3Qc.png",a="/docs/cocos/assets/tiled.DErhRwsB.png",s="/docs/cocos/assets/radial.CvXVUgtI.png",S=JSON.parse('{"title":"Sprite Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/sprite.md","filePath":"en/ui-system/components/editor/sprite.md","lastUpdated":1712305443000}'),n={name:"en/ui-system/components/editor/sprite.md"},l=i('<h1 id="sprite-component-reference" tabindex="-1">Sprite Component Reference <a class="header-anchor" href="#sprite-component-reference" aria-label="Permalink to &quot;Sprite Component Reference&quot;">​</a></h1><p>Using Sprite is the most common way to display images in 2D/3D games. By adding the Sprite component to a Node, you can display <strong>SpriteFrame</strong> assets from project assets.</p><p><img src="'+r+'" alt="add sprite"></p><p>Add a <strong>Sprite</strong> component to the node by clicking the <strong>Add Component</strong> button below the <strong>Inspector</strong> panel and selecting <strong>2D -&gt; Sprite</strong>.</p><p>To use <code>Sprite</code>, please refer to the <a href="./__APIDOC__/en/class/Sprite">Sprite API</a> documentation and the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/01.sprite" target="_blank" rel="noreferrer">Sprite</a> scene of the test-cases-3d project.</p><h2 id="sprite-properties" tabindex="-1">Sprite Properties <a class="header-anchor" href="#sprite-properties" aria-label="Permalink to &quot;Sprite Properties&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Type</strong></td><td style="text-align:left;">Rendering mode, currently includes four rendering modes: <code>SIMPLE</code>, <code>SLICED</code>, <code>TILED</code> and <code>FILLED</code>. Please refer to the <strong>Rendering mode</strong> section below for details.</td></tr><tr><td style="text-align:left;"><strong>CustomMaterial</strong></td><td style="text-align:left;">Custom Material, please refer to <a href="./../engine/ui-material">UI Custom Material</a></td></tr><tr><td style="text-align:left;"><strong>GrayScale</strong></td><td style="text-align:left;">If enabled, Sprite will be rendered in gray scale mode.</td></tr><tr><td style="text-align:left;"><strong>Color</strong></td><td style="text-align:left;">Image color.</td></tr><tr><td style="text-align:left;"><strong>Sprite Atlas</strong></td><td style="text-align:left;">The <a href="./../../../asset/atlas">Atlas</a> to which the Sprite&#39;s image asset belongs.</td></tr><tr><td style="text-align:left;"><strong>Sprite Frame</strong></td><td style="text-align:left;"><a href="./../../../asset/sprite-frame">Sprite Frame Assets</a> which is used to render the Sprite.</td></tr><tr><td style="text-align:left;"><strong>Size Mode</strong></td><td style="text-align:left;">Specify the size of the Sprite.<br><code>TRIMMED</code> automatically fit to the size of the sprite cropped<br><code>RAW</code> automatic fit for sprite original size.<br><code>CUSTOM</code> use the node preset size. When the developer manually modifies <code>Size</code> properties, <code>Size Mode</code> will be automatically set to <code>Custom</code>.</td></tr><tr><td style="text-align:left;"><strong>Trim</strong></td><td style="text-align:left;">Whether the transparent pixel area is included in the node bounding box. Please refer to the <a href="./../engine/trim">Auto Trim for SpriteFrame</a> documentation.</td></tr></tbody></table><p>After adding the Sprite component, drag the SpriteFrame type asset from the <strong>Assets</strong> to the <code>Sprite Frame</code> property reference. Then, the asset image can be displayed through the Sprite component.</p><p>If this SpriteFrame asset is contained within an Atlas asset, then the <code>Atlas</code> property of the Sprite will be set up along with it.</p><blockquote><p><strong>Note</strong>: to dynamically replace SpriteFrame, you need to dynamically load the image asset before you replace it, please refer to the <a href="./../../../asset/dynamic-load-resources">Acquire and load asset: how to dynamically load</a> documentation.</p></blockquote><h2 id="rendering-mode" tabindex="-1">Rendering mode <a class="header-anchor" href="#rendering-mode" aria-label="Permalink to &quot;Rendering mode&quot;">​</a></h2><p>Currently, the Sprite component supports the following rendering modes:</p><ul><li><p><code>Simple mode</code>: rendering the Sprite according to the original image asset. It is normally used along with <code>Use Original Size</code> to guarantee the image shown in the scene is in full accordance with the image designed by the graphic designer.</p></li><li><p><code>Sliced mode</code>: the image is cut up into a 9-slicing and according to certain rules is scaled to fit freely set dimensions (<code>size</code>). It is usually used in UI elements or to make images that can be enlarged infinitely without influencing the image quality. It will cut up the original image into a grid to save game asset space. Please read <a href="./../engine/sliced-sprite">Use a Sliced Sprite to make a UI image</a> for details.</p></li><li><p><code>Tiled mode</code>: The image will be repeated to fit the size of the Sprite. If the SpriteFrame is <a href="./../engine/sliced-sprite">9-sliced</a>, the corners will also remain unscaled while the other areas will be repeated.</p><p><img src="'+a+'" alt="tiled"></p></li><li><p><code>Filled mode</code>: draws a portion of the original image in a certain direction and scale, based on the origin and fill mode settings. Often used for dynamic display of progress bars.</p></li></ul><h3 id="filled-mode" tabindex="-1">Filled mode <a class="header-anchor" href="#filled-mode" aria-label="Permalink to &quot;Filled mode&quot;">​</a></h3><p>When the <code>Type</code> property selects <code>FILLED</code>, a new set of properties appears to be configured. So let&#39;s explain their roles in turn.</p><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Fill Type</strong></td><td style="text-align:left;">Fill type selection, including <code>HORIZONTAL</code>, <code>VERTICAL</code>, and <code>RADIAL</code>.</td></tr><tr><td style="text-align:left;"><strong>Fill Start</strong></td><td style="text-align:left;">Normalized values for filling starting position (from 0 ~ 1, denoting the percentage of total population), when you select a horizontal fill, the <code>Fill Start</code> is set to 0, and it is populated from the leftmost edge of the image.</td></tr><tr><td style="text-align:left;"><strong>Fill Range</strong></td><td style="text-align:left;">Normalized values for padding ranges (same from 0 ~ 1). When set to 1, it fills up the entire range of the original image.</td></tr><tr><td style="text-align:left;"><strong>Fill Center</strong></td><td style="text-align:left;">Fill center point, this property can only be modified if the <code>RADIAL</code> fill type is selected. Determines which point on the Sprite is used as pivot when the FillType is set to RADIAL.</td></tr></tbody></table><p><img src="'+s+'" alt="radial"></p><h4 id="fill-range-supplemental-description" tabindex="-1">Fill Range Supplemental description <a class="header-anchor" href="#fill-range-supplemental-description" aria-label="Permalink to &quot;Fill Range Supplemental description&quot;">​</a></h4><p>Under both the <code>HORIZONTAL</code> and <code>VERTICAL</code> fill types, the values set by <code>Fill Start</code> affect the total number of fills, if <code>Fill Start</code> is set to 0.5, even if <code>Fill Range</code> is set to 1.0, the actual padding is still only half the total size of the Sprite.</p><p>The <code>Fill Start</code> in the <code>RADIAL</code> type only determines the orientation of the starting fill, when <code>Fill Start</code> is set to 0, start filling from the x axis positive direction.</p><p><code>Fill Range</code> determines the total amount of padding, which fills the entire circle when <code>Fill Range</code> is set to 1. A counter anticlockwise fill when <code>Fill Range</code> is positive, and is filled clockwise when negative.</p>',21),d=[l];function c(p,h,g,m,f,u){return o(),t("div",null,d)}const b=e(n,[["render",c]]);export{S as __pageData,b as default};
