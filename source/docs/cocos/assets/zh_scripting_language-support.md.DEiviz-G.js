import{_ as a,c as e,o as s,a4 as i}from"./chunks/framework.uQk9_EO2.js";const y=JSON.parse('{"title":"语言支持","description":"","frontmatter":{},"headers":[],"relativePath":"zh/scripting/language-support.md","filePath":"zh/scripting/language-support.md","lastUpdated":1712305443000}'),t={name:"zh/scripting/language-support.md"},l=i(`<h1 id="语言支持" tabindex="-1">语言支持 <a class="header-anchor" href="#语言支持" aria-label="Permalink to &quot;语言支持&quot;">​</a></h1><p>Cocos Creator 支持 <strong>TypeScript</strong> 和 <strong>JavaScript</strong> 两种编程语言。但需要注意的是，<strong>JavaScript</strong> 只支持以 <a href="./external-scripts">插件脚本</a> 的形式导入使用。</p><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><p>Cocos Creator 支持 TypeScript 4.1.0。在此基础上，做了以下限制：</p><ul><li><p><code>tsconfig.json</code> 不会被读取。每个项目都隐含着如下选项：</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;isolatedModules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;experimentalDecorators&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;moduleResolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Cocos</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Creator</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 特定的模块解析算法</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;forceConsistentCasingInFileNames&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>隐含的 <code>isolatedModules</code> 选项意味着：</p><ul><li><p>不支持 <a href="https://www.typescriptlang.org/docs/handbook/enums.html#const-enums" target="_blank" rel="noreferrer">const enums</a>。</p></li><li><p>重导出 TypeScript 类型和接口时应该使用 <code>export type</code>。例如使用 <code>export type { Foo } from &#39;./foo&#39;;</code> 而不是 <code>export { Foo } from &#39;./foo&#39;;</code>。</p></li></ul></li><li><p>不支持 <code>export =</code> 和 <code>import =</code>。</p></li><li><p>命名空间导出的变量必须声明为 <code>const</code>，而不是 <code>var</code> 或 <code>let</code>。</p></li><li><p>同一命名空间的不同声明不会共享作用域，需要显式使用限定符。</p></li><li><p>编译过程中的类型错误将被忽略。</p></li></ul><p>编译时不会读取 <code>tsconfig.json</code>，意味着 <code>tsconfig.json</code> 的编译选项并不会影响编译。</p><p>开发者仍然可以在项目中使用 <code>tsconfig.json</code> 以配合 IDE 实现类型检查等功能。为了让 IDE 的 TypeScript 检查功能和 Creator 行为兼容，开发者需要额外注意一些事项，详情可参考 <a href="./tsconfig">tsconfig</a>。</p><h3 id="typescript-参考教程" tabindex="-1">TypeScript 参考教程 <a class="header-anchor" href="#typescript-参考教程" aria-label="Permalink to &quot;TypeScript 参考教程&quot;">​</a></h3><ul><li><a href="https://forum.cocos.org/t/topic/106995" target="_blank" rel="noreferrer">Cocos Creator 3.0 TypeScript 问题答疑及经验分享</a></li><li><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript 官方网站</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/classes.html" target="_blank" rel="noreferrer">TypeScript - Classes</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">TypeScript - Decorators</a></li><li><a href="http://definitelytyped.org/" target="_blank" rel="noreferrer">TypeScript - DefinitelyTyped</a></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/typescript-cn/" target="_blank" rel="noreferrer">X 分钟速成 TypeScript</a></li><li><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noreferrer">TypeScript 源码</a></li><li><a href="https://mp.weixin.qq.com/s/7QQJxErt2-e4jLK2_4GUFA" target="_blank" rel="noreferrer">开发者回避使用 TypeScript 的三个借口 — 以及应当使用 TypeScript 的更有说服力的原因</a></li></ul><h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h2><h3 id="语言特性" tabindex="-1">语言特性 <a class="header-anchor" href="#语言特性" aria-label="Permalink to &quot;语言特性&quot;">​</a></h3><p>Creator 支持的 JavaScript 语言规范为 ES6。</p><p>此外，以下几项更新于 ES6 规范的语言特性或提案仍旧在支持之列：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Class_elements" target="_blank" rel="noreferrer">类字段</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise 对象</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noreferrer">可选链操作符 <code>?.</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" target="_blank" rel="noreferrer">空值合并操作符 <code>??</code></a></li><li>逻辑赋值操作符 <ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment" target="_blank" rel="noreferrer">逻辑空赋值操作符 <code>??=</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment" target="_blank" rel="noreferrer">逻辑与赋值操作符 <code>&amp;&amp;=</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment" target="_blank" rel="noreferrer">逻辑或赋值操作符 <code>||=</code></a></li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis" target="_blank" rel="noreferrer">全局对象 <code>globalThis</code></a></li></ul><p>以下语言特性同样支持，但需要开启相关的编译选项：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noreferrer">异步函数</a></li></ul><p>特别地，Creator 目前支持 <strong>Legacy</strong> 装饰器提案，其具体用法和含义请参考 <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators" target="_blank" rel="noreferrer">babel-plugin-proposal-decorators</a>。由于该 <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">提案</a> 仍处于阶段 2，引擎暴露的所有装饰器相关功能接口都在以下划线开头的 <code>_decorator</code> 命名空间下。</p><h3 id="编译选项" tabindex="-1">编译选项 <a class="header-anchor" href="#编译选项" aria-label="Permalink to &quot;编译选项&quot;">​</a></h3><p>Creator 开放了部分编译选项，这些选项将应用到整个项目。</p><table><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">名称</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">useDefineForClassFields</td><td style="text-align:left;">符合规范的类字段</td><td style="text-align:left;">当开启时，将使用 <code>Define</code> 语义实现类字段，否则将使用 <code>Set</code> 语义实现类字段。仅当目标不支持 ES6 类字段时生效。</td></tr><tr><td style="text-align:left;">allowDeclareFields</td><td style="text-align:left;">允许声明类字段</td><td style="text-align:left;">当开启时，在 TypeScript 脚本中将允许使用 <code>declare</code> 关键字来声明类字段，并且，当字段未以 <code>declare</code> 声明且未指定显式的初始化式时，将依照规范初始化为 <code>undefined</code>。</td></tr></tbody></table><h3 id="运行环境" tabindex="-1">运行环境 <a class="header-anchor" href="#运行环境" aria-label="Permalink to &quot;运行环境&quot;">​</a></h3><p>从用户的角度来说，Creator 未绑定任何 JavaScript 实现，因此建议开发者严格依照 JavaScript 规范编写脚本，以获取更好的跨平台支持。</p><p>举例来说，当希望使用 <strong>全局对象</strong> 时，应当使用标准特性 <code>globalThis</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">globalThis.blahBlah </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 任何环境下 globalThis 一定存在</span></span></code></pre></div><p>而非 <code>window</code>、<code>global</code>、<code>self</code> 或 <code>this</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可能是 &#39;undefined&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在浏览器环境下可能是 &#39;undefined&#39;</span></span></code></pre></div><p>再如，Creator 未提供 <strong>CommonJS</strong> 的模块系统，因此以下代码片段会带来问题：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blah</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./blah-blah&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，require 是未定义的</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blah; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误 module 是未定义的</span></span></code></pre></div><p>反之，应使用标准模块语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blah </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./blah-blah&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blah;</span></span></code></pre></div><h3 id="javascript-参考教程" tabindex="-1">JavaScript 参考教程 <a class="header-anchor" href="#javascript-参考教程" aria-label="Permalink to &quot;JavaScript 参考教程&quot;">​</a></h3><ul><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noreferrer">JavaScript 标准参考教程</a></li><li><a href="https://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noreferrer">JavaScript 秘密花园</a></li><li><a href="https://mp.weixin.qq.com/s/EuJzQajlU8rpZprWkXbJVg" target="_blank" rel="noreferrer">JavaScript 内存详解 &amp; 分析指南</a></li></ul>`,32),r=[l];function n(p,o,h,c,d,k){return s(),e("div",null,r)}const E=a(t,[["render",n]]);export{y as __pageData,E as default};
