import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.uQk9_EO2.js";const y=JSON.parse('{"title":"UBO Layout","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/ubo-layout.md","filePath":"en/shader/ubo-layout.md","lastUpdated":1712305443000}'),t={name:"en/shader/ubo-layout.md"},n=e(`<h1 id="ubo-layout" tabindex="-1">UBO Layout <a class="header-anchor" href="#ubo-layout" aria-label="Permalink to &quot;UBO Layout&quot;">​</a></h1><p>Cocos Shader specifies that all non-sampler type uniforms should be declared in the form of UBO (Uniform Buffer Object/Uniform Block).</p><p>Taking the <code>builtin-standard.effect</code> as an example, its uniform block declaration is as follows.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uniform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Constants {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 tilingOffset;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 albedo;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 albedoScaleAndCutoff;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 pbrParams;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 miscParams;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 emissive;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 emissiveScaleParam;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span></code></pre></div><p>And all UBOs should follow to the following rules.</p><ol><li>Should no <code>vec3</code> members</li><li>For array type members, the size of each element should not be smaller than <code>vec4</code></li><li>The declaration oder of members should not produce any padding.</li></ol><p>During compilation, the Cocos Shader compiler checks these rules to provide timely reminders in case of implicit padding errors.</p><p>This may sound overly strict, but there are practical considerations behind it.</p><p>First, UBOs are the only fundamental unit for efficient data reuse within the rendering pipeline, and separate declarations are no longer an good option.</p><p>Second, UBOs in WebGL 2.0 only support the std140 layout, which follows a set of strict padding rules.[^1]</p><ul><li><p>All vec3 members ar padded to <code>vec4</code></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uniform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ControversialType {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec3 v3_1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 0, length 16 [IMPLICIT PADDING!]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // total of 16 bytes</span></span></code></pre></div></li><li><p>Arrays and structures with lengths smaller than <code>vec4</code> are padded to <code>vec4</code>.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uniform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProblematicArrays {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f4_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 0, stride 16, length 64 [IMPLICIT PADDING!]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // total of 64 bytes</span></span></code></pre></div></li><li><p>The actual offsets of all members within the UBO are aligned to the number of bytes they occupy.[^2]</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uniform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IncorrectUBOOrder {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1_1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 0, length 4 (aligned to 4 bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec2 v2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 8, length 8 (aligned to 8 bytes) [IMPLICIT PADDING!]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1_2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 16, length 4 (aligned to 4 bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // total of 32 bytes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uniform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CorrectUBOOrder {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1_1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 0, length 4 (aligned to 4 bytes)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1_2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 4, length 4 (aligned to 4 bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec2 v2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // offset 8, length 8 (aligned to 8 bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // total of 16 bytes</span></span></code></pre></div></li></ul><p>This results in a significant waste of space, and the graphics driver on certain devices may not fully comply with this standard[^3]. Therefore, Cocos Shader currently chooses a set of strict rules to help eliminate some very subtle runtime issues.</p><blockquote><p><strong>Note</strong>: Through the <a href="./pass-parameter-list#Properties">Property Target</a> mechanism, you can independently edit the specific components off any uniform. The types of uniforms do not need to directly correspond to the display in the Inspector panel or the code for assigning runtime parameters.</p></blockquote><p>[^1]: <a href="http://www.opengl.org/registry/doc/glspec45.core.pdf#page=159" target="_blank" rel="noreferrer">OpenGL 4.5, Section 7.6.2.2, page 137</a></p><p>[^2]: Please note that in the example code, the total length of UBO IncorrectUBOOrder is 32 bytes. However, in reality, the actual data is still platform-dependent even today. This discrepancy appears to be due to an oversight in the GLSL standard. For more detailed discussions on this topic, you can refer to <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=988988" target="_blank" rel="noreferrer">this link</a>。</p><p>[^3]: <strong>Interface Block - OpenGL Wiki</strong>：<a href="https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)#Memory_layout" target="_blank" rel="noreferrer">https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)#Memory_layout</a></p>`,16),l=[n];function p(o,h,r,d,c,k){return a(),i("div",null,l)}const E=s(t,[["render",p]]);export{y as __pageData,E as default};
