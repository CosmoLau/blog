import{_ as e,c as s,o as t,a5 as o}from"./chunks/framework.CqnjdYks.js";const a="/docs/cocos/assets/new_scene_1.C1FGNkbr.png",n="/docs/cocos/assets/new_scene_2.Cczom74l.png",r="/docs/cocos/assets/new_scene_3.D_Uz2-Sr.png",c="/docs/cocos/assets/scene_node.Dr8sTyP1.png",l="/docs/cocos/assets/scene_node_set.B8T6jY-U.png",i="/docs/cocos/assets/release-assets.BM7igbYw.png",P=JSON.parse('{"title":"场景资源","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/asset/scene.md","filePath":"zh/manual/asset/scene.md"}'),p={name:"zh/manual/asset/scene.md"},d=o('<h1 id="场景资源" tabindex="-1">场景资源 <a class="header-anchor" href="#场景资源" aria-label="Permalink to &quot;场景资源&quot;">​</a></h1><p>在 Cocos Creator 3.0 中，游戏场景（Scene）是游戏开发时组织游戏内容的中心，也是呈现给玩家所有游戏内容的载体。而场景文件本身也作为游戏资源存在，并保存了游戏的大部分信息，也是创作的基础。</p><blockquote><p><strong>注意</strong>：请尽量避免多人同时修改同一个场景资源，否则可能会导致冲突，且无法通过 <code>git</code> 合并解决冲突。</p></blockquote><h2 id="创建场景" tabindex="-1">创建场景 <a class="header-anchor" href="#创建场景" aria-label="Permalink to &quot;创建场景&quot;">​</a></h2><p>创建场景目前有以下几种方式：</p><ol><li><p>在 <strong>资源管理器</strong> 中右键点击想要放置场景文件的文件夹，然后选择 <strong>创建 -&gt; Scene</strong> 即可。为了使项目具备良好的文件夹目录结构，强烈建议使用该方法创建场景。</p><p><img src="'+a+'" alt="create scene 1"></p></li><li><p>在 <strong>资源管理器</strong> 中点击左上角的 <strong>+</strong> 创建按钮，然后选择 <strong>Scene</strong> 即可。</p><p><img src="'+n+'" alt="create scene 2"></p></li><li><p>在顶部菜单栏中选择 <strong>文件 -&gt; 新建场景</strong>，即可在 <strong>场景编辑器</strong> 中直接创建一个新场景。但 <strong>资源管理器</strong> 中不会出现新场景文件，需要在保存场景时弹出的 <strong>保存场景</strong> 窗口中手动保存场景文件，保存完成后才会在 <strong>资源管理器</strong> 的根目录下出现 <code>scene.scene</code> 场景文件。</p><p><img src="'+r+'" alt="create scene 3"></p></li></ol><h2 id="保存场景" tabindex="-1">保存场景 <a class="header-anchor" href="#保存场景" aria-label="Permalink to &quot;保存场景&quot;">​</a></h2><p>方法一：使用快捷键 <kbd>Ctrl</kbd> + <kbd>S</kbd>（Windows）或 <kbd>Command</kbd> + <kbd>S</kbd>（MacOS）来快速保存场景。</p><p>方法二：在顶部菜单栏中选择 <strong>文件 -&gt; 保存场景</strong>。</p><h2 id="切换场景" tabindex="-1">切换场景 <a class="header-anchor" href="#切换场景" aria-label="Permalink to &quot;切换场景&quot;">​</a></h2><p>在 <strong>资源管理器</strong> 中，通过双击场景文件打开场景。<br> 如果需要在游戏过程中切换场景，可通过 <a href="./__APIDOC__/zh/class/Director.html?id=loadscene">director.loadScene</a> 等 API 来实现游戏中动态场景加载及切换。</p><h2 id="场景属性" tabindex="-1">场景属性 <a class="header-anchor" href="#场景属性" aria-label="Permalink to &quot;场景属性&quot;">​</a></h2><p>双击打开场景文件后，可以看到 <strong>层级管理器</strong> 中的 <code>scene</code> 是场景节点树的根节点。选中 <code>scene</code> 节点，在 <strong>属性检查器</strong> 中可设置场景是否自动释放，以及整个场景相关的属性，包括环境光设置，阴影设置、全局雾和天空盒设置。</p><p><img src="'+c+'" alt="scene node set"></p><p>场景资源的自动释放，详情请参考下文 <strong>场景资源自动释放策略</strong> 部分的内容。</p><p>各类属性的详细说明请参考：</p><ul><li><a href="./../concepts/scene/light/lightType/ambient.html">环境光</a></li><li><a href="./../concepts/scene/light/shadow.html">阴影</a></li><li><a href="./../concepts/scene/fog.html">全局雾</a></li><li><a href="./../concepts/scene/skybox.html">天空盒</a></li><li><a href="./../advanced-topics/native-scene-culling.html">原生场景剔除</a></li></ul><h2 id="场景资源自动释放策略" tabindex="-1">场景资源自动释放策略 <a class="header-anchor" href="#场景资源自动释放策略" aria-label="Permalink to &quot;场景资源自动释放策略&quot;">​</a></h2><p>如果项目中的场景很多，随着新场景的切换，内存占用就会不断上升。除了使用 <code>assetManager.releaseAsset</code> 等 API 来精确释放不使用的资源，我们还可以使用场景的自动释放功能。</p><p>双击打开场景文件后，在 <strong>层级管理器</strong> 选中 <code>scene</code> 节点，即可在 <strong>属性检查器</strong> 中设置场景是否自动释放：</p><p><img src="'+l+'" alt="scene node set"></p><p>从当前场景切换到下一个场景时，如果当前场景不自动释放资源，则该场景中直接或间接引用到的所有资源（脚本动态加载的不算），<strong>默认</strong> 都不主动释放。反之如果启用了自动释放，则这些引用到的资源 <strong>默认</strong> 都会自动释放。</p><h3 id="防止特定资源被自动释放" tabindex="-1">防止特定资源被自动释放 <a class="header-anchor" href="#防止特定资源被自动释放" aria-label="Permalink to &quot;防止特定资源被自动释放&quot;">​</a></h3><p>启用了某个场景的资源自动释放后，如果在脚本中保存了对该场景的资源的“特殊引用”，则当场景切换后，由于资源已经被释放，这些引用可能会变成非法的，有可能引起渲染异常等问题。为了让这部分资源在场景切换时不被释放，我们可以使用 <a href="./__APIDOC__/zh/class/Asset.html?id=addRef">Asset.addRef</a> 增加引用计数来锁住这些资源。</p><blockquote><p>“特殊引用”：以全局变量、单例、闭包、“动态资源”等形式进行的引用。<br> “动态资源”：在脚本中动态创建或动态修改的资源。</p></blockquote><p>以上关于场景资源自动释放部分的内容可以归纳为下图中的几种情况：</p><p><img src="'+i+'" alt="release assets"></p><p>关于资源释放，详细请查看 <a href="./release-manager.html#auto-release">资源释放</a>。</p>',28),h=[d];function g(_,m,b,u,f,k){return t(),s("div",null,h)}const S=e(p,[["render",g]]);export{P as __pageData,S as default};
