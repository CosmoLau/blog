import{_ as s,v as n,b as l,R as a}from"./chunks/framework.5ffcbaff.js";const e="/docs/cocos/assets/builtin-bundles.6fd624c4.png",o="/docs/cocos/assets/inspector.aa90a296.png",t="/docs/cocos/assets/shared.d0cc7f8d.png",p="/docs/cocos/assets/shared2.26b98cdd.png",r="/docs/cocos/assets/bundle.821fb384.png",c="/docs/cocos/assets/asset-bundle.dcac8c0d.png",y="/docs/cocos/assets/bundle_md5.19e939c1.png",f=JSON.parse('{"title":"Asset Bundle 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/asset/bundle.md","filePath":"zh/manual/asset/bundle.md"}'),D={name:"zh/manual/asset/bundle.md"},F=a('<h1 id="asset-bundle-介绍" tabindex="-1">Asset Bundle 介绍 <a class="header-anchor" href="#asset-bundle-介绍" aria-label="Permalink to &quot;Asset Bundle 介绍&quot;">​</a></h1><blockquote><p>文：Santy-Wang、Xunyi</p></blockquote><p>从 v2.4 开始，Creator 正式支持 Asset Bundle 功能。Asset Bundle 作为资源模块化工具，允许开发者按照项目需求将贴图、脚本、场景等资源划分在多个 Asset Bundle 中，然后在游戏运行过程中，按照需求去加载不同的 Asset Bundle，以减少启动时需要加载的资源数量，从而减少首次下载和加载游戏时所需的时间。</p><p>Asset Bundle 可以按需求放置在不同地方，比如可以放在远程服务器、本地、或者小游戏平台的分包中。</p><h2 id="内置-asset-bundle" tabindex="-1">内置 Asset Bundle <a class="header-anchor" href="#内置-asset-bundle" aria-label="Permalink to &quot;内置 Asset Bundle&quot;">​</a></h2><p>项目中除了自定义的 Asset Bundle 外，Creator 还有内置的 3 个 Asset Bundle。与其他自定义 Asset Bundle 一样，内置 Asset Bundle 也可以根据不同平台进行配置。</p><p><img src="'+e+`" alt="builtinBundles"></p><table><thead><tr><th style="text-align:left;">内置 Asset Bundle</th><th style="text-align:left;">功能说明</th><th style="text-align:left;">配置</th></tr></thead><tbody><tr><td style="text-align:left;"><code>main</code></td><td style="text-align:left;">存放所有在 <strong>构建发布</strong> 面板的 <strong>参与构建场景</strong> 中勾选的场景以及其依赖资源</td><td style="text-align:left;">通过配置 <strong>构建发布</strong> 面板的 <strong>主包压缩类型</strong> 和 <strong>配置主包为远程包</strong> 两项</td></tr><tr><td style="text-align:left;"><code>resources</code></td><td style="text-align:left;">存放 <code>resources</code> 目录下的所有资源以及其依赖资源</td><td style="text-align:left;">通过配置 <strong>资源管理器</strong> 中的 <code>assets -&gt; resources</code> 文件夹</td></tr><tr><td style="text-align:left;"><code>start-scene</code></td><td style="text-align:left;">如果在 <strong>构建发布</strong> 面板中勾选了 <strong>初始场景分包</strong>，则首场景将会被构建到 <code>start-scene</code> 中。</td><td style="text-align:left;">无法进行配置</td></tr><tr><td style="text-align:left;"><code>internal</code></td><td style="text-align:left;">引擎模块内置的一些默认资源</td><td style="text-align:left;">无法进行配置</td></tr></tbody></table><p>在构建完成后，内置 Asset Bundle 会根据配置决定它所生成的位置，具体的配置方法以及生成规则请参考 <a href="./bundle.html#配置方法">配置 Asset Bundle</a>。</p><p>内置 Asset Bundle 是在 <code>application.js</code> 中进行加载的，你可以通过自定义构建模板功能修改 <code>application.js</code> 中的加载代码，如下所示：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadAssetBundle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">hasResourcesBundle</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hasStartSceneBundle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mainBundleRoot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://myserver.com/assets/main</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resourcesBundleRoot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://myserver.com/assets/resources</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bundleRoot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hasResourcesBundle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">resourcesBundleRoot</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mainBundleRoot</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">mainBundleRoot</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bundleRoot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pre</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">loadBundle</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadBundle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBundle</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bundle</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="配置方法" tabindex="-1">配置方法 <a class="header-anchor" href="#配置方法" aria-label="Permalink to &quot;配置方法&quot;">​</a></h2><p>自定义 Asset Bundle 是以 <strong>文件夹</strong> 为单位进行配置的。当我们在 <strong>资源管理器</strong> 中选中一个文件夹时，<strong>属性检查器</strong> 中就会出现一个 <strong>配置为 Bundle</strong> 的选项，勾选后会出现如下图的配置项：</p><p><img src="`+o+'" alt="bundle"></p><table><thead><tr><th style="text-align:left;">配置项</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">Bundle 名称</td><td style="text-align:left;">Asset Bundle 构建后的名称，默认会使用这个文件夹的名字，可根据需要修改。</td></tr><tr><td style="text-align:left;">Bundle 优先级</td><td style="text-align:left;">Creator 开放了 20 个可供配置的优先级，构建时将会按照优先级 <strong>从大到小</strong> 的顺序对 Asset Bundle 依次进行构建。具体内容请参考 <a href="./bundle.html#优先级">Asset Bundle - 优先级</a>。</td></tr><tr><td style="text-align:left;">目标平台</td><td style="text-align:left;">不同平台可使用不同的配置，构建时将根据对应平台的设置来构建 Asset Bundle。</td></tr><tr><td style="text-align:left;">压缩类型</td><td style="text-align:left;">决定 Asset Bundle 最后的输出形式，包括 <strong>合并依赖</strong>、<strong>无压缩</strong>、<strong>合并所有 JSON</strong>、<strong>小游戏分包</strong>、<strong>Zip</strong> 5 种压缩类型。具体内容请参考 <a href="./bundle.html#压缩类型">Asset Bundle - 压缩类型</a></td></tr><tr><td style="text-align:left;">配置为远程包</td><td style="text-align:left;">是否将 Asset Bundle 配置为远程包，不支持 Web 平台。<br>若勾选了该项，则 Asset Bundle 在构建后会被放到 <strong>remote</strong> 文件夹，你需要将整个 <strong>remote</strong> 文件夹放到远程服务器上。<br>构建 OPPO、vivo、华为等小游戏平台时，若勾选了该项，则不会将 Asset Bundle 打包到 rpk 中。</td></tr></tbody></table><p>配置完成后点击面板右上方的 <strong>绿色打钩按钮</strong>，这个文件夹就被配置为 Asset Bundle 的打包预设集合了，在放置需要的资源后，然后在 <strong>构建发布</strong> 面板选择对应的平台进行构建即可得到对应的 Asset Bundle。</p><p><strong>注意</strong>：</p><ol><li>Creator 有 4 个 <a href="./bundle.html#内置-asset-bundle">内置 Asset Bundle</a>，包括 <strong>internal</strong>、<strong>resources</strong>、<strong>main</strong>、<strong>start-scene</strong>，在设置 <strong>Bundle 名称</strong> 时请不要使用这三个名称。</li><li><a href="./../editor/publish/subpackage.html">小游戏分包</a> 只能放在本地，不能配置为远程包。所以当 <strong>压缩类型</strong> 设置为 <strong>小游戏分包</strong> 时，<strong>配置为远程包</strong> 项不可勾选。</li><li>Zip 压缩类型主要是为了降低网络请求数量，如果放在本地，不用网络请求，则没什么必要。所以要求与 <strong>配置为远程包</strong> 搭配使用。</li><li>设置为 Bundle 的文件夹配置是作为 Asset Bundle 的选项配置集合，我们不建议您非常直接地将资源都放置在其中。和之前版本的 resources 类似，Bundle 配置文件夹最好是放置 Scene、Prefab 等入口资源或者需要在脚本内动态加载的资源，最后在构建阶段将会根据依赖关系导出所有引用的资源文件最终填充整个 Asset Bundle。通过这样的方式，可以最大限度的较少不必要的资源导出。</li></ol><h2 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h2><p>当文件夹设置为 Asset Bundle 之后，会将文件夹中的资源以及文件夹外的相关依赖资源都合并到同一个 Asset Bundle 中。这样就有可能出现某个资源虽然不在 Asset Bundle 文件夹中，但因为同时被两个 Asset Bundle 所依赖，所以属于两个 Asset Bundle 的情况，如图所示：</p><p><img src="'+t+'" alt="shared"></p><p>另一种情况是某个资源在一个 Asset Bundle 文件夹中，但同时又被其他 Asset Bundle 所依赖，如图所示：</p><p><img src="'+p+'" alt="shared2"></p><p>在这两种情况下，资源 c 既属于 Asset Bundle A，也属于 Asset Bundle B。那资源 c 究竟存在于哪一个 Asset Bundle 中呢？此时就需要通过调整 Asset Bundle 的优先级来指定了。<br> Creator 开放了 20 个可供配置的优先级，编辑器在构建时将会按照优先级 <strong>从大到小</strong> 的顺序对 Asset Bundle 依次进行构建。</p><ul><li>当同个资源被 <strong>不同优先级</strong> 的多个 Asset Bundle 引用时，资源会优先放在优先级高的 Asset Bundle 中，低优先级的 Asset Bundle 只会存储一条记录信息。此时低优先级的 Asset Bundle 会依赖高优先级的 Asset Bundle。<br> 如果你想在低优先级的 Asset Bundle 中加载此共享资源，必须在加载低优先级的 Asset Bundle <strong>之前</strong> 先加载高优先级的 Asset Bundle。</li><li>当同个资源被 <strong>相同优先级</strong> 的多个 Asset Bundle 引用时，资源会在每个 Asset Bundle 中都复制一份。此时不同的 Asset Bundle 之间没有依赖关系，可按任意顺序加载。所以请尽量确保共享的资源（例如 <code>Texture</code>、<code>SpriteFrame</code>、<code>Audio</code> 等）所在的 Asset Bundle 优先级更高，以便让更多低优先级的 Asset Bundle 共享资源，从而最小化包体。</li></ul><p>四个内置 Asset Bundle 文件夹的优先级分别为：</p><table><thead><tr><th style="text-align:left;">Asset Bundle</th><th style="text-align:left;">优先级</th></tr></thead><tbody><tr><td style="text-align:left;"><code>main</code></td><td style="text-align:left;">7</td></tr><tr><td style="text-align:left;"><code>resources</code></td><td style="text-align:left;">8</td></tr><tr><td style="text-align:left;"><code>start-scene</code></td><td style="text-align:left;">20</td></tr><tr><td style="text-align:left;"><code>internal</code></td><td style="text-align:left;">21</td></tr></tbody></table><p>当四个内置 Asset Bundle 中有相同资源时，资源会优先存储在优先级高的 Asset Bundle 中。建议其他自定义的 Asset Bundle 优先级 <strong>不要高于</strong> 内置的 Asset Bundle，以便尽可能共享内置 Asset Bundle 中的资源。</p><h2 id="压缩类型" tabindex="-1">压缩类型 <a class="header-anchor" href="#压缩类型" aria-label="Permalink to &quot;压缩类型&quot;">​</a></h2><p>Creator 目前提供了 <strong>合并依赖</strong>、<strong>无压缩</strong>、<strong>合并所有 JSON</strong>、<strong>小游戏分包</strong>、<strong>Zip</strong> 这几种压缩类型用于优化 Asset Bundle。所有 Asset Bundle 默认使用 <strong>合并依赖</strong> 压缩类型，开发者可重新设置包括内置 Asset Bundle 在内的所有 Asset Bundle 的压缩类型。</p><table><thead><tr><th style="text-align:left;">压缩类型</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>合并依赖</strong></td><td style="text-align:left;">构建 Asset Bundle 时会将相互依赖的资源的 JSON 文件合并在一起，从而减少运行时的加载请求次数</td></tr><tr><td style="text-align:left;"><strong>无压缩</strong></td><td style="text-align:left;">构建 Asset Bundle 时没有任何压缩操作</td></tr><tr><td style="text-align:left;"><strong>合并所有 JSON</strong></td><td style="text-align:left;">构建 Asset Bundle 时会将所有资源的 JSON 文件合并为一个，从而最大化减少请求数量，但可能会增加单个资源的加载时间</td></tr><tr><td style="text-align:left;"><strong>小游戏分包</strong></td><td style="text-align:left;">在提供了分包功能的小游戏平台，会将 Asset Bundle 设置为对应平台上的分包。</td></tr><tr><td style="text-align:left;"><strong>Zip</strong></td><td style="text-align:left;">在部分小游戏平台，构建 Asset Bundle 时会将资源文件压缩成一个 Zip 文件，从而减少运行时的加载请求数量</td></tr></tbody></table><p>如果开发者在不同平台对 Asset Bundle 设置了不同的压缩类型，那么在构建时将根据对应平台的设置来构建 Asset Bundle。</p><h2 id="asset-bundle-的构建" tabindex="-1">Asset Bundle 的构建 <a class="header-anchor" href="#asset-bundle-的构建" aria-label="Permalink to &quot;Asset Bundle 的构建&quot;">​</a></h2><p>在构建时，配置为 Asset Bundle 的文件夹中的资源（包含场景、代码和其他资源）以及文件夹外的相关依赖资源都会被合并到同一个 Asset Bundle 文件夹中。比如场景 A 放在 a 文件夹中，当 a 文件夹配置为 Asset Bundle 后，场景 A 以及它所依赖的资源都会被合并到 Asset Bundle a 文件夹中。</p><p>配置为 Asset Bundle 的文件夹中的所有 <strong>代码</strong> 和 <strong>资源</strong>，会进行以下处理：</p><ul><li><strong>代码</strong>：文件夹中的所有代码会根据发布平台合并成一个 <code>index.js</code> 或 <code>game.js</code> 的入口脚本文件。</li><li><strong>资源</strong>：文件夹中的所有资源以及文件夹外的相关依赖资源都会放到 <code>import</code> 或 <code>native</code> 目录下。</li><li><strong>资源配置</strong>：所有资源的配置信息包括路径、类型、版本信息都会被合并成一个 <code>config.json</code> 文件。</li></ul><p>构建后生成的 Asset Bundle 目录结构如下图所示：</p><p><img src="'+r+'" alt="export"></p><p>构建完成后，这个 Asset Bundle 文件夹会被打包到对应平台发布包目录下的 <strong>assets</strong> 文件夹中。但有以下两种特殊情况：</p><ul><li>配置 Asset Bundle 时，若勾选了 <strong>配置为远程包</strong>，则这个 Asset Bundle 文件夹会被打包到对应平台发布包目录下的 <strong>remote</strong> 文件夹中。</li><li>配置 Asset Bundle 时，若设置了 <strong>压缩类型</strong> 为 <strong>小游戏分包</strong>，则这个 Asset Bundle 文件夹会被打包到对应平台发布包目录下的 <strong>subpackages</strong> 文件夹中。</li></ul><p><strong>assets</strong>、<strong>remote</strong>、<strong>subpackages</strong> 这三个文件夹中包含的每个文件夹都是一个 Asset Bundle。</p><p>例如：将 example 工程中的 <strong>cases/01_graphics</strong> 文件夹在 Web Mobile 平台配置为 Asset Bundle，那么项目构建后将会在发布包目录下的 <strong>assets</strong> 中生成 <strong>01_graphics</strong> 文件夹，<strong>01_graphics</strong> 文件夹就是一个 Asset Bundle。</p><p><img src="'+c+`" alt="asset-bundle"></p><h3 id="asset-bundle-中的脚本" tabindex="-1">Asset Bundle 中的脚本 <a class="header-anchor" href="#asset-bundle-中的脚本" aria-label="Permalink to &quot;Asset Bundle 中的脚本&quot;">​</a></h3><p>Asset Bundle 支持脚本分包。如果开发者的 Asset Bundle 中包含脚本文件，则所有脚本会被合并为一个 js 文件。在加载 Asset Bundle 时，就会去加载这个 js 文件。</p><p><strong>注意</strong>：</p><ol><li>有些平台不允许加载远程的脚本文件，例如微信小游戏，在这些平台上，Creator 会将 Asset Bundle 的代码拷贝到 <code>src/bundle-scripts</code> 目录下，从而保证正常加载。</li><li>不同 Asset Bundle 中的脚本建议最好不要互相引用，否则可能会导致在运行时找不到对应脚本。如果需要引用某些类或变量，可以将该类和变量暴露在一个你自己的全局命名空间中，从而实现共享。</li></ol><h2 id="加载-asset-bundle" tabindex="-1">加载 Asset Bundle <a class="header-anchor" href="#加载-asset-bundle" aria-label="Permalink to &quot;加载 Asset Bundle&quot;">​</a></h2><p>引擎提供了一个统一的 API <code>assetManager.loadBundle</code> 来加载 Asset Bundle，加载时需要传入 Asset Bundle 配置面板中的 <strong>Bundle 名称</strong> 或者 Asset Bundle 的 <strong>url</strong>。但当你复用其他项目的 Asset Bundle 时，则只能通过 <strong>url</strong> 进行加载。使用方法如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">01_graphics</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当复用其他项目的 Asset Bundle 时</span></span>
<span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://othergame.com/remote/01_graphics</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>assetManager.loadBundle</code> 还支持传入用户空间中的路径来加载用户空间中的 Asset Bundle。通过对应平台提供的下载接口将 Asset Bundle 提前下载到用户空间中，然后再使用 <code>loadBundle</code> 进行加载，开发者就可以完全自己管理 Asset Bundle 的下载与缓存过程，更加灵活。例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 提前下载某个 Asset Bundle 到用户空间 pathToBundle 目录下。需要保证用户空间下的 Asset Bundle 和对应原始 Asset Bundle 的结构和内容完全一样</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 通过 Asset Bundle 在用户空间中的路径进行加载</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原生平台</span></span>
<span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBundle</span><span style="color:#A6ACCD;">(jsb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileUtils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWritablePath</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/pathToBundle/bundleName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 微信小游戏平台</span></span>
<span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBundle</span><span style="color:#A6ACCD;">(wx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">USER_DATA_PATH </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/pathToBundle/bundleName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>注意</strong>：在配置 Asset Bundle 时，若勾选了 <strong>配置为远程包</strong>，那么构建时请在 <strong>构建发布</strong> 面板中填写 <strong>资源服务器地址</strong>。</p><p>在通过 API 加载 Asset Bundle 时，引擎并没有加载 Asset Bundle 中的所有资源，而是加载 Asset Bundle 的 <strong>资源清单</strong>，以及包含的 <strong>所有脚本</strong>。<br> 当 Asset Bundle 加载完成后，会触发回调并返回错误信息和 <code>AssetManager.Bundle</code> 类的实例，这个实例就是 Asset Bundle API 的主要入口，开发者可以使用它去加载 Asset Bundle 中的各类资源。</p><h3 id="asset-bundle-的版本" tabindex="-1">Asset Bundle 的版本 <a class="header-anchor" href="#asset-bundle-的版本" aria-label="Permalink to &quot;Asset Bundle 的版本&quot;">​</a></h3><p>Asset Bundle 在更新上延续了 Creator 的 MD5 方案。当你需要更新远程服务器上的 Asset Bundle 时，请在 <strong>构建发布</strong> 面板中勾选 <strong>MD5 Cache</strong> 选项，此时构建出来的 Asset Bundle 中的 <code>config.json</code> 文件名会附带 Hash 值。如图所示：</p><p><img src="`+y+`" alt="md5 cache"></p><p>在加载 Asset Bundle 时 <strong>不需要</strong> 额外提供对应的 Hash 值，Creator 会在 <code>settings.json</code> 中查询对应的 Hash 值，并自动做出调整。<br> 但如果你想要将相关版本配置信息存储在服务器上，启动时动态获取版本信息以实现热更新，你也可以手动指定一个版本 Hash 值并传入 <code>loadBundle</code> 中，此时将会以传入的 Hash 值为准：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">01_graphics</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fbc07</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">load bundle successfully.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这样就能绕过缓存中的老版本文件，重新下载最新版本的 Asset Bundle。</p><h2 id="加载-asset-bundle-中的资源" tabindex="-1">加载 Asset Bundle 中的资源 <a class="header-anchor" href="#加载-asset-bundle-中的资源" aria-label="Permalink to &quot;加载 Asset Bundle 中的资源&quot;">​</a></h2><p>在 Asset Bundle 加载完成后，返回了一个 <code>AssetManager.Bundle</code> 类的实例。我们可以通过实例上的 <code>load</code> 方法来加载 Asset Bundle 中的资源，此方法的参数与 <code>resources.load</code> 相同，只需要传入资源相对 Asset Bundle 的路径即可。但需要注意的是，路径的结尾处 <strong>不能</strong> 包含文件扩展名。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加载 Prefab</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">prefab</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Prefab</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prefab</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">instantiate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">prefab</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">director</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getScene</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 加载 Texture</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image/texture</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Texture2D</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">texture</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">texture</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>与 <code>resources.load</code> 相同，<code>load</code> 方法也提供了一个类型参数，这在加载同名资源或者加载 SpriteFrame 时十分有效。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加载 SpriteFrame</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image/spriteFrame</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SpriteFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">spriteFrame</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">spriteFrame</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="批量加载资源" tabindex="-1">批量加载资源 <a class="header-anchor" href="#批量加载资源" aria-label="Permalink to &quot;批量加载资源&quot;">​</a></h3><p>Asset Bundle 提供了 <code>loadDir</code> 方法来批量加载相同目录下的多个资源。此方法的参数与 <code>resources.loadDir</code> 相似，只需要传入该目录相对 Asset Bundle 的路径即可。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加载 textures 目录下的所有资源</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadDir</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">textures</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">assets</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 加载 textures 目录下的所有 Texture 资源</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadDir</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">textures</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Texture2D</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">assets</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="加载场景" tabindex="-1">加载场景 <a class="header-anchor" href="#加载场景" aria-label="Permalink to &quot;加载场景&quot;">​</a></h3><p>Asset Bundle 提供了 <code>loadScene</code> 方法用于加载指定 bundle 中的场景，你只需要传入 <strong>场景名</strong> 即可。<br><code>loadScene</code> 与 <code>director.loadScene</code> 不同的地方在于 <code>loadScene</code> 只会加载指定 bundle 中的场景，而不会运行场景，你还需要使用 <code>director.runScene</code> 来运行场景。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadScene</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">scene</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">director</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runScene</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">scene</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="获取-asset-bundle" tabindex="-1">获取 Asset Bundle <a class="header-anchor" href="#获取-asset-bundle" aria-label="Permalink to &quot;获取 Asset Bundle&quot;">​</a></h2><p>当 Asset Bundle 被加载过之后，会被缓存下来，此时开发者可以使用 Asset Bundle 名称来获取该 bundle。例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bundle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">01_graphics</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="预加载资源" tabindex="-1">预加载资源 <a class="header-anchor" href="#预加载资源" aria-label="Permalink to &quot;预加载资源&quot;">​</a></h2><p>除了场景，其他资源也可以进行预加载。预加载的加载参数和正常加载时一样，不过因为预加载只会去下载必要的资源，并不会进行资源的反序列化和初始化工作，所以性能消耗更小，更适合在游戏过程中使用。</p><p>Asset Bundle 中提供了 <code>preload</code> 和 <code>preloadDir</code> 接口用于预加载 Asset Bundle 中的资源。具体的使用方式和 <code>assetManager</code> 一致，详情可参考文档 <a href="./preload-load.html">预加载与加载</a>。</p><h2 id="释放-asset-bundle-中的资源" tabindex="-1">释放 Asset Bundle 中的资源 <a class="header-anchor" href="#释放-asset-bundle-中的资源" aria-label="Permalink to &quot;释放 Asset Bundle 中的资源&quot;">​</a></h2><p>在资源加载完成后，所有的资源都会被临时缓存到 <code>assetManager</code> 中，以避免重复加载。当然，缓存中的资源也会占用内存，有些资源如果不再需要用到，可以通过以下三种方式进行释放：</p><ol><li><p>使用常规的 <code>assetManager.releaseAsset</code> 方法进行释放。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image/spriteFrame</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SpriteFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">spriteFrame</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">releaseAsset</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">spriteFrame</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p>使用 Asset Bundle 提供的 <code>release</code> 方法，通过传入路径和类型进行释放，只能释放在 Asset Bundle 中的单个资源。参数可以与 Asset Bundle 的 <code>load</code> 方法中使用的参数一致。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image/spriteFrame</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SpriteFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">spriteFrame</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">release</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SpriteFrame</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p>使用 Asset Bundle 提供的 <code>releaseAll</code> 方法，此方法与 <code>assetManager.releaseAll</code> 相似，<code>releaseAll</code> 方法会释放所有属于该 bundle 的资源（包括在 Asset Bundle 中的资源以及其外部的相关依赖资源），请慎重使用。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image/spriteFrame</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SpriteFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">spriteFrame</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">releaseAll</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ol><p><strong>注意</strong>：在释放资源时，Creator 会自动处理该资源的依赖资源，开发者不需要对其依赖资源进行管理。</p><p>更多资源释放相关的内容，可参考文档 <a href="./release-manager.html">资源释放</a>。</p><h2 id="移除-asset-bundle" tabindex="-1">移除 Asset Bundle <a class="header-anchor" href="#移除-asset-bundle" aria-label="Permalink to &quot;移除 Asset Bundle&quot;">​</a></h2><p>在加载了 Asset Bundle 之后，此 bundle 会一直存在整个游戏过程中，除非开发者手动移除。当手动移除了某个不需要的 bundle，那么此 bundle 的缓存也会被移除，如果需要再次使用，则必须再重新加载一次。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bundle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeBundle</span><span style="color:#A6ACCD;">(bundle)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>注意</strong>：在移除 Asset Bundle 时，并不会释放该 bundle 中被加载过的资源。如果需要释放，请先使用 Asset Bundle 的 <code>release</code> / <code>releaseAll</code> 方法：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bundle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 释放在 Asset Bundle 中的单个资源</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">release</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SpriteFrame)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeBundle</span><span style="color:#A6ACCD;">(bundle)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bundle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 释放所有属于 Asset Bundle 的资源</span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">releaseAll</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">assetManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeBundle</span><span style="color:#A6ACCD;">(bundle)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><ul><li><p><strong>Q</strong>：Asset Bundle 与 v2.4 之前的资源分包有什么区别？ <strong>A</strong>：</p><ol><li><p>资源分包实际上是将一些图片和网格拆分出去单独放在一个包内，但这个包是不完整的、无逻辑的，无法复用。<br> Asset Bundle 是通过逻辑划分对资源进行模块化。Asset Bundle 中包含资源、脚本、元数据和资源清单，所以 Asset Bundle 是完整的、有逻辑的、可复用的，我们可以从 Asset Bundle 中加载出整个场景或其他任何资源。Asset Bundle 通过拆分，可以极大减少首包中的 json 数量以及 <code>settings.json</code> 的大小。<br><br></p></li><li><p>资源分包本质上是由小游戏平台控制的一项基础功能。例如微信小游戏支持分包功能，Creator 就在此基础上做了一层封装，帮助开发者设置资源分包，如果微信小游戏不支持分包功能了，则 Creator 也不支持。<br> Asset Bundle 则完全由 Creator 设计实现，是一个帮助开发者对资源进行划分的模块化工具，与游戏平台无关，理论上可支持所有平台。<br><br></p></li><li><p>资源分包与平台相关，意味着需要按照平台要求的方式设置，比如微信小游戏的分包无法放在远程服务器上，只能放在腾讯的服务器上。<br> 而 Asset Bundle 不受这些限制，Asset Bundle 可以放在本地、远程服务器，甚至就放在微信小游戏的分包中。<br><br></p></li></ol></li><li><p><strong>Q</strong>：Asset Bundle 是否支持大厅加子游戏的模式？ <strong>A</strong>：支持，子游戏的场景可以放在 Asset Bundle 中，在需要时加载。<br><br></p></li><li><p><strong>Q</strong>：Asset Bundle 可以减少 <code>settings.json</code> 的大小吗？ <strong>A</strong>：当然可以。实际上从 v2.4 开始，打包后的项目完全是基于 Asset Bundle 的，<code>settings.json</code> 不再存储跟资源相关的任何配置信息，所有的配置信息都会存储在每个 Asset Bundle 的 <code>config.json</code> 中。每一个 <code>config.json</code> 只存储各自 Asset Bundle 中的资源信息，也就减小了首包的包体。可以简单地理解为所有的 <code>config.json</code> 加起来等于之前的 <code>settings.json</code>。<br><br></p></li><li><p><strong>Q</strong>：Asset Bundle 支持跨项目复用吗 <strong>A</strong>：目前版本支持，但我们<strong>不建议跨项目复用</strong>，随着引擎的更新迭代，这可能会产生各类兼容性问题。在目前跨项目复用需要满足以下条件：</p><ol><li>引擎版本相同。</li><li>Asset Bundle 中引用到的所有脚本都要放在 Asset bundle 下。</li><li>Asset Bundle 没有其他外部依赖 bundle，如果有的话，必须加载。</li><li>Asset Bundle 之间尽可能不复用脚本<br><br></li></ol></li><li><p><strong>Q</strong>：Asset Bundle 支持分离首场景吗 <strong>A</strong>：目前仅在部分平台支持。你可以在 <strong>构建发布</strong> 面板中勾选 <strong>初始场景分包</strong>，则首场景会被放到内置 Asset Bundle 的 <code>start-scene</code> 中，从而实现分离首场景。<br><br></p></li><li><p><strong>Q</strong>：Asset Bundle 支持嵌套设置吗？比如 A 文件夹中有 B 文件夹，A 和 B 都可以设置为 Asset Bundle？ <strong>A</strong>：Asset Bundle 不支持嵌套。<br><br></p></li><li><p><strong>Q</strong>: 为什么在 Asset Bundle 内放置图集可能会引起包体变大？ <strong>A</strong>：Asset Bundle 和最早之前的 resources 文件的放置规则是类似的，<strong>当图集放置在其中时，则默认图集本身代表的资源 SpriteAtlas、图集大图 Image、图集文件夹内的小图 Image 资源等等都可能被脚本加载，按照既定规则会将 Bundle 内包含的所有资源都打包出来</strong>。因而不建议直接将图集放在 Bundle 内，而是通过 Bundle 内资源对其的引用来自然的打包到最终的 Asset Bundle 内。目前在图集资源上有开放了一些剔除的配置，实在需要放置在 Bundle 文件夹内的，可以根据需要进行配置。</p></li></ul>`,89),A=[F];function d(i,C,u,g,B,b){return n(),l("div",null,A)}const m=s(D,[["render",d]]);export{f as __pageData,m as default};
