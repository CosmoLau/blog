import{_ as t,c as e,o as r,a5 as o}from"./chunks/framework.CqnjdYks.js";const n="/docs/cocos/assets/renderer.p3HKHq70.png",b=JSON.parse('{"title":"渲染模块（Renderer）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/particle-system/renderer.md","filePath":"zh/manual/particle-system/renderer.md"}'),s={name:"zh/manual/particle-system/renderer.md"},l=o('<h1 id="渲染模块-renderer" tabindex="-1">渲染模块（Renderer） <a class="header-anchor" href="#渲染模块-renderer" aria-label="Permalink to &quot;渲染模块（Renderer）&quot;">​</a></h1><p>渲染模块用于生成粒子渲染所需要的数据。</p><p><img src="'+n+'" alt="renderer"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>RenderMode</strong></td><td style="text-align:left;">设置一个粒子面片的生成方式，包括：<br><strong>Billboard</strong>：粒子显示为公告牌，并始终面向摄像机；<br><strong>StretchedBillboard</strong>：粒子始终面向摄像机，但会根据相关参数进行拉伸；<br><strong>HorizontalBillboard</strong>：粒子始终与 X-Z 平面平行<br><strong>VerticalBillboard</strong>：粒子始终与 Y 轴平行，但会朝向摄像机；<br><strong>Mesh</strong>：以指定的网格资源渲染粒子。</td></tr><tr><td style="text-align:left;"><strong>VelocityScale</strong></td><td style="text-align:left;">当 <strong>RenderMode</strong> 设置为 <strong>StretchedBillboard</strong> 模式时，根据粒子 <strong>速度大小</strong> 按比例进行拉伸。<br>当设置为 0 时，可禁用基于速度的拉伸。</td></tr><tr><td style="text-align:left;"><strong>LengthScale</strong></td><td style="text-align:left;">当 <strong>RenderMode</strong> 设置为 <strong>StretchedBillboard</strong> 模式时，根据粒子 <strong>大小</strong> 按比例进行拉伸。<br>当设置为 0 时，相当于粒子大小为 0，粒子会消失。</td></tr><tr><td style="text-align:left;"><strong>Mesh</strong></td><td style="text-align:left;">当 <strong>RenderMode</strong> 设置为 <strong>Mesh</strong> 时，指定粒子渲染的网格资源。</td></tr><tr><td style="text-align:left;"><strong>ParticleMaterial</strong></td><td style="text-align:left;">用于粒子渲染的材质。<br>当使用 CPU 渲染器，也就是不勾选 <strong>UseGPU</strong> 时，材质使用的 <code>effect</code> 只能选择 Creator 内置的 <code>builtin-particle</code>，不支持其它的 <code>effect</code>。<br>当使用 GPU 渲染器，也就是勾选 <strong>UseGPU</strong> 时，材质使用的 <code>effect</code> 只能选择 Creator 内置的 <code>builtin-particle-gpu</code>，不支持其它的 <code>effect</code>。</td></tr><tr><td style="text-align:left;"><strong>TrailMaterial</strong></td><td style="text-align:left;">用于渲染粒子拖尾的材质，材质的 effect 只支持 <code>builtin-particle-trail</code>，不支持其它的 effect。</td></tr><tr><td style="text-align:left;"><strong>UseGPU</strong></td><td style="text-align:left;">是否使用 GPU 渲染器进行粒子的渲染，默认不勾选。<br>不勾选时，使用 <strong>CPU 渲染器</strong>（ParticleSystemRendererCPU）进行粒子的渲染。<br>勾选时，使用 <strong>GPU 渲染器</strong>（ParticleSystemRendererGPU）进行粒子的渲染。<br>详情请参考下文 <strong>粒子渲染器</strong> 部分的内容。</td></tr><tr><td style="text-align:left;"><strong>AlignSpace</strong></td><td style="text-align:left;">粒子对齐方向空间，可选项包括 <strong>View</strong>（视角空间）、<strong>World</strong>（世界空间）和 <strong>Local</strong>（局部空间），默认使用视角空间。选择不同空间可以决定粒子初始方向：<br>选择 <strong>View</strong> 时，粒子网格的旋转方向将会跟随摄像机的视角方向；<br>选择 <strong>World</strong> 时，粒子网格的方向将会使用发射器所在节点的世界空间旋转方向；<br>选择 <strong>Local</strong> 时，粒子网格将会使用发射器所在节点的局部空间旋转方向。</td></tr></tbody></table><h2 id="粒子渲染器" tabindex="-1">粒子渲染器 <a class="header-anchor" href="#粒子渲染器" aria-label="Permalink to &quot;粒子渲染器&quot;">​</a></h2><p>粒子渲染部分由 <strong>渲染器</strong>（ParticleSystemRenderer）控制，渲染器分为 <strong>CPU 渲染器</strong>（默认）和 <strong>GPU 渲染器</strong>，可通过渲染模块中的 <strong>UseGPU</strong> 属性选择使用。</p><ul><li><p>CPU 渲染器（ParticleSystemRendererCPU）通过一个对象池来维护所有粒子，根据粒子当前状态来生成对应的 VB、IB 数据，持有粒子需要渲染的材质，并且保存相关渲染状态。粒子系统默认使用 CPU 渲染器。</p></li><li><p>GPU 渲染器（ParticleSystemRendererGPU）目前是在 CPU 端生成粒子，只提交初始参数的 VB、IB 数据，但模块相关的计算则是通过预采样数据的形式，在初始化时提交一次数据。后续的模块系统则是在 GPU 端对数据进行提取模拟运算，减少 CPU 端的计算压力。<br> 可通过勾选 <strong>UseGPU</strong> 属性选择使用 GPU 渲染器。目前暂不支持 <a href="./trail-module.html">拖尾模块</a> 和 <a href="./limit-velocity-module.html">限速模块</a>。</p></li></ul><h2 id="自定义材质说明" tabindex="-1">自定义材质说明 <a class="header-anchor" href="#自定义材质说明" aria-label="Permalink to &quot;自定义材质说明&quot;">​</a></h2><blockquote><p><strong>注意</strong>：如果需要对粒子系统使用自定义材质，则该自定义材质的名称有以下限制：</p><ol><li>如果要在 CPU 粒子上使用该自定义材质，则材质名称需包含 <code>particle-cpu</code>, 如 <code>custom-particle-cpu</code></li><li>如果要在 GPU 粒子上使用该自定义材质，则材质名称需包含 <code>particle-gpu</code>, 如 <code>my-particle-gpu</code></li></ol></blockquote>',9),a=[l];function d(g,i,c,f,p,h){return r(),e("div",null,a)}const m=t(s,[["render",d]]);export{b as __pageData,m as default};
