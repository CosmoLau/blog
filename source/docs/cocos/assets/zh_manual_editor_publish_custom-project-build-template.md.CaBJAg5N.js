import{_ as t,c as e,o as s,a5 as l}from"./chunks/framework.CqnjdYks.js";const a="/docs/cocos/assets/build-template.CHVcPKwP.png",i="/docs/cocos/assets/web-mobile.DbIbDTPQ.png",x=JSON.parse('{"title":"自定义构建模版","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/publish/custom-project-build-template.md","filePath":"zh/manual/editor/publish/custom-project-build-template.md"}'),d={name:"zh/manual/editor/publish/custom-project-build-template.md"},o=l(`<h1 id="自定义构建模版" tabindex="-1">自定义构建模版 <a class="header-anchor" href="#自定义构建模版" aria-label="Permalink to &quot;自定义构建模版&quot;">​</a></h1><p>Cocos Creator 支持对每个项目分别定制构建模板，只需要在项目路径下添加一个 <code>build-templates</code> 目录，里面按照 <strong>平台插件名称</strong> 划分子目录。在构建结束后，<code>build-templates/[platform]</code> 目录下所有的文件都会自动按照对应的目录结构 <strong>复制</strong> 到对应平台构建生成的工程中，这个功能是全平台支持的。具体的 <strong>平台插件名称</strong> 请参考最下方的 <strong>特殊自定义构建模板平台支持表</strong>。</p><p>结构类似：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project-folder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--assets</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--build-templates</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--web-mobile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 需要添加的文件，如</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--index.html</span></span></code></pre></div><p>这样如果当前构建的平台是 <strong>Web Mobile</strong> 的话，那么 <code>build-templates/web-mobile/index.html</code> 就会在构建后被拷贝到 <code>build/web-mobile（以平台插件名称为准）/index.html</code>。</p><p>除此之外，目前构建模板支持的文件类型还包括 <strong>ejs 类型</strong> 和 <strong>json 类型</strong>，这两个类型不会直接拷贝而是会过解析处理，或者数据融合。各平台对这两种模板类型的支持情况，详情请参考下文的 <strong>特殊自定义构建模板平台支持表</strong>。</p><h2 id="ejs-类型" tabindex="-1">ejs 类型 <a class="header-anchor" href="#ejs-类型" aria-label="Permalink to &quot;ejs 类型&quot;">​</a></h2><p>随着 Cocos Creator 版本的升级，可能会对构建模板做一些修改和更新，就会导致不同版本构建出来的包内容不完全一样，开发者需要手动同步更新项目中定制的构建模板。例如构建时勾选了 MD5 Cache 选项之后，以 Web 平台的 <code>index.html</code> 为例，里面引用的 <code>css</code> 文件地址会带有 MD5 Hash 后缀，可能会和原先模板里的不匹配而导致无法使用。<br> 因此为了优化这个问题，Creator 在主菜单的 <strong>项目</strong> 中新增了 <strong>创建项目构建模板</strong> 选项，用于生成对应平台支持的构建模板。</p><p><img src="`+a+'" alt="build template"></p><p>开发者只需要在生成的构建模板的 <code>.ejs</code> 中进行定制，构建时会自动将编辑器构建模板的更新同步到定制的构建模板中，经常改动的内容都会同步到该模板引用的子模板（<code>.ejs</code>）中，这样定制构建模板便可以不用频繁手动更新。</p><p>以创建 Web Mobile 构建模板为例，生成的构建模板目录结构如下：</p><p><img src="'+i+'" alt="web-mobile"></p><blockquote><p><strong>注意</strong>：构建时，拷贝定制构建模板这一步骤是最后执行的，也就是说，假如该目录下同时存在 <code>index.ejs</code> 与 <code>index.html</code>，那么最终打包出来的是 <code>index.html</code> 文件而不是 <code>index.ejs</code> 文件。</p></blockquote><h2 id="json-类型的融合处理" tabindex="-1">json 类型的融合处理 <a class="header-anchor" href="#json-类型的融合处理" aria-label="Permalink to &quot;json 类型的融合处理&quot;">​</a></h2><p>许多小游戏平台都会有类似 <code>game.json</code> 之类的配置文件，若这些 json 文件在对应平台的定制构建模板中，构建时便不会直接将其拷贝并覆盖到对应的发布包目录下，而是会将编辑器最新构建模板的内容整合进来。</p><h2 id="特殊自定义构建模板平台支持表" tabindex="-1">特殊自定义构建模板平台支持表 <a class="header-anchor" href="#特殊自定义构建模板平台支持表" aria-label="Permalink to &quot;特殊自定义构建模板平台支持表&quot;">​</a></h2><p>大部分文件放置在 <code>build-templates/[platform]</code> 目录下都会被直接拷贝到对应目录下，除此之外，各个平台还支持一些特殊名称格式的模板文件，部分文件各平台对构建模板的文件类型支持情况如下表所示：</p><table><thead><tr><th style="text-align:left;">平台</th><th style="text-align:left;">平台构建插件名</th><th style="text-align:left;">支持的特殊文件类型</th></tr></thead><tbody><tr><td style="text-align:left;">华为 AGC</td><td style="text-align:left;">huawei-agc</td><td style="text-align:left;">暂不支持</td></tr><tr><td style="text-align:left;">支付宝小游戏</td><td style="text-align:left;">alipay-mini-game</td><td style="text-align:left;"><code>game.json</code></td></tr><tr><td style="text-align:left;">淘宝小游戏</td><td style="text-align:left;">taobao-mini-game</td><td style="text-align:left;"><code>game.json</code>、<code>mini.project.json</code></td></tr><tr><td style="text-align:left;">字节跳动小游戏</td><td style="text-align:left;">bytedance-mini-game</td><td style="text-align:left;"><code>game.ejs</code>、<code>game.json</code>、<code>project.config.json</code></td></tr><tr><td style="text-align:left;">OPPO 小游戏</td><td style="text-align:left;">oppo-mini-game</td><td style="text-align:left;"><code>manifest.json</code></td></tr><tr><td style="text-align:left;">华为快游戏</td><td style="text-align:left;">huawei-quick-game</td><td style="text-align:left;">暂不支持</td></tr><tr><td style="text-align:left;">Cocos Play</td><td style="text-align:left;">cocos-play</td><td style="text-align:left;"><code>game.config.json</code></td></tr><tr><td style="text-align:left;">vivo 小游戏</td><td style="text-align:left;">vivo-mini-game</td><td style="text-align:left;"><code>project.config.json</code></td></tr><tr><td style="text-align:left;">小米快游戏</td><td style="text-align:left;">xiaomi-quick-game</td><td style="text-align:left;"><code>manifest.json</code></td></tr><tr><td style="text-align:left;">百度小游戏</td><td style="text-align:left;">baidu-mini-game</td><td style="text-align:left;"><code>game.json</code>、<code>project.swan.json</code></td></tr><tr><td style="text-align:left;">微信小游戏</td><td style="text-align:left;">wechatgame</td><td style="text-align:left;"><code>game.ejs</code>、<code>game.json</code>、<code>project.config.json</code></td></tr><tr><td style="text-align:left;">Web Desktop</td><td style="text-align:left;">web-desktop</td><td style="text-align:left;"><code>index.ejs</code></td></tr><tr><td style="text-align:left;">Web Mobile</td><td style="text-align:left;">web-mobile</td><td style="text-align:left;"><code>index.ejs</code></td></tr><tr><td style="text-align:left;">原生平台</td><td style="text-align:left;">native</td><td style="text-align:left;">暂不支持</td></tr></tbody></table>',18),n=[o];function c(r,p,g,h,m,y){return s(),e("div",null,n)}const b=t(d,[["render",c]]);export{x as __pageData,b as default};
