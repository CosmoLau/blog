import{_ as t,c as e,o as l,a5 as a}from"./chunks/framework.CqnjdYks.js";const r="/docs/cocos/assets/label-property.Byka6Hhv.png",x=JSON.parse('{"title":"Label 组件参考","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/ui-system/components/editor/label.md","filePath":"zh/manual/ui-system/components/editor/label.md"}'),s={name:"zh/manual/ui-system/components/editor/label.md"},n=a('<h1 id="label-组件参考" tabindex="-1">Label 组件参考 <a class="header-anchor" href="#label-组件参考" aria-label="Permalink to &quot;Label 组件参考&quot;">​</a></h1><p>Label 组件用来显示一段文字，文字可以是系统字体，TrueType 字体、BMFont 字体或艺术数字。另外，Label 还具有排版功能。</p><p><img src="'+r+'" alt="label-property"></p><p>点击 <strong>属性检查器</strong> 下面的 <strong>添加组件</strong> 按钮，然后从 <strong>UI</strong> 中选择 <strong>Label</strong>，即可添加 Label 组件到节点上。</p><p>Label 的组件接口请参考 <a href="./__APIDOC__/zh/result.html?keyword=Label">Label API</a>。</p><p>具体使用方法可参考范例 <strong>Label</strong>（<a href="https://github.com/cocos/cocos-test-projects/tree/v3.7/assets/cases/ui/02.label" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.7/assets/cases/ui/02.label" target="_blank" rel="noreferrer">Gitee</a>）。</p><h2 id="label-属性" tabindex="-1">Label 属性 <a class="header-anchor" href="#label-属性" aria-label="Permalink to &quot;Label 属性&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">CustomMaterial</td><td style="text-align:left;">自定义材质，使用方法参考 <a href="./../engine/ui-material.html">自定义材质</a></td></tr><tr><td style="text-align:left;">Color</td><td style="text-align:left;">文字颜色。</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:left;">文本内容字符串。</td></tr><tr><td style="text-align:left;">HorizontalAlign</td><td style="text-align:left;">文本的水平对齐方式。可选值有 LEFT、CENTER 和 RIGHT。</td></tr><tr><td style="text-align:left;">VerticalAlign</td><td style="text-align:left;">文本的垂直对齐方式。可选值有 TOP、CENTER 和 BOTTOM。</td></tr><tr><td style="text-align:left;">FontSize</td><td style="text-align:left;">文本字体大小。</td></tr><tr><td style="text-align:left;">FontFamily</td><td style="text-align:left;">文字字体名字。在使用系统字体时生效。</td></tr><tr><td style="text-align:left;">LineHeight</td><td style="text-align:left;">文本的行高。</td></tr><tr><td style="text-align:left;">Overflow</td><td style="text-align:left;">文本的排版方式，目前支持 CLAMP、SHRINK 和 RESIZE_HEIGHT。详情见下方的 <a href="#label-排版">Label 排版</a> 或者 <a href="./../engine/label-layout.html">文字排版</a>。</td></tr><tr><td style="text-align:left;">EnableWrapText</td><td style="text-align:left;">是否开启文本换行。（在排版方式设为 CLAMP、SHRINK 时生效）</td></tr><tr><td style="text-align:left;">Font</td><td style="text-align:left;">指定文本渲染需要的 <a href="./../../../asset/font.html">字体资源</a>。若要使用艺术数字字体，请参考 <a href="./../../../asset/label-atlas.html">艺术数字资源</a> 文档进行配置。<br>如果使用系统字体，则此属性可以为空。</td></tr><tr><td style="text-align:left;">UseSystemFont</td><td style="text-align:left;">布尔值，是否使用系统字体。</td></tr><tr><td style="text-align:left;">CacheMode</td><td style="text-align:left;">文本缓存类型，仅对 <strong>系统字体</strong> 或 <strong>TTF</strong> 字体有效，BMFont 字体无需进行这个优化。包括 <strong>NONE</strong>、<strong>BITMAP</strong>、<strong>CHAR</strong> 三种模式。详情见下方的 <a href="#文本缓存类型（cache-mode）">文本缓存类型</a>。</td></tr><tr><td style="text-align:left;">IsBold</td><td style="text-align:left;">文字是否加粗，支持系统字体以及部分 TTF 字体。当 CacheMode 为 CHAR 模式时暂不生效。</td></tr><tr><td style="text-align:left;">IsItalic</td><td style="text-align:left;">文字是否倾斜，支持系统字体以及 TTF 字体。当 CacheMode 为 CHAR 模式时暂不生效。</td></tr><tr><td style="text-align:left;">IsUnderline</td><td style="text-align:left;">文字是否加下划线，支持系统字以及 TTF 字体。当 CacheMode 为 CHAR 模式时暂不生效。</td></tr></tbody></table><h2 id="label-排版" tabindex="-1">Label 排版 <a class="header-anchor" href="#label-排版" aria-label="Permalink to &quot;Label 排版&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">CLAMP</td><td style="text-align:left;">文字尺寸不会根据 Content Size 的大小进行缩放。<br>Wrap Text 关闭的情况下，按照正常文字排列，超出 Content Size 的部分将不会显示。<br>Wrap Text 开启的情况下，会试图将本行超出范围的文字换行到下一行。如果纵向空间也不够时，也会隐藏无法完整显示的文字。</td></tr><tr><td style="text-align:left;">SHRINK</td><td style="text-align:left;">文字尺寸会根据 Content Size 大小进行自动缩放（不会自动放大，最大显示 Font Size 规定的尺寸）。<br>Wrap Text 开启时，当宽度不足时会优先将文字换到下一行，如果换行后还无法完整显示，则会将文字进行自动适配 Content Size 的大小。<br>Wrap Text 关闭时，则直接按照当前文字进行排版，如果超出边界则会进行自动缩放。</td></tr><tr><td style="text-align:left;">RESIZE_HEIGHT</td><td style="text-align:left;">文本的 Content Size 会根据文字排版进行适配，这个状态下用户无法手动修改文本的高度，文本的高度由内部算法自动计算出来。</td></tr></tbody></table><h2 id="文本缓存类型-cache-mode" tabindex="-1">文本缓存类型（Cache Mode） <a class="header-anchor" href="#文本缓存类型-cache-mode" aria-label="Permalink to &quot;文本缓存类型（Cache Mode）&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">NONE</td><td style="text-align:left;">默认值，Label 中的整段文本将生成一张位图。</td></tr><tr><td style="text-align:left;">BITMAP</td><td style="text-align:left;">选择后，Label 中的整段文本仍将生成一张位图，但是会尽量参与 <a href="./../../../advanced-topics/dynamic-atlas.html">动态合图</a>。只要满足动态合图的要求，就会和动态合图中的其它 Sprite 或者 Label 合并 Draw Call。由于动态合图会占用更多内存，<strong>该模式只能用于文本不常更新的 Label</strong>。此模式在节点安排合理的情况下可大幅降低 Draw Call，请酌情选择使用</td></tr><tr><td style="text-align:left;">CHAR</td><td style="text-align:left;">原理类似 BMFont，Label 将以“字”为单位将文本缓存到全局共享的位图中，相同字体样式和字号的每个字符将在全局共享一份缓存。能支持文本的频繁修改，对性能和内存最友好。不过目前该模式还存在如下限制，我们将在后续的版本中进行优化：<br>1. <strong>该模式只能用于字体样式和字号（通过记录字体的 fontSize、fontFamily、color、outline 为关键信息，以此进行字符的重复使用，其他有使用特殊自定义文本格式的需要注意）固定，并且不会频繁出现巨量未使用过的字符的 Label</strong>。这是为了节约缓存，因为全局共享的位图尺寸为 <strong>2048 * 2048</strong>，只有场景切换时才会清除，一旦位图被占满后新出现的字符将无法渲染。<br>2. Overflow 不支持 SHRINK。<br>3. 不能参与动态合图（同样启用 CHAR 模式的多个 Label 在渲染顺序不被打断的情况下仍然能合并 Draw Call）<br>4. 目前暂不支持 <strong>IsBold</strong>、<strong>IsItalic</strong> 和 <strong>IsUnderline</strong> 属性。</td></tr></tbody></table><blockquote><p><strong>注意</strong>：Cache Mode 对所有平台都有优化效果。</p></blockquote>',13),o=[n];function d(i,g,f,h,b,c){return l(),e("div",null,o)}const p=t(s,[["render",d]]);export{x as __pageData,p as default};
