import{_ as s,c as a,o as t,a4 as i}from"./chunks/framework.uQk9_EO2.js";const g=JSON.parse('{"title":"Vertex Shader Input","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/surface-shader/vs-input.md","filePath":"en/shader/surface-shader/vs-input.md","lastUpdated":1712305443000}'),e={name:"en/shader/surface-shader/vs-input.md"},n=i(`<h1 id="vertex-shader-input" tabindex="-1">Vertex Shader Input <a class="header-anchor" href="#vertex-shader-input" aria-label="Permalink to &quot;Vertex Shader Input&quot;">​</a></h1><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>The input values for the Vertex Shader are all in the <code>SurfacesStandardVertexIntermediate</code> structure and are passed in as function parameters.</p><table><thead><tr><th>Vertex Shader Input Values</th><th>Type</th><th>Needed Macros</th><th>Meaning</th></tr></thead><tbody><tr><td>position</td><td>vec4</td><td>N/A</td><td>Local position</td></tr><tr><td>normal</td><td>vec3</td><td>N/A</td><td>Local normal</td></tr><tr><td>tangent</td><td>vec4</td><td>CC_SURFACES_USE_TANGENT_SPACE</td><td>Local tangent and mirror normal flag</td></tr><tr><td>color</td><td>vec4</td><td>CC_SURFACES_USE_VERTEX_COLOR</td><td>Vertex color</td></tr><tr><td>texCoord</td><td>vec2</td><td>N/A</td><td>UV0</td></tr><tr><td>texCoord1</td><td>vec2</td><td>CC_SURFACES_USE_SECOND_UV</td><td>UV1</td></tr><tr><td>clipPos</td><td>vec4</td><td>N/A</td><td>Projected coordinates</td></tr><tr><td>worldPos</td><td>vec3</td><td>N/A</td><td>World position</td></tr><tr><td>worldNormal</td><td>vec4</td><td>N/A</td><td>World normal and double-sided material flag</td></tr><tr><td>worldTangent</td><td>vec3</td><td>CC_SURFACES_USE_TANGENT_SPACE</td><td>World tangent</td></tr><tr><td>worldBinormal</td><td>vec3</td><td>CC_SURFACES_USE_TANGENT_SPACE</td><td>World binormal</td></tr></tbody></table><h2 id="macro-switch" tabindex="-1">Macro Switch <a class="header-anchor" href="#macro-switch" aria-label="Permalink to &quot;Macro Switch&quot;">​</a></h2><p>When you need to use input parameters with a macro switch, you need to enable the corresponding macro in the macro-remapping code segment. The example code is as follows.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Use the second set of UVs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_USE_SECOND_UV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Use the world&#39;s binormal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_USE_TANGENT_SPACE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h2><p>In any function with <code>SurfacesStandardVertexIntermediate</code> parameters, you can directly access the relevant parameters, taking the <code>SurfacesVertexModifyWorldPos</code> function as an example.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_VERTEX_MODIFY_WORLD_POS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SurfacesVertexModifyWorldPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in SurfacesStandardVertexIntermediate </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">In</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec3 worldPos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> In.worldPos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    worldPos.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cc_time.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worldPos.z);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    worldPos.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cc_time.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worldPos.z);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worldPos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10),d=[n];function r(l,h,p,o,k,c){return t(),a("div",null,d)}const _=s(e,[["render",r]]);export{g as __pageData,_ as default};
