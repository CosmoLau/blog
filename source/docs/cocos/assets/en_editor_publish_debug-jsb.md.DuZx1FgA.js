import{_ as e,c as o,o as t,a4 as a}from"./chunks/framework.uQk9_EO2.js";const n="/docs/cocos/assets/v8-android-debug.C-RLVzLk.png",i="/docs/cocos/assets/v8-win32-debug.DVJAre_g.png",s="/docs/cocos/assets/xcode-brk-point-action.CrBjPrze.png",r="/docs/cocos/assets/xcode-brk-point-lldb.hInqcTgG.png",d="/docs/cocos/assets/as-brk-point-action.Bxv1eS41.png",_=JSON.parse('{"title":"Debugging JavaScript on Native Platforms","description":"","frontmatter":{},"headers":[],"relativePath":"en/editor/publish/debug-jsb.md","filePath":"en/editor/publish/debug-jsb.md","lastUpdated":1712305443000}'),l={name:"en/editor/publish/debug-jsb.md"},c=a('<h1 id="debugging-javascript-on-native-platforms" tabindex="-1">Debugging JavaScript on Native Platforms <a class="header-anchor" href="#debugging-javascript-on-native-platforms" aria-label="Permalink to &quot;Debugging JavaScript on Native Platforms&quot;">​</a></h1><p>After a game is released on the native platform, because the runtime environment is different, there may be some bugs that cannot be reproduced in the browser preview. This means it is necessary to debug it directly on the native platform. <strong>Cocos Creator</strong> makes it easy to debug JavaScript remotely in the native platforms.</p><h2 id="debugging-on-android-ios" tabindex="-1">Debugging on Android / iOS <a class="header-anchor" href="#debugging-on-android-ios" aria-label="Permalink to &quot;Debugging on Android / iOS&quot;">​</a></h2><p>If a game can only run on a physical device, then the packaged game must be debugged on a physical device. Debugging steps are as follows:</p><ul><li><p>Make sure that the Android / iOS device is on the same LAN as Windows or Mac.</p></li><li><p>Select the <strong>Android/iOS</strong> platform and <strong>Debug</strong> mode in the <strong>Build</strong> panel to build, compile and run a project (for the iOS platform, it is recommended to connect to the physical device via Xcode to compile and run).</p></li><li><p>Open this address with Chrome browser: <code>devtools://devtools/bundled/js_app.html?v8only=true&amp;ws=Local IP of the device:43086/00010002-0003-4004-8005-000600070008</code>.</p><p><img src="'+n+'" alt="v8-android-debug"></p></li></ul><blockquote><p>It is recommended to check the &quot;Debug&quot; and &quot;Source Maps&quot; options when buiding. This ensures that the corresponding JavaScript code is displayed in an expanded format.</p></blockquote><h2 id="debugging-on-windows-mac" tabindex="-1">Debugging on Windows / Mac <a class="header-anchor" href="#debugging-on-windows-mac" aria-label="Permalink to &quot;Debugging on Windows / Mac&quot;">​</a></h2><p>The steps for debugging a game on the Windows / Mac platform are similar to the Android / iOS, just compile the project and run it in the IDE.</p><ul><li>Compile and run the packaged project with the IDE (Visual Studio for Windows and Xcode for Mac).</li><li>Open Chrome while the game is running and enter the address: <code>devtools://devtools/bundled/js_app.html?v8only=true&amp;ws=127.0.0.1:6086/00010002-0003-4004-8005-000600070008</code> to debug it.</li></ul><p><img src="'+i+'" alt="v8-win32-debug"></p><h2 id="using-lldb-to-view-the-current-js-call-stack" tabindex="-1">Using <code>lldb</code> to view the current JS call stack <a class="header-anchor" href="#using-lldb-to-view-the-current-js-call-stack" aria-label="Permalink to &quot;Using `lldb` to view the current JS call stack&quot;">​</a></h2><p>By using breakpoints in C++, we can easily see the C++ call stack, but not the JS call stack at the same time, which often breaks the debugging experience. The features provided by <code>lldb</code> allow doing a lot of things during debugging, including viewing the call stack.</p><p>Both <strong>Xcode</strong> and <strong>Android Studio</strong> use <code>lldb</code> as debugger by default. For more details, please refer to the <a href="https://lldb.llvm.org/use/tutorial.html" target="_blank" rel="noreferrer">LLDB Guide</a> documentation.</p><h3 id="global-configuration-of-lldb" tabindex="-1">Global configuration of <code>lldb</code> <a class="header-anchor" href="#global-configuration-of-lldb" aria-label="Permalink to &quot;Global configuration of `lldb`&quot;">​</a></h3><p><code>lldb</code> will load <code>~/.lldbinit</code> at startup, for example the following configuration:</p><p><code>~ % cat ~/.lldbinit</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>target stop-hook add </span></span>\n<span class="line"><span>po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span>\n<span class="line"><span>DONE</span></span></code></pre></div><p>The behavior after setting <strong>every breakpoint</strong> and executing the following code to output the JS call stack:</p><div class="language-lldb vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lldb</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span></code></pre></div><p>For more information on the usage of <code>target stop-hook</code>, please refer to the <a href="https://lldb.llvm.org/use/map.html#examining-variables" target="_blank" rel="noreferrer">Examining Variables</a> documentation.</p><p>However, this approach has an obvious drawback: it works for <strong>all projects</strong> and will result in an error if the corresponding symbol does not exist for other projects.</p><h3 id="configuring-lldb-in-xcode" tabindex="-1">Configuring <code>lldb</code> in Xcode <a class="header-anchor" href="#configuring-lldb-in-xcode" aria-label="Permalink to &quot;Configuring `lldb` in Xcode&quot;">​</a></h3><h4 id="editing-action-in-breakpoints-in-xcode-only-triggered-for-specific-breakpoints" tabindex="-1">Editing <code>Action</code> in breakpoints in Xcode (only triggered for specific breakpoints) <a class="header-anchor" href="#editing-action-in-breakpoints-in-xcode-only-triggered-for-specific-breakpoints" aria-label="Permalink to &quot;Editing `Action` in breakpoints in Xcode (only triggered for specific breakpoints)&quot;">​</a></h4><p><img src="'+s+'" alt="xcode-brk-point-action"></p><p>Enter the following command in the <strong>Debugger Command</strong>:</p><div class="language-lldb vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lldb</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span></code></pre></div><p>For more information about the usage of <code>target stop-hook</code>, please refer to the <a href="https://lldb.llvm.org/use/map.html#evaluating-expressions" target="_blank" rel="noreferrer">Evaluating Expressions</a> documentation.</p><h4 id="setting-stop-hook" tabindex="-1">Setting <code>stop hook</code> <a class="header-anchor" href="#setting-stop-hook" aria-label="Permalink to &quot;Setting `stop hook`&quot;">​</a></h4><p>After the breakpoint is triggered, a callback needs to be added to the lldb console. More calls can be made for specific breakpoints: the</p><p><img src="'+r+'" alt="xcode-brk-point-lldb"></p><p>As above, the call stack can also be viewed by executing the following code:</p><div class="language-lldb vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lldb</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span></code></pre></div><h3 id="configuring-lldb-in-android-studio" tabindex="-1">Configuring <code>lldb</code> in Android Studio <a class="header-anchor" href="#configuring-lldb-in-android-studio" aria-label="Permalink to &quot;Configuring `lldb` in Android Studio&quot;">​</a></h3><p>Configure in the <strong>Run -&gt; Debug Configuration -&gt; Debugger</strong> interface of <strong>Android Studio</strong>:</p><p><img src="'+d+'" alt="as-brk-point-action"></p><p>Android Studio also provides a <code>lldb console</code> similar to Xcode.</p><h2 id="advanced-debugging-guide" tabindex="-1">Advanced Debugging Guide <a class="header-anchor" href="#advanced-debugging-guide" aria-label="Permalink to &quot;Advanced Debugging Guide&quot;">​</a></h2><p>To debug in Release mode, or need to debug a customized native engine, please refer to the more detailed <a href="./../../advanced-topics/JSB2.0-learning">JSB 2.0 Usage Guide: Remote Debugging and Profile</a> documentation.</p>',38),g=[c];function p(u,h,b,m,f,v){return t(),o("div",null,g)}const S=e(l,[["render",p]]);export{_ as __pageData,S as default};
