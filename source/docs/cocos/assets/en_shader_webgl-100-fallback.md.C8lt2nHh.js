import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.uQk9_EO2.js";const b=JSON.parse('{"title":"WebGL 1.0 Fallback Compatibility","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/webgl-100-fallback.md","filePath":"en/shader/webgl-100-fallback.md","lastUpdated":1712305443000}'),t={name:"en/shader/webgl-100-fallback.md"},n=e(`<h1 id="webgl-1-0-fallback-compatibility" tabindex="-1">WebGL 1.0 Fallback Compatibility <a class="header-anchor" href="#webgl-1-0-fallback-compatibility" aria-label="Permalink to &quot;WebGL 1.0 Fallback Compatibility&quot;">â€‹</a></h1><p>Due to only GLSL 100 is supported in WebGL 1.0, shaders written in higher GLSL versions won&#39;t work well with it. Cocos Shader provides fallback code that converts GLSL 300 ES to GLSL 100 during compilation. Therefore, developers don&#39;t need to worry about this layer of transformation.</p><p>It&#39;s important to note that the current automatic fallback compatibility strategy only supports basic format conversions. If you use features only supported by GLSL 300 ES-specific functions (such as <code>texelFetch</code>, <code>textureGrad</code>) or some specific extensions, it is recommended to use the <code>__VERSION__</code> macro to check the GLSL version and write different code snippets for different GLSL versions.</p><p>Here&#39;s an example of the code.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __VERSION__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GL_EXT_shader_texture_lod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec4 color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> textureCubeLodEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(envmap, R, roughness);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec4 color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> textureCube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(envmap, R);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec4 color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> textureLod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(envmap, R, roughness);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre></div><blockquote><p><strong>Note</strong>: During compilation, the Cocos Shader compiler will analyze all constant macros and generate multiple versions of shaders.</p></blockquote>`,6),l=[n];function o(p,r,h,c,k,d){return i(),a("div",null,l)}const u=s(t,[["render",o]]);export{b as __pageData,u as default};
