import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.CqnjdYks.js";const e="/docs/cocos/assets/web.BD1U-MVE.png",t="/docs/cocos/assets/bundle.bv-917OO.png",l="/docs/cocos/assets/build-engine.BLQU7M5_.jpg",h="/docs/cocos/assets/build-atlas.C3vCM8lW.jpg",D=JSON.parse('{"title":"构建流程简介与常见问题指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/publish/build-guide.md","filePath":"zh/manual/editor/publish/build-guide.md"}'),p={name:"zh/manual/editor/publish/build-guide.md"},o=n('<h1 id="构建流程简介与常见问题指南" tabindex="-1">构建流程简介与常见问题指南 <a class="header-anchor" href="#构建流程简介与常见问题指南" aria-label="Permalink to &quot;构建流程简介与常见问题指南&quot;">​</a></h1><h2 id="构建基础结构介绍" tabindex="-1">构建基础结构介绍 <a class="header-anchor" href="#构建基础结构介绍" aria-label="Permalink to &quot;构建基础结构介绍&quot;">​</a></h2><p>构建流程主要包括以下两部分内容：</p><ul><li><strong>通用构建处理</strong></li><li><strong>各平台构建处理</strong></li></ul><p>由于 v3.0 在构建机制上的调整，不同平台的构建处理均以 <strong>构建插件</strong> 的形式注入 <strong>构建发布</strong> 面板，以及参与构建流程。各平台特有的构建选项也会以展开选项的形式显示在 <strong>构建发布</strong> 面板，开发者可以通过 <a href="./custom-build-plugin.html">构建插件</a> 将自定义的构建选项显示在 <strong>构建发布</strong> 面板上。</p><p><img src="'+e+'" alt="build-engine"></p><h2 id="通用构建处理流程" tabindex="-1">通用构建处理流程 <a class="header-anchor" href="#通用构建处理流程" aria-label="Permalink to &quot;通用构建处理流程&quot;">​</a></h2><p>Cocos Creator 的通用构建流程，主要包括以下内容：</p><ol><li>构建选项初始化</li><li>构建数据整理</li><li>将构建后的资源写入文件系统</li><li>整理 <code>settings.json</code>/<code>config.json</code> 数据</li><li><code>config.json</code> 中的 UUID 压缩与文件写入</li></ol><h3 id="构建选项初始化" tabindex="-1">构建选项初始化 <a class="header-anchor" href="#构建选项初始化" aria-label="Permalink to &quot;构建选项初始化&quot;">​</a></h3><p>这个步骤主要是将构建时传递给构建的 <strong>原始 options</strong> 初始化为 <strong>构建内部的 options</strong>，完成部分构建选项的格式转换、项目配置初始化、构建资源数据库的资源数据初始化、查询最新的资源信息并分类。</p><h3 id="构建数据整理" tabindex="-1">构建数据整理 <a class="header-anchor" href="#构建数据整理" aria-label="Permalink to &quot;构建数据整理&quot;">​</a></h3><p>构建时，编辑器会先整理出当前参与构建的场景以及所有 <a href="./../../asset/bundle.html">Bundle</a> 文件夹中的资源，再通过引擎的反序列化查找出这些资源的依赖资源，层层递归查找出所有需要打包的资源列表。这份资源列表汇总完成后，便会根据 <code>Bundle</code> 配置对资源进行分类，并收集脚本编译任务、图片压缩任务和 json 分组信息等。</p><blockquote><p><strong>注意</strong>：</p><ol><li>引擎在反序列化之前会先加载所有的用户脚本，脚本是否加载成功会直接影响到资源反序列化，所以如果脚本编写不合法，会直接构建失败。<br></li><li>如果资源整理过程中发现有依赖资源丢失会直接报错，通常情况下会继续进行构建。虽然允许继续构建成功，但并不意味着问题不需要解决，如果资源丢失不解决，很难保证构建后的游戏包允许没有问题。</li></ol></blockquote><h3 id="将构建后的资源写入文件系统" tabindex="-1">将构建后的资源写入文件系统 <a class="header-anchor" href="#将构建后的资源写入文件系统" aria-label="Permalink to &quot;将构建后的资源写入文件系统&quot;">​</a></h3><p>构建后的资源会根据 <a href="./../../asset/bundle.html#配置方法">Asset Bundle</a> 的配置在构建完成后打包到对应平台发布包目录下的 <code>assets/[Bundle 名称]</code> 中，目录结构如下：</p><p><img src="'+t+'" alt="build-engine"></p><p>更多关于 <code>Asset Bundle</code> 的配置、构建、文件说明等内容，请参考 <a href="./../../asset/bundle.html">Asset Bundle</a> 文档。</p><p>在整理完基本的构建任务后，构建将会循环所有的 <code>Bundle</code>，依次执行完每个 <code>Bundle</code> 需要处理的资源打包任务，生成这些 <code>Bundle</code> 资源包。</p><p>每个 <code>Bundle</code> 都会经过以下资源处理流程：</p><ul><li><p><strong>脚本构建</strong>：编辑器内的脚本分为 <a href="./../../scripting/external-scripts.html">插件脚本</a> 和 <strong>非插件脚本</strong> 两类，不同种类的处理规则不同。</p><ul><li><p><strong>插件脚本</strong>：直接将源文件按照原来的目录结构拷贝到构建后生成的发布包目录下的 <code>src</code> 目录中，所以插件脚本是不支持任何需要编译的脚本形式的，比如 <code>TypeScript</code> 或者是使用 ES6 写法的 <code>JavaScript</code>。插件脚本的资源信息会写进 <code>settings.json</code> 的 <code>jsList</code> 数组中。</p></li><li><p><strong>非插件脚本</strong>：将会全部打包成 <code>project.js</code>，放在对应的 <code>src</code> 目录下。勾选 <code>sourceMap</code> 选项将会生成对应的 <code>.map</code> 文件，根据 <code>debug</code> 选项来影响脚本是否混淆压缩。</p></li></ul></li><li><p><strong>自动图集处理</strong>：查询项目内部的自动图集资源列表，根据自动图集资源的配置将图集下的 <code>SpriteFrame</code> 小图打包成大图、生成序列化文件等等。这一步骤也会修改 <code>json</code> 分组信息、asset 资源分组信息以及根据需要添加纹理压缩任务。</p></li><li><p><strong>纹理压缩</strong>：根据整理好的图片压缩任务，进行图片资源的压缩处理并写入到构建文件夹内。</p></li><li><p><strong>引擎脚本编译</strong>：根据顶部菜单栏中 <strong>项目设置 -&gt; 功能裁剪</strong> 的配置，剔除没有使用到的引擎模块，打包到 <code>cocos-js</code> 目录下。勾选 <code>sourceMap</code> 选项将会生成对应的 <code>.map</code> 文件，根据 <code>debug</code> 选项来确定脚本是否混淆压缩。</p><p>引擎编译的主要步骤包括：</p><ul><li><p>获取 <strong>项目设置里的引擎模块信息</strong>；</p></li><li><p><strong>检查缓存</strong> 中的引擎编译选项与当前需要编译的选项是否一致，一致则直接使用缓存；</p></li><li><p>如需编译，则执行打包引擎的任务，之后拷贝编译后的 js 文件，并保存引擎的缓存判断信息文件；</p><p>编译引擎时，可以查看 <a href="./build-panel.html#构建-log-信息查看">输出的 log 信息</a>：</p><p><img src="'+l+`" alt="build-engine"></p><p>关于引擎文件的复用规则，这里有必要阐述下：<br> 打包好的引擎文件将会放置在编辑器全局的临时目录下 (在构建进程内使用 <code>Build.globalTempDir</code> 可查询到缓存地址)。缓存文件按照会影响引擎编译的参数生成的 <code>hash</code> 值作为名称存放。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">global-temp-folder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--CocosCreator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--x.xx(3.0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--builder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--engine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--1dc4a547f9...63a43bb8965.watch-files.json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--1dc4a547f9...63a43bb8965（引擎文件夹）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--1dc4a547f9...63a43bb8965.meta（文件夹）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ...</span></span></code></pre></div><p>只要任何相关的引擎构建参数发生更改，就会重新编译引擎，具体影响构建引擎缓存使用的有：</p><ul><li>debug：是否打开调试模式</li><li>includeModules：引擎模块设置</li><li>sourceMaps：是否开启 sourceMaps</li><li>platform：构建平台</li><li>引擎修改时间</li><li>是否勾选分离引擎（仅微信小游戏平台）</li><li>使用引擎路径、引擎版本号</li></ul></li></ul></li><li><p><strong>json 构建</strong>：序列化 <code>json</code> 时会根据 <code>json</code> 分组以及所属 <code>Bundle</code> 进行合并写入文件系统（<code>assets/xxxBundle/import</code> 文件夹内），如果是 <strong>release 模式还会对序列化 json 内的 UUID 进行压缩处理</strong>。</p></li><li><p><strong>普通资源拷贝</strong>：一些原始资源（rawAssets）会直接从 <code>library</code> 拷贝到构建后的 <code>assets/xxxBundle/native</code> 文件夹内。</p></li><li><p><strong>md5 处理</strong>：将 <code>assets</code> 文件夹内的资源、项目脚本、引擎文件全部加上 <code>md5</code> 后缀，并整理数据准备记录在 <code>settings.json</code> 内。</p></li><li><p><strong>application.js 文件生成</strong>：根据用户选项动态生成 <code>application.js</code> 文件到构建后生成的发布包目录的 <code>src</code> 目录下。</p></li></ul><h3 id="整理-settings-config-配置-json-数据" tabindex="-1">整理 settings/config 配置 JSON 数据 <a class="header-anchor" href="#整理-settings-config-配置-json-数据" aria-label="Permalink to &quot;整理 settings/config 配置 JSON 数据&quot;">​</a></h3><p>主要是根据之前资源整理的数据，准备游戏启动必要的配置信息。</p><h4 id="settings-json" tabindex="-1">settings.json <a class="header-anchor" href="#settings-json" aria-label="Permalink to &quot;settings.json&quot;">​</a></h4><p><code>settings.json</code> 记录了整个游戏包的基本配置信息，会直接影响到游戏包的运行初始化。</p><p>关于 <code>settings.json</code> 配置的说明如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否为调试模式，取自构建发布面板</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    designResolution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ISettingsDesignResolution; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Canvas 分辨率设置，取自项目设置中的数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jsList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件脚本信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launchScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始场景 url</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleIds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 所有用户脚本组件的信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    renderPipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// renderPipeline 信息，取自项目设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    physics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IPhysicsConfig;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 物理模块设置（仅在勾选了物理引擎模块时生成）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    BundleVers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string, string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bundle 的 md5 值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    subpackages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分包信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    remoteBundles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记录远程包 Bundle 的集合</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记录远程服务器地址（注意：v3.4 之前该项存放在 ‘application.js’ 文件中）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hasResourcesBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否含有 resources 内置 Bundle</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hasStartSceneBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否含有初始场景内置 Bundle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customJointTextureLayouts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ICustomJointTextureLayout[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    macros</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string, any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 项目设置面板中的引擎宏配置值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="config-json" tabindex="-1">config.json <a class="header-anchor" href="#config-json" aria-label="Permalink to &quot;config.json&quot;">​</a></h4><p>每个 Bundle 资源包都有一个 <code>config.json</code>，里面记录了整个 <code>Bundle</code> 的资源、脚本等基本信息，会直接影响到 <code>Bundle</code> 包的加载。</p><p>关于 <code>config.json</code> 配置的说明如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    importBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bundle 中 import 目录的名称，通常是 &#39;import&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    nativeBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// native 中 native 目录的名称，通常是 &#39;native&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bundle 的名称，可以通过 Bundle 名称加载 Bundle</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 该 Bundle 依赖的其他 Bundle 名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    scenes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bundle 内包含的场景信息数组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rawAssets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { [index: string]: { [uuid: string]: string[] } };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 存储 resources 下加载的资源 url 与类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 示例: &quot;bba00d3a-2f17-4511-b47c-0d584b21b763@6c48a&quot;: [&quot;test/right/texture&quot;, &quot;cc.Texture2D&quot;, &quot;bba0...@6c48a&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;bba0...@6c48a&quot;: [&quot;test/right/texture&quot;, 1, 1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    packs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string, IUuid[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// json 分组信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    versions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 勾选 md5Cache 后才有，数组部分以 [uuid_1, md5_1, uuid_2, md5_2, ...] 的格式存储，其中 uuid_1 如果是个简单数字说明存储的是 uuids 数组内的 uuid 索引</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uuids</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// uuid 数组，仅 release 模式下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 资源类型数组，仅 release 模式下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    encrypted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原生上使用，标记该 Bundle 中的脚本是否加密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isZip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否为 ZIP 模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    zipVersion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ZIP 包的 MD5 Hash 值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里的结构仅列举了通用流程下 <code>settings.json</code>/<code>config.json</code> 的结构，实际上不同的平台构建后这些参数会有所差异。</p><h3 id="压缩-config-json" tabindex="-1">压缩 config.json <a class="header-anchor" href="#压缩-config-json" aria-label="Permalink to &quot;压缩 config.json&quot;">​</a></h3><p>在生成 <code>config.json</code> 之前会根据是否为 release 模式来压缩文件中的 <code>UUID</code> 信息，了解这个规则对查找资源构建后的文件位置会有帮助。</p><p>构建时会对 <code>Bundle</code> 内使用到的 <code>UUID</code> 进行整理，出现 <strong>两次及以上</strong> 的会存储到 <code>uuids</code> 数组中，并将之前使用到的 <code>UUID</code> 的位置替换为索引。</p><p>所有出现 <strong>两次及以上</strong> 的 <code>types</code> 也会存储到 <code>types</code> 数组中，并将之前使用到的位置替换为索引。</p><h4 id="构建资源" tabindex="-1">构建资源 <a class="header-anchor" href="#构建资源" aria-label="Permalink to &quot;构建资源&quot;">​</a></h4><p>该步骤是生成除了脚本以外的其他项目资源文件，因为脚本是作为特殊文件另外编译处理的。资源在打包过程中执行反序列化后会重新压缩序列化，以减小打包之后的包体。会根据之前数据整理的 JSON 分组信息将多个序列化 JSON 合并单个，例如 <code>texture</code> 资源的序列化文件会全部打包成一个 <code>json</code> 文件。</p><h2 id="各平台构建处理" tabindex="-1">各平台构建处理 <a class="header-anchor" href="#各平台构建处理" aria-label="Permalink to &quot;各平台构建处理&quot;">​</a></h2><p>构建提供了构建生命周期的钩子函数，方便开发者在构建的不同处理时期参与构建流程，影响构建结果。同时构建也支持开发者添加自定义构建选项的配置，通过简单配置可以直接在 <strong>构建发布</strong> 面板显示对应的新增参数，详情请参考 <a href="./custom-build-plugin.html">自定义构建流程</a>。构建插件注入的构建选项将会存放在 <code>options.packages[pkgName]</code> 内，因而目前通过命令行构建的选项参数也需要遵循此规则，对应参数的规则可通过点击 <strong>构建发布</strong> 面板右上方的 <strong>导出构建配置</strong> 进行参考。</p><h3 id="各平台的编译-生成流程" tabindex="-1">各平台的编译/生成流程 <a class="header-anchor" href="#各平台的编译-生成流程" aria-label="Permalink to &quot;各平台的编译/生成流程&quot;">​</a></h3><p>自 Cocos Creator 3.0 起，所有需要支持单独编译、生成的平台的构建流程都已经拆分出来，可能会有部分开发者疑惑现今的小游戏平台为何新增了 <strong>生成</strong> 按钮，事实上之前这部分逻辑也一直存在，只不过合并在 <strong>构建</strong> 中，无法进行单独控制。</p><p>编辑器的 <strong>构建</strong> 类似于一个 <strong>导出对应平台游戏包</strong> 的功能，主要是完成引擎对各个平台的接口、以及游戏包基本格式兼容，并不代表完成全部工作。各个平台通常还会有自己的编译流程，例如微信小游戏平台自带的开发者工具的编译上传功能，以及各个原生平台相关 IDE 的编译运行调试功能。如果开发者需要针对特定平台进行定制化打包处理，就需要编辑器先支持流程上的拆分才能更好地接入。</p><h2 id="常见问题指南" tabindex="-1">常见问题指南 <a class="header-anchor" href="#常见问题指南" aria-label="Permalink to &quot;常见问题指南&quot;">​</a></h2><p>构建的整个进程是在一个单独的 worker 内的，所以如果想要查看构建过程的日志信息或者查看出现报错时完整的调用栈，可以点击主菜单的 <strong>开发者 -&gt; 打开构建调试工具</strong> 查看。构建时其实会输出很多的日志信息，但是为了不干扰用户，默认只有错误、警告和一些重要的日志信息会被打印到编辑器的 <strong>控制台</strong> 面板，调试工具中的日志信息才是最完整的。</p><blockquote><p><strong>注意</strong>：在构建之前 <strong>请先确保参与构建的场景是可以正常预览的</strong>。一些场景的资源丢失或者其他脚本问题，是在预览阶段便能暴露出来的。在保证预览正常的情况下构建能更好地节约时间以及排查问题。</p></blockquote><h3 id="资源加载-404" tabindex="-1">资源加载 404 <a class="header-anchor" href="#资源加载-404" aria-label="Permalink to &quot;资源加载 404&quot;">​</a></h3><p>这种情况下，请复制报错资源丢失的日志中的 UUID 到 <strong>资源管理器</strong> 中查找对应的资源，查看该资源依赖的资源是否都正常。资源加载 404 通常有以下几种情况：</p><ol><li><p><strong>在脚本内动态加载了没有放在 Bundle 中的资源</strong>。</p><ul><li><p><strong>原因</strong>：通过上面的介绍，我们知道只有在 Bundle 目录下的资源及其依赖资源，以及参与构建场景的资源及其依赖资源才会被打包到最终的构建文件夹中，并且 <strong>只有直接放进 <code>Bundle</code> 文件夹中的资源 url 才会写入到 config.json</strong>。所以如果在脚本中使用了某个资源但这个资源没有放在任何 Bundle 目录下，加载的时候便会出现 404 了。</p></li><li><p><strong>解决方案</strong>：将使用到的资源移动在 Bundle 文件夹下。</p></li></ul></li><li><p><strong>加载的资源导入有问题，未能正常生成数据到 library 中</strong></p><ul><li><p><strong>原因</strong>：构建时所有的原始数据都是通过读取 <code>library</code> 中的资源文件获得的，如果导入失败将无法获取到正确对应的资源信息。</p></li><li><p><strong>解决方案</strong>：通过 <strong>资源管理器</strong> 找到对应资源，点击右键，选择菜单中的 <strong>重新导入资源</strong>。</p></li></ul></li><li><p><strong>资源丢失</strong></p><ul><li><p><strong>原因</strong>：在前面的构建流程中介绍过，<strong>资源的构建会经过反序列查找依赖资源</strong>，而最经常出现问题的就是所依赖的资源在项目迭代过程中被不小心删除而导致资源丢失。这些资源的丢失可能平时并没有注意到，但一旦执行构建便会暴露出来。</p></li><li><p><strong>解决方案</strong>：通过代码编辑器查找该 <code>UUID</code> 被哪些资源所引用，修改对应资源。</p></li></ul></li></ol><h3 id="脚本资源加载报错" tabindex="-1">脚本资源加载报错 <a class="header-anchor" href="#脚本资源加载报错" aria-label="Permalink to &quot;脚本资源加载报错&quot;">​</a></h3><p>在前面介绍的 <strong>构建数据整理</strong> 部分内容时有提到过，构建时需要配置脚本环境。如果报错信息与脚本相关，请参考报错内容对脚本进行修改。如果不清楚是哪个脚本的报错，可以在报错信息调用栈中找到对应脚本的 <code>UUID</code>，然后在 <strong>资源管理器</strong> 中查找定位。</p><h3 id="如何查找到小图自动合图后的大图" tabindex="-1">如何查找到小图自动合图后的大图 <a class="header-anchor" href="#如何查找到小图自动合图后的大图" aria-label="Permalink to &quot;如何查找到小图自动合图后的大图&quot;">​</a></h3><p>自动图集在构建过程中会打印出原始小图与合成的大图的 <code>UUID</code> 信息，在构建调试工具中便可以查找到，然后用查找到的合成的大图的 <code>UUID</code> 在打包后生成的 <code>XXXBundle/native</code> 目录中查看即可。如果合图太多，可以打开构建 <code>log</code> 文件用搜索 <code>UUID</code> 的方式查找。</p><p><img src="`+h+`" alt="build-atlas"></p><h3 id="如何解压缩-uuid" tabindex="-1">如何解压缩 UUID <a class="header-anchor" href="#如何解压缩-uuid" aria-label="Permalink to &quot;如何解压缩 UUID&quot;">​</a></h3><p>在 <strong>release</strong> 模式下打包出来的资源 JSON 文件以及 <code>config.json</code> 中的 <code>UUID</code> 都是压缩后的，需要将其解压才能找到原项目中的对应资源。构建进程中内置了一些工具方法在全局变量 <code>Build</code> 上，直接点击主菜单中的 <strong>开发者 -&gt; 构建调试工具</strong>，在控制台里输入以下命令即可查询到原始 <code>UUID</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Build.Utils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decompressUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;425o80X19KipOK7J1f5hsN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 42e68f34-5f5f-4a8a-938a-ec9d5fe61b0d</span></span></code></pre></div><h3 id="引擎编译失败" tabindex="-1">引擎编译失败 <a class="header-anchor" href="#引擎编译失败" aria-label="Permalink to &quot;引擎编译失败&quot;">​</a></h3><p>如果引擎编译失败，请检查安装包是否完整、修改的内置引擎代码是否正确，以及若使用了自定义引擎，路径是否正确等等。</p><h3 id="其他报错" tabindex="-1">其他报错 <a class="header-anchor" href="#其他报错" aria-label="Permalink to &quot;其他报错&quot;">​</a></h3><p>如果遇到的错误无法自行解决，请附上 Creator 版本、构建选项配置、构建任务中的构建日志文件以及可复现问题的 Demo 到 <a href="https://forum.cocos.org/c/58" target="_blank" rel="noreferrer">论坛</a> 反馈。</p>`,61),r=[o];function d(k,g,c,E,u,y){return a(),i("div",null,r)}const F=s(p,[["render",d]]);export{D as __pageData,F as default};
