import{_ as e,v as o,b as a,R as s}from"./chunks/framework.5ffcbaff.js";const b=JSON.parse('{"title":"常用节点和组件接口","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/scripting/basic-node-api.md","filePath":"zh/manual/scripting/basic-node-api.md"}'),t={name:"zh/manual/scripting/basic-node-api.md"},l=s(`<h1 id="常用节点和组件接口" tabindex="-1">常用节点和组件接口 <a class="header-anchor" href="#常用节点和组件接口" aria-label="Permalink to &quot;常用节点和组件接口&quot;">​</a></h1><p>在通过 <a href="./access-node-component.html">访问节点和组件</a> 介绍的方法获取到节点或组件实例后，这篇文章将会介绍通过节点和组件实例可以通过哪些常用接口实现我们需要的种种效果和操作。这一篇也可以认为是 <a href="./__APIDOC__/zh/class/Node.html">Node</a> 和 <a href="./__APIDOC__/zh/class/Component.html">Component</a> 类的 API 阅读指南，可以配合 API 一起学习理解。</p><h2 id="节点状态和层级操作" tabindex="-1">节点状态和层级操作 <a class="header-anchor" href="#节点状态和层级操作" aria-label="Permalink to &quot;节点状态和层级操作&quot;">​</a></h2><p>假设我们在一个组件脚本中，通过 <code>this.node</code> 访问当前脚本所在节点。</p><h3 id="激活-关闭节点" tabindex="-1">激活/关闭节点 <a class="header-anchor" href="#激活-关闭节点" aria-label="Permalink to &quot;激活/关闭节点&quot;">​</a></h3><p>节点默认是激活的，我们可以在代码中设置它的激活状态，方法是设置节点的 <code>active</code> 属性：</p><p><code>this.node.active = false;</code></p><p>设置 <code>active</code> 属性和在编辑器中切换节点的激活、关闭状态，效果是一样的。当一个节点是关闭状态时，它的所有组件都将被禁用。同时，它所有子节点，以及子节点上的组件也会跟着被禁用。要注意的是，子节点被禁用时，并不会改变它们的 <code>active</code> 属性，因此当父节点重新激活的时候它们就会回到原来的状态。</p><p>也就是说，<code>active</code> 表示的其实是该节点 <strong>自身的</strong> 激活状态，而这个节点 <strong>当前</strong> 是否可被激活则取决于它的父节点。并且如果它不在当前场景中，它也无法被激活。我们可以通过节点上的只读属性 <code>activeInHierarchy</code> 来判断它当前是否已经激活。</p><p><code>this.node.active = true;</code></p><p>若节点原先就处于 <strong>可被激活</strong> 状态，修改 <code>active</code> 为 true 就会立即触发激活操作：</p><ul><li>在场景中重新激活该节点和节点下所有 active 为 true 的子节点</li><li>该节点和所有子节点上的所有组件都会被启用，它们中的 <code>update</code> 方法之后每帧会执行</li><li>这些组件上如果有 <code>onEnable</code> 方法，这些方法将被执行</li></ul><p><code>this.node.active = false;</code></p><p>如该节点原先就已经被激活，修改 <code>active</code> 为 false 就会立即触发关闭操作：</p><ul><li>在场景中隐藏该节点和节点下的所有子节点</li><li>该节点和所有子节点上的所有组件都将被禁用，也就是不会再执行这些组件中的 <code>update</code> 中的代码</li><li>这些组件上如果有 <code>onDisable</code> 方法，这些方法将被执行</li></ul><h3 id="更改节点的父节点" tabindex="-1">更改节点的父节点 <a class="header-anchor" href="#更改节点的父节点" aria-label="Permalink to &quot;更改节点的父节点&quot;">​</a></h3><p>假设父节点为 <code>parentNode</code>，子节点为 <code>this.node</code>，您可以：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parentNode</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>或</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeFromParent</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addChild</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这两种方法是等价的。</p><p><strong>注意</strong>：</p><ul><li>在 v3.0 之前 的版本中<code>removeFromParent</code> 通常需要传入一个 <code>false</code>，否则默认会清空节点上绑定的事件和 action 等。v3.0 之后不再需要该参数。</li><li>通过 <a href="./create-destroy.html">创建和销毁节点</a> 介绍的方法创建出新节点后，要为节点设置一个父节点才能正确完成节点的初始化。</li></ul><h3 id="索引节点的子节点" tabindex="-1">索引节点的子节点 <a class="header-anchor" href="#索引节点的子节点" aria-label="Permalink to &quot;索引节点的子节点&quot;">​</a></h3><ul><li><code>this.node.children</code>：返回节点的所有子节点数组。</li><li><code>this.node.children.length</code>：返回节点的子节点数量。</li></ul><p><strong>注意</strong>：以上两个 API 都只会返回节点的直接子节点，不会返回子节点的子节点。</p><h2 id="更改节点的变换-位置、旋转、缩放" tabindex="-1">更改节点的变换（位置、旋转、缩放） <a class="header-anchor" href="#更改节点的变换-位置、旋转、缩放" aria-label="Permalink to &quot;更改节点的变换（位置、旋转、缩放）&quot;">​</a></h2><h3 id="更改节点位置" tabindex="-1">更改节点位置 <a class="header-anchor" href="#更改节点位置" aria-label="Permalink to &quot;更改节点位置&quot;">​</a></h3><p>有以下两种方法：</p><ol><li><p>使用 <code>setPosition</code> 方法：</p><ul><li><code>this.node.setPosition(100, 50, 100);</code></li><li><code>this.node.setPosition(new Vec3(100, 50, 100));</code></li></ul></li><li><p>设置 <code>position</code> 变量：</p><p><code>this.node.position = new Vec3(100, 50, 100);</code></p></li></ol><h3 id="更改节点旋转" tabindex="-1">更改节点旋转 <a class="header-anchor" href="#更改节点旋转" aria-label="Permalink to &quot;更改节点旋转&quot;">​</a></h3><p><code>this.node.setRotation(90, 90, 90);</code></p><p>或通过欧拉角设置本地旋转：</p><p><code>this.node.setRotationFromEuler(90, 90, 90);</code></p><h3 id="更改节点缩放" tabindex="-1">更改节点缩放 <a class="header-anchor" href="#更改节点缩放" aria-label="Permalink to &quot;更改节点缩放&quot;">​</a></h3><p><code>this.node.setScale(2, 2, 2);</code></p><h2 id="常用组件接口" tabindex="-1">常用组件接口 <a class="header-anchor" href="#常用组件接口" aria-label="Permalink to &quot;常用组件接口&quot;">​</a></h2><p><code>Component</code> 是所有组件的基类，任何组件都包括如下的常见接口（假设我们在该组件的脚本中，以 this 指代本组件）：</p><ul><li><code>this.node</code>：该组件所属的节点实例</li><li><code>this.enabled</code>：是否每帧执行该组件的 <code>update</code> 方法，同时也用来控制渲染组件是否显示</li><li><code>update(deltaTime: number)</code>：作为组件的成员方法，在组件的 <code>enabled</code> 属性为 <code>true</code> 时，其中的代码会每帧执行</li><li><code>onLoad()</code>：组件所在节点进行初始化时（节点添加到节点树时）执行</li><li><code>start()</code>：会在该组件第一次 <code>update</code> 之前执行，通常用于需要在所有组件的 <code>onLoad</code> 初始化完毕后执行的逻辑</li></ul>`,39),n=[l];function c(d,i,p,r,h,u){return o(),a("div",null,n)}const D=e(t,[["render",c]]);export{b as __pageData,D as default};
