import{_ as i,c as s,o as a,a4 as e}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced-topics/jsb-swig.md","filePath":"en/advanced-topics/jsb-swig.md","lastUpdated":1712305443000}'),n={name:"en/advanced-topics/jsb-swig.md"},t=e(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>From Cocos Creator 3.7.0, we switch the approach of generating JS binding code from <a href="https://github.com/cocos/cocos-engine/tree/d08a11244d2a31da1aac7af7d2aa8f1b6152e30c/native/tools/bindings-generator" target="_blank" rel="noreferrer">bindings-generator</a> to <a href="https://www.swig.org" target="_blank" rel="noreferrer">Swig</a>. Swig has many benefits in generating glue code by parsing its custom <code>interface</code> file (IDL) which is compatible with <code>C++</code>. For more about why we switch to Swig, you could refer to <a href="https://github.com/cocos/cocos-engine/issues/10792" target="_blank" rel="noreferrer">this issue</a> .</p><h2 id="generate-js-binding-code-for-engine" tabindex="-1">Generate JS Binding Code for Engine <a class="header-anchor" href="#generate-js-binding-code-for-engine" aria-label="Permalink to &quot;Generate JS Binding Code for Engine&quot;">​</a></h2><p>In 3.8 and later versions, developers no longer need to manually trigger the generation of binding code because CMake will automatically call the SWIG command during the build process to generate the binding code.</p><p>Please note that if the generation process fails, you should pay attention to the output logs in the console.</p><p>However, if you add or remove <code>.i</code> files for the engine, you need to regenerate the project to ensure that the updated references to the <code>.i</code> files are taken into account and that the updated binding code is generated.</p><h2 id="generate-js-bindings-code-for-developer-s-project" tabindex="-1">Generate JS Bindings Code for Developer&#39;s Project <a class="header-anchor" href="#generate-js-bindings-code-for-developer-s-project" aria-label="Permalink to &quot;Generate JS Bindings Code for Developer&#39;s Project&quot;">​</a></h2><ul><li><p>Make sure you have installed NodeJS (<code>&gt;= v8.9.4</code>)</p></li><li><p>Open Terminal (macOS/Linux) or Command Line Tool (Windows)</p></li><li><p>Create a directory for generated code, e.g. <code>/Users/abc/my-project/native/engine/common/Classes/bindings/auto</code></p></li><li><p>Write a JS configuration file</p><ul><li>Create the JS configruation file, e.g. <code>/Users/abc/my-project/tools/swig-config/swig-config.js</code> with the following content</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Developer&#39;s custom module configuration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// configList is required</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your_module_interface_0.i&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsb_your_module_interface_0_auto.cpp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your_module_interface_1.i&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsb_your_module_interface_1_auto.cpp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> projectRoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// interfaceDir is optional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> interfacesDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectRoot, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tools&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;swig-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bindingsOutDir is optional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bindingsOutDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectRoot, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;native&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;engine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Classes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bindings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    interfacesDir, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional, if it isn&#39;t exported, the items in configList should be absolute or relative to current directory of swig-config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bindingsOutDir, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional, if it isn&#39;t exported, the items in configList should be absolute or relative to current directory of swig-config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configList </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// required</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>Run the following command</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If current workspace is not in &#39;/Users/abc/my-project/tools/swig-config&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Engine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/native/tools/swig-config/genbindings.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/abc/my-project/tools/swig-config/swig-config.js</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If you have already navigate to &#39;/Users/abc/my-project/tools/swig-config&#39; directory, you could run the command without -c argument like:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/abc/my-project/tools/swig-config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Engine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/native/tools/swig-config/genbindings.js</span></span></code></pre></div></li></ul><h2 id="swig-interface-file" tabindex="-1">Swig Interface File <a class="header-anchor" href="#swig-interface-file" aria-label="Permalink to &quot;Swig Interface File&quot;">​</a></h2><ul><li>There is a <a href="https://github.com/cocos/cocos-engine/blob/1f928364f4cad22681e7830c53dc7da71a87d11f/native/tools/swig-config/swig-interface-template.i" target="_blank" rel="noreferrer">swig-interface-template.i</a> in <code>engine/native/tools/swig-config</code> directory, just copy and rename it to some place in your project. There some comments demonstrate how to configure your module in <code>.i</code> file. You could also reference engine internal <code>.i</code> files in <code>engine/native/tools/swig-config</code>, for instance, <code>scene.i</code> or <code>assets.i</code> for a quick start.</li><li>If you&#39;re using <code>Visual Studio Code</code>, you could install <code>SWIG Language</code> extension which was developed by <code>Hong-She Liang</code> for highlight syntax support.</li><li>For more details of writing <code>.i</code> file, please visit <a href="#tutorial">tutorial</a> section.</li></ul><h2 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h2><p>Visit <a href="./jsb/swig/tutorial/">The Tutorial of Swig Workflow in Cocos Creator</a>, which includes binding a new module in engine or user&#39;s project step by step.</p>`,12),l=[t];function h(o,p,r,k,d,c){return a(),s("div",null,l)}const y=i(n,[["render",h]]);export{E as __pageData,y as default};
