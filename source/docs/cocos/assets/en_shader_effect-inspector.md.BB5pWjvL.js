import{_ as s,c as e,o as a,a4 as i}from"./chunks/framework.uQk9_EO2.js";const t="/docs/cocos/assets/create-effect.BhOt-aIX.png",n="/docs/cocos/assets/new-effect.BrUyoxkn.png",h="/docs/cocos/assets/effect-pass.uLtVJBo8.png",r="/docs/cocos/assets/precompile.BsvnxYjs.png",l="/docs/cocos/assets/change-vs-fs.B6TdEicG.png",F=JSON.parse('{"title":"Cocos Shader Creation and Usage","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/effect-inspector.md","filePath":"en/shader/effect-inspector.md","lastUpdated":1712305443000}'),o={name:"en/shader/effect-inspector.md"},p=i('<h1 id="cocos-shader-creation-and-usage" tabindex="-1">Cocos Shader Creation and Usage <a class="header-anchor" href="#cocos-shader-creation-and-usage" aria-label="Permalink to &quot;Cocos Shader Creation and Usage&quot;">​</a></h1><h2 id="creating-a-shader" tabindex="-1">Creating a Shader <a class="header-anchor" href="#creating-a-shader" aria-label="Permalink to &quot;Creating a Shader&quot;">​</a></h2><p>To create a shader, click on the <strong>+</strong> button in the top-left corner of the <strong>Asset</strong> window (or right-click in the Assets folder), and select <strong>Effect</strong> or <strong>Surface Shader</strong> from the pop-up menu. This will create a new shader file.</p><p><img src="'+t+'" alt="1"></p><p>There are two types of shaders available.</p><ul><li><strong>Effect</strong>: A simple shader without lighting. You can refer to internal/effects/builtin-unlit.effect for an example.</li><li><strong>Surface Shader</strong>: A PBR-based shader. You can refer to internal/effects/builtin-standard.effect for an example.</li></ul><p>Let&#39;s take the Surface Shader as an example. The engine will create a shader file named <strong>surface-effect</strong> in the <strong>Assets</strong> Window.</p><p><img src="'+n+'" alt="image"></p><p>In the <strong>Inspector</strong> panel, you can see that the shader consists of the following main parts.</p><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">Shaders</td><td style="text-align:left;">The names of the current shader and its rendering processes.</td></tr><tr><td style="text-align:left;">Precompile Combinations</td><td style="text-align:left;">Whether to enable precompiled macro definition combinations. See the explanation below for more details.</td></tr><tr><td style="text-align:left;">GLSL 300 ES/100 Output</td><td style="text-align:left;">Shader output. See the explanation below for more details.</td></tr></tbody></table><h2 id="shaders" tabindex="-1">Shaders <a class="header-anchor" href="#shaders" aria-label="Permalink to &quot;Shaders&quot;">​</a></h2><p>If the current shader has multiple render passes, you can select different render pass through the dropdown menu on the right side of <strong>Shaders</strong>. After selecting a render pass, you can view the compiled shader code in the <strong>GLSL Output</strong> window.</p><p><img src="'+h+'" alt="render-pass"></p><h2 id="precompile-combinations" tabindex="-1">Precompile Combinations <a class="header-anchor" href="#precompile-combinations" aria-label="Permalink to &quot;Precompile Combinations&quot;">​</a></h2><p>Normally, shaders are compiled when the corresponding macro definitions are used. However, if there are many macro definitions involved, it may cause stuttering. In such cases, you can use this option to precompile combinations of macro definitions. For example, in the following configuration.</p><p><img src="'+r+'" alt="image"></p><h2 id="glsl-output" tabindex="-1">GLSL Output <a class="header-anchor" href="#glsl-output" aria-label="Permalink to &quot;GLSL Output&quot;">​</a></h2><p>The engine currently provides GLSL 300 ES and GLSL 100 output options.</p><p>By selecting different tabs, you can switch between displaying the compiled vertex shader and fragment shader.</p><p><img src="'+l+`" alt="vs-fs-switch"></p><h2 id="access-built-in-shaders-in-code" tabindex="-1">Access Built-in Shaders in Code <a class="header-anchor" href="#access-built-in-shaders-in-code" aria-label="Permalink to &quot;Access Built-in Shaders in Code&quot;">​</a></h2><p>The internal/effects/ folder contains built-in shaders provided by the engine, which are automatically loaded after game starts.</p><p>Taking the <code>builtin-standard</code> as an example, you can access and use it in code as follows.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the built-in Standard shader ‘builtin-standard.effect’</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> effect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EffectAsset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;builtin-standard&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Material</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize the material using the built-in PBR sahder ‘builtin-standard.effect’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ effectName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;builtin-standard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h2 id="dynamic-loading-shaders" tabindex="-1">Dynamic Loading Shaders <a class="header-anchor" href="#dynamic-loading-shaders" aria-label="Permalink to &quot;Dynamic Loading Shaders&quot;">​</a></h2><p>Shader files located in the <strong>resources</strong> folder can be loaded and used using the &quot;resources.load&quot; method.</p><p>Here&#39;s an example of how to do it in code.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-effect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, EffectAsset, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EffectAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //get effect</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> effectAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EffectAsset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../resources/custom-effect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //use the loaded effect</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Material</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    material.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ effectName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../resources/custom-effect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p><strong>Note:</strong> After successfully loading a custom shader, the effectName should be &quot;../&quot; + the file path.</p></blockquote>`,29),d=[p];function c(k,g,f,u,E,y){return a(),e("div",null,d)}const b=s(o,[["render",c]]);export{F as __pageData,b as default};
