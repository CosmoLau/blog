import{_ as s,v as a,b as n,R as l}from"./chunks/framework.5ffcbaff.js";const C=JSON.parse('{"title":"基于反射机制实现 JavaScript 与 Android 系统原生通信","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/java-reflection.md","filePath":"zh/manual/advanced-topics/java-reflection.md"}'),o={name:"zh/manual/advanced-topics/java-reflection.md"},p=l(`<h1 id="基于反射机制实现-javascript-与-android-系统原生通信" tabindex="-1">基于反射机制实现 JavaScript 与 Android 系统原生通信 <a class="header-anchor" href="#基于反射机制实现-javascript-与-android-系统原生通信" aria-label="Permalink to &quot;基于反射机制实现 JavaScript 与 Android 系统原生通信&quot;">​</a></h1><h2 id="javascript-调用-java-静态方法" tabindex="-1">JavaScript 调用 Java 静态方法 <a class="header-anchor" href="#javascript-调用-java-静态方法" aria-label="Permalink to &quot;JavaScript 调用 Java 静态方法&quot;">​</a></h2><p>使用 Cocos Creator 打包的安卓原生应用中，我们可以通过反射机制直接在 JavaScript 中调用 Java 的静态方法。它的定义如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">native</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reflection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callStaticMethod</span><span style="color:#A6ACCD;">(className</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> methodName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> methodSignature</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> parameters</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ul><li>className：类名</li><li>methodName：方法名</li><li>methodSignature：方法签名</li><li>parameters：参数列表</li></ul><p>接下来，我们以 <code>com.cocos.game</code> 包下面的 <code>Test</code> 类为例，来具体说明。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// package &quot;com.cocos.game&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="classname" tabindex="-1">className <a class="header-anchor" href="#classname" aria-label="Permalink to &quot;className&quot;">​</a></h3><p><code>className</code> 需要包含包名信息，如果要调用上面的 Test 类中的静态方法，<code>className</code> 应该为 &quot;com/cocos/game/Test&quot;。</p><pre><code>&gt; **注意**：这里必须是斜线 \`/\`，而不是在 Java 代码中的 \`.\`。
</code></pre><h3 id="methodname" tabindex="-1">methodName <a class="header-anchor" href="#methodname" aria-label="Permalink to &quot;methodName&quot;">​</a></h3><p><code>methodName</code> 就是方法本来的名字，例如要调用 <code>sum</code> 方法的话，methodName 传入的就是 &quot;sum&quot;。</p><h3 id="methodsignature" tabindex="-1">methodSignature <a class="header-anchor" href="#methodsignature" aria-label="Permalink to &quot;methodSignature&quot;">​</a></h3><p>由于 Java 支持函数重载功能，方法签名用于告诉反射系统对应的参数类型和返回值类型，以确定唯一的方法。</p><p>它的格式为：<strong>（参数类型）返回值类型</strong>。</p><p>目前 Cocos Creator 中支持的 Java 类型签名有以下 4 种：</p><table><thead><tr><th style="text-align:left;">Java 类型</th><th style="text-align:left;">签名</th></tr></thead><tbody><tr><td style="text-align:left;">int</td><td style="text-align:left;">I</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">F</td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">Z</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:left;">Ljava/lang/String;</td></tr></tbody></table><blockquote><p><strong>注意</strong>：String 类型的签名为 <code>Ljava/lang/String;</code>，不要漏掉了最后的 <code>;</code>。</p></blockquote><p>下面是一些案例</p><ul><li><code>()V</code> 表示没有参数，没有返回值</li><li><code>(I)V</code> 表示参数为一个 int，没有返回值的方法</li><li><code>(I)I</code> 表示参数为一个 int，返回值为 int 的方法</li><li><code>(IF)Z</code> 表示参数为一个 int 和一个 float，返回值为 boolean 的方法</li><li><code>(ILjava/lang/String;F)Ljava/lang/String;</code> 表示参数类型为一个 int，一个 String 和一个 float，返回值类型为 String 的方法</li></ul><h3 id="parameters" tabindex="-1">parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;parameters&quot;">​</a></h3><p>传递的参数与签名匹配即可，支持 number、bool 和 string。</p><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><p>接下来我们看几个 Test 类中的静态方法的调用示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">os </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OS</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ANDROID </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isNative)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用 hello 方法</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reflection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callStaticMethod</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com/cocos/game/Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(Ljava/lang/String;)V</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this is a message from JavaScript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用第一个 sum 方法</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reflection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callStaticMethod</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com/cocos/game/Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(II)I</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">7</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用第二个 sum 方法</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reflection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callStaticMethod</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com/cocos/game/Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(I)I</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>sys.isNative</code> 用于判断是否为原生平台，<code>sys.os</code> 用于判断当前运行系统。由于各平台通信机制不同，建议先判断再处理。</p><p>运行后，可以在 <strong>控制台</strong> 中看到相应的输出结果。</p><h2 id="java-调用-javascript" tabindex="-1">Java 调用 JavaScript <a class="header-anchor" href="#java-调用-javascript" aria-label="Permalink to &quot;Java 调用 JavaScript&quot;">​</a></h2><p>除了 JavaScript 调用 Java，引擎也提供了 Java 调用 JavaScript 的机制。</p><p>通过引擎提供的 <code>CocosJavascriptJavaBridge.evalString</code> 方法可以执行 JavaScript 代码。需要注意的是，由于 JavaScript 相关代码会在 GL 线程中执行，我们需要利用 <code>CocosHelper.runOnGameThread</code> 来确保线程是正确的。</p><p>接下来，我们给刚才的 Alert 对话框增加一个按钮，并在它的响应函数中执行一段 JavaScript 代码。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">alertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setButton</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">OK</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> DialogInterface</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OnClickListener</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onClick</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DialogInterface</span><span style="color:#A6ACCD;"> dialog</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> which</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 一定要在 GL 线程中执行</span></span>
<span class="line"><span style="color:#A6ACCD;">        CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cc.log(</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">Javascript Java bridge!</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><h3 id="调用全局函数" tabindex="-1">调用全局函数 <a class="header-anchor" href="#调用全局函数" aria-label="Permalink to &quot;调用全局函数&quot;">​</a></h3><p>我们可以在脚本中通过如下代码新增一个全局函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callByNative</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//to do</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p><code>window</code> 是 Cocos 引擎脚本环境中的全局对象，如果要让一个变量、函数、对象或者类全局可见，需要将它作为 <code>window</code> 的属性。可以使用 <code>window.变量名</code> 或者 <code>变量名</code> 进行访问。</p></blockquote><p>然后像下面这样调用:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">window.callByNative()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><p>或者：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    public void </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">callByNative()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="调用类的静态函数" tabindex="-1">调用类的静态函数 <a class="header-anchor" href="#调用类的静态函数" aria-label="Permalink to &quot;调用类的静态函数&quot;">​</a></h3><p>假如在 TypeScript 脚本中有一个类具有如下静态函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NativeAPI</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">callByNative</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//to do</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将 NativeAPI 注册为全局类，否则无法在 Java 中被调用</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NativeAPI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NativeAPI</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>我们可以像这样调用：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NativeAPI.callByNative()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><h3 id="调用单例函数" tabindex="-1">调用单例函数 <a class="header-anchor" href="#调用单例函数" aria-label="Permalink to &quot;调用单例函数&quot;">​</a></h3><p>如果脚本代码中，有实现可以全局访问的单例对象</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NativeAPIMgr</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">_inst</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">NativeAPIMgr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">inst</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;">NativeAPIMgr</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!this.</span><span style="color:#A6ACCD;">_inst</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_inst</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">NativeAPIMgr</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_inst</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">callByNative</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//to do</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将 NativeAPIMgr 注册为全局类，否则无法在 Java 中被调用</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NativeAPIMgr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NativeAPIMgr</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>我们可以像下面这样调用：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NativeAPIMgr.inst.callByNative()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><h3 id="参数传递" tabindex="-1">参数传递 <a class="header-anchor" href="#参数传递" aria-label="Permalink to &quot;参数传递&quot;">​</a></h3><p>以上几种 Java 调用 JS 的方式，均支持参数传递，但参数只支持 string, number 和 bool 三种基础类型。</p><p>我们以全局函数为例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callByNative</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">bool</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//to do</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>可像这样调用：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">window.callByNative(&#39;test&#39;,1,true)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><h2 id="在-c-代码中调用-javascript" tabindex="-1">在 C++ 代码中调用 JavaScript <a class="header-anchor" href="#在-c-代码中调用-javascript" aria-label="Permalink to &quot;在 C++ 代码中调用 JavaScript&quot;">​</a></h2><p>如果要在 C++ 中调用 <code>evalString</code>，我们可以参考下面的方式，确保 <code>evalString</code> 在 JavaScript 引擎所在的线程被执行：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">CC_CURRENT_ENGINE</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">getScheduler</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">performFunctionInCocosThread</span><span style="color:#89DDFF;">([=]()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ScriptEngine</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">c_str</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><h2 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h2><p>可以看到，上面的代码中，使用了 <code>CocosHelper.runOnGameThread</code> 和 <code>CC_CURRENT_ENGINE()-&gt;getScheduler()-&gt;performFunctionInCocosThread</code>。这是为了代码在执行时处于正确的线程，详情请参考：<a href="./thread-safety.html">线程安全</a>。</p>`,61),e=[p];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
