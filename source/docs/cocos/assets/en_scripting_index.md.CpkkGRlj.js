import{_ as e,c as t,o as i,a4 as a}from"./chunks/framework.uQk9_EO2.js";const u=JSON.parse('{"title":"Scripting","description":"","frontmatter":{},"headers":[],"relativePath":"en/scripting/index.md","filePath":"en/scripting/index.md","lastUpdated":1712305443000}'),n={name:"en/scripting/index.md"},r=a('<h1 id="scripting" tabindex="-1">Scripting <a class="header-anchor" href="#scripting" aria-label="Permalink to &quot;Scripting&quot;">​</a></h1><p>Scripting in Cocos Creator is used to implement user-defined (game) behavior and supports both <strong>JavaScript</strong> and <strong>TypeScript</strong> programming languages. Objects in the scene are driven by writing a scripting component and mounting it to a scene node.</p><p>During the component scripting process, developers can declare properties to map the variables that need to be adjusted in the script to the <strong>Inspector</strong> panel for game designers and artists to make adjustments. At the same time, it is also possible to register specific callback functions to help initialize, update or even destroy nodes.</p><h2 id="content" tabindex="-1">Content <a class="header-anchor" href="#content" aria-label="Permalink to &quot;Content&quot;">​</a></h2><ul><li><a href="./language-support">Programming Language Support</a></li><li><a href="./script-basics">Scripting Basics</a></li><li><a href="./usage">Using Scripts</a></li><li><a href="./reference-class">Advanced Scripting</a></li><li><a href="./../engine/event/">Event System</a></li><li><a href="./modules/">Modules</a></li><li><a href="./external-scripts">Plugin Scripts</a></li></ul><h2 id="more-reference" tabindex="-1">More Reference <a class="header-anchor" href="#more-reference" aria-label="Permalink to &quot;More Reference&quot;">​</a></h2><ul><li><a href="./log">Adding Logging within the Engine</a></li><li><a href="./reference/coding-standards">Recommended Coding Standards</a></li></ul>',7),s=[r];function o(c,l,d,p,g,h){return i(),t("div",null,s)}const f=e(n,[["render",o]]);export{u as __pageData,f as default};
