import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced-topics/jsb-swig.md","filePath":"zh/advanced-topics/jsb-swig.md","lastUpdated":1712305443000}'),t={name:"zh/advanced-topics/jsb-swig.md"},h=n(`<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>从 Cocos Creator 3.7.0 开始，我们将生成 JS 绑定代码的方式从 <a href="https://github.com/cocos/cocos-engine/tree/d08a11244d2a31da1aac7af7d2aa8f1b6152e30c/native/tools/bindings-generator" target="_blank" rel="noreferrer">bindings-generator</a> 改为 <a href="https://www.swig.org" target="_blank" rel="noreferrer">Swig</a>。 Swig 通过解析与 C++ 兼容的接口定义语言 (IDL) 的方式来生成胶水代码，此方式有较多好处 。 关于我们为什么改用 Swig，可以参考<a href="https://github.com/cocos/cocos-engine/issues/10792" target="_blank" rel="noreferrer">此 issue</a>。</p><h2 id="为引擎模块生成绑定代码" tabindex="-1">为引擎模块生成绑定代码 <a class="header-anchor" href="#为引擎模块生成绑定代码" aria-label="Permalink to &quot;为引擎模块生成绑定代码&quot;">​</a></h2><p>在 3.8 及以上的版本中，开发者不再需要手动触发绑定代码的生成，因为 CMake 会自动在编译过程中调用 SWIG 命令来生成绑定代码。如果生成失败, 请注意终端的输出日志。</p><p>需要注意: 如果为引擎添加或删除了 <code>.i</code> 文件，你需要重新生成工程来确保更新对 <code>.i</code> 文件的引用，并生成更新的绑定代码。</p><h2 id="为开发者的项目生成绑定代码" tabindex="-1">为开发者的项目生成绑定代码 <a class="header-anchor" href="#为开发者的项目生成绑定代码" aria-label="Permalink to &quot;为开发者的项目生成绑定代码&quot;">​</a></h2><ul><li><p>确保你已经安装了 NodeJS，版本号大于或等于 v8.9.4</p></li><li><p>打开终端 ( macOS / Linux) 或者命令提示符 ( Windows ),</p></li><li><p>创建一个用于存放自动绑定胶水代码的目录，例如： <code>/Users/abc/my-project/native/engine/common/Classes/bindings/auto</code></p></li><li><p>写一个 JS 配置文件</p><ul><li>创建一个 JS 配置文件, 路径例如： <code>/Users/abc/my-project/tools/swig-config/swig-config.js</code> ，内容为：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发者自己的模块定义配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// configList 是必须的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your_module_interface_0.i&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsb_your_module_interface_0_auto.cpp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your_module_interface_1.i&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsb_your_module_interface_1_auto.cpp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> projectRoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// interfaceDir 是可选的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> interfacesDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectRoot, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tools&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;swig-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bindingsOutDir 是可选的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bindingsOutDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectRoot, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;native&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;engine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Classes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bindings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    interfacesDir, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选参数, 如果没有指定，configList 中的路径必须为绝对路径或者相对于当前 swig-config.js 的相对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bindingsOutDir, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选参数，如果没有指定, configList 中的路径必须为绝对路径或者相对于当前 swig-config.js 的相对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configList </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必填参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>执行如下命令</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果当前终端或者命令提示符所在的目录不是在 &#39;/Users/abc/my-project/tools/swig-config&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 引擎的根目录</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/native/tools/swig-config/genbindings.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/abc/my-project/tools/swig-config/swig-config.js</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果你已经在 &#39;/Users/abc/my-project/tools/swig-config&#39; 目录, 你执行命令的时候可以不需要带上 -c 参数，例如：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/abc/my-project/tools/swig-config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 引擎的根目录</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/native/tools/swig-config/genbindings.js</span></span></code></pre></div></li></ul><h2 id="swig-接口定义文件" tabindex="-1">Swig 接口定义文件 <a class="header-anchor" href="#swig-接口定义文件" aria-label="Permalink to &quot;Swig 接口定义文件&quot;">​</a></h2><ul><li>在引擎的 <code>engine/native/tools/swig-config</code> 目录下有一个 <a href="https://github.com/cocos/cocos-engine/blob/1f928364f4cad22681e7830c53dc7da71a87d11f/native/tools/swig-config/swig-interface-template.i" target="_blank" rel="noreferrer">swig-interface-template.i</a> 模版文件。你可以拷贝其到自己的工程目录下并重命名。此模版文件中包含一些注释用于展示如何在 .i 文件中配置你的模块。你也可以参考在 <code>engine/native/tools/swig-config</code> 目录下引擎内部的 .i 文件，例如：参考 <code>scene.i</code> 或者 <code>assets.i</code> 来快速上手。</li><li>如果你使用 <code>Visual Studio Code</code>, 你可以安装 <code>Hong-She Liang</code> 开发的 <code>SWIG Language</code> 扩展，其可用于 .i 文件的语法高亮。</li><li>关于编写 .i 文件的更多详细信息，建议参考下面 <a href="#Tutorial">教程</a> 章节。</li></ul><h2 id="教程" tabindex="-1">教程 <a class="header-anchor" href="#教程" aria-label="Permalink to &quot;教程&quot;">​</a></h2><p>请访问 <a href="./jsb/swig/tutorial/">在 Cocos Creator 中的 Swig 工作流教程</a>, 其包含如何一步一步地为引擎内的新模块或用户工程模块配置绑定。</p>`,11),e=[h];function l(p,k,r,o,d,g){return a(),i("div",null,e)}const F=s(t,[["render",l]]);export{E as __pageData,F as default};
