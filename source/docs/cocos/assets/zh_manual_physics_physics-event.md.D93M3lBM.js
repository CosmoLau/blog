import{_ as t,c as s,o as i,a5 as l}from"./chunks/framework.CqnjdYks.js";const e="/docs/cocos/assets/isTrigger.DtIz6Cpa.jpg",c=JSON.parse('{"title":"物理事件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/physics/physics-event.md","filePath":"zh/manual/physics/physics-event.md"}'),a={name:"zh/manual/physics/physics-event.md"},n=l('<h1 id="物理事件" tabindex="-1">物理事件 <a class="header-anchor" href="#物理事件" aria-label="Permalink to &quot;物理事件&quot;">​</a></h1><h2 id="触发器与碰撞器" tabindex="-1">触发器与碰撞器 <a class="header-anchor" href="#触发器与碰撞器" aria-label="Permalink to &quot;触发器与碰撞器&quot;">​</a></h2><p><img src="'+e+`" alt="img"></p><p>碰撞组件属性 <strong>IsTrigger</strong> 决定了组件为触发器还是碰撞器。将 <strong>IsTrigger</strong> 设置为 <code>true</code> 时，组件为触发器。触发器只用于碰撞检测和触发事件，会被物理引擎忽略。默认设置 <code>false</code>，组件为碰撞器，可以结合<a href="./physics-rigidbody.html">刚体</a>产生碰撞效果。</p><p>两者的区别如下：</p><ul><li>触发器不会与其它触发器或者碰撞器做更精细的检测。</li><li>碰撞器与碰撞器会做更精细的检测，并会产生碰撞数据，如碰撞点、法线等。</li></ul><h2 id="触发事件" tabindex="-1">触发事件 <a class="header-anchor" href="#触发事件" aria-label="Permalink to &quot;触发事件&quot;">​</a></h2><p>触发事件目前包括以下三种：</p><table><thead><tr><th style="text-align:left;">事件</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>onTriggerEnter</code></td><td style="text-align:left;">触发开始时触发该事件</td></tr><tr><td style="text-align:left;"><code>onTriggerStay</code></td><td style="text-align:left;">触发保持时会频发触发该事件</td></tr><tr><td style="text-align:left;"><code>onTriggerExit</code></td><td style="text-align:left;">触发结束时触发该事件</td></tr></tbody></table><p>其中可产生触发事件的碰撞对为：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">静态刚体</th><th style="text-align:left;">运动学刚体</th><th style="text-align:left;">动力学刚体</th></tr></thead><tbody><tr><td style="text-align:left;">静态刚体</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">运动学刚体</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">动力学刚体</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr></tbody></table><blockquote><p><strong>注意</strong>：接收到触发事件的前提是两者都必须带有碰撞组件，并且至少有一个是触发器类型。当使用物理引擎为非 builtin 物理引擎时，还需要确保至少有一个物体带有的是非静态刚体（只有碰撞组件没有刚体组件的对象，视为持有静态刚体的对象），而 builtin 物理引擎则没有这个限制。</p></blockquote><h3 id="监听触发事件" tabindex="-1">监听触发事件 <a class="header-anchor" href="#监听触发事件" aria-label="Permalink to &quot;监听触发事件&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此处的节点添加了 BoxCollider 组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { BoxCollider, ITriggerEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BoxCollider);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onTriggerStay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onTriggerStay, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">private </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onTriggerStay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event: ITriggerEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="碰撞事件" tabindex="-1">碰撞事件 <a class="header-anchor" href="#碰撞事件" aria-label="Permalink to &quot;碰撞事件&quot;">​</a></h2><p>碰撞事件根据碰撞数据生成，静态类型的刚体之间不会产生碰撞数据。</p><p>目前碰撞事件包括以下三种：</p><table><thead><tr><th style="text-align:left;">事件</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>onCollisionEnter</code></td><td style="text-align:left;">碰撞开始时触发</td></tr><tr><td style="text-align:left;"><code>onCollisionStay</code></td><td style="text-align:left;">碰撞保持时不断的触发</td></tr><tr><td style="text-align:left;"><code>onCollisionExit</code></td><td style="text-align:left;">碰撞结束时触发</td></tr></tbody></table><p>其中可产生碰撞事件的碰撞对为：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">静态刚体</th><th style="text-align:left;">运动学刚体</th><th style="text-align:left;">动力学刚体</th></tr></thead><tbody><tr><td style="text-align:left;">静态刚体</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">运动学刚体</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">动力学刚体</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr></tbody></table><blockquote><p><strong>注意</strong>：接收到碰撞事件的前提是两者都必须带有碰撞组件、至少有一个是非静态刚体并且使用的是非 builtin 的物理引擎。</p></blockquote><h3 id="监听碰撞事件" tabindex="-1">监听碰撞事件 <a class="header-anchor" href="#监听碰撞事件" aria-label="Permalink to &quot;监听碰撞事件&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Collider, ICollisionEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collider);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听触发事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onCollisionStay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onCollision, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">private </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCollision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event: ICollisionEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>注意</strong>：目前碰撞事件以物理元素为单位，所有该元素上的碰撞器组件都会接收到碰撞事件。</p></blockquote><h2 id="触发事件和碰撞事件区别" tabindex="-1">触发事件和碰撞事件区别 <a class="header-anchor" href="#触发事件和碰撞事件区别" aria-label="Permalink to &quot;触发事件和碰撞事件区别&quot;">​</a></h2><ul><li>触发事件由触发器生成，碰撞事件根据碰撞数据生成。</li><li>触发事件可以由触发器和另一个触发器/碰撞器产生。</li><li>碰撞事件需要由两个碰撞器产生，并且至少有一个是动力学刚体。</li></ul><h2 id="连续碰撞检测" tabindex="-1">连续碰撞检测 <a class="header-anchor" href="#连续碰撞检测" aria-label="Permalink to &quot;连续碰撞检测&quot;">​</a></h2><p>相对于连续的真实世界，物理引擎的模拟实际上是离散的，这意味着物理引擎需要经过 1/60 秒或者其他定义的时间才可以采样一次。因此对于速度较快的物体，物理引擎可能无法正确检测到其碰撞结果，若要解决这种现象，可开启连续物理检测（CCD）来解决。</p><p>在引擎中开启连续碰撞检测的方法如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rigidBody</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RigidBody);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidBody.useCCD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>参考 <a href="./physics-ccd.html">连续碰撞检测</a> 以获取更详细的描述。</p><h2 id="触发规则" tabindex="-1">触发规则 <a class="header-anchor" href="#触发规则" aria-label="Permalink to &quot;触发规则&quot;">​</a></h2><p>碰撞事件的产生会根据刚体、碰撞体或触发器的类型不同而不同，这里将结果整理如下所示：</p><blockquote><p><strong>注意</strong>：此处标记的刚体都携带有碰撞体且在碰撞矩阵内配置为允许碰撞。</p></blockquote><table><thead><tr><th style="text-align:left;">-</th><th style="text-align:left;">静态刚体</th><th style="text-align:left;">运动学刚体</th><th style="text-align:left;">动力学刚体</th><th style="text-align:left;">碰撞体</th><th style="text-align:left;">触发器</th></tr></thead><tbody><tr><td style="text-align:left;">静态刚体</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">运动学刚体</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">动力学刚体</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">碰撞体</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">触发器</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p><strong>注意</strong>： PhysX 物理后端不支持同时为触发器的碰撞体间的碰撞响应。</p></blockquote>`,36),h=[n];function d(p,r,k,g,o,y){return i(),s("div",null,h)}const f=t(a,[["render",d]]);export{c as __pageData,f as default};
