import{_ as t}from"./chunks/animation-controller.DJ-srlds.js";import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.uQk9_EO2.js";const e="/docs/cocos/assets/add-animation-controller.Cv76eEO4.png",F=JSON.parse('{"title":"动画控制器（Animation Controller）组件参考","description":"","frontmatter":{},"headers":[],"relativePath":"zh/animation/marionette/animation-controller.md","filePath":"zh/animation/marionette/animation-controller.md","lastUpdated":1712305443000}'),l={name:"zh/animation/marionette/animation-controller.md"},h=n('<h1 id="动画控制器-animation-controller-组件参考" tabindex="-1">动画控制器（Animation Controller）组件参考 <a class="header-anchor" href="#动画控制器-animation-controller-组件参考" aria-label="Permalink to &quot;动画控制器（Animation Controller）组件参考&quot;">​</a></h1><p>动画控制器组件用于将 <a href="./animation-graph">动画图资源</a> 应用到对象上。</p><p>在 <strong>层级管理器</strong> 中选中需要应用动画图的节点，然后在 <strong>属性检查器</strong> 中点击下方的 <strong>添加组件 -&gt; Animation -&gt; Animation Controller</strong>，即可添加一个动画控制器组件到节点上。</p><p><img src="'+e+'" alt="add-animation-controller"></p><blockquote><p><strong>注意</strong>：因为 Marionette 动画系统与旧式动画系统不可同时使用，因此 <strong>动画控制器组件也不能和动画组件或者骨骼动画组件挂载在同一个节点上</strong>。</p></blockquote><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><p><img src="'+t+`" alt="animation-controller"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Graph</td><td style="text-align:left;">添加的 <a href="./animation-graph">动画图资源</a>，默认为空</td></tr></tbody></table><h2 id="程序化控制动画图" tabindex="-1">程序化控制动画图 <a class="header-anchor" href="#程序化控制动画图" aria-label="Permalink to &quot;程序化控制动画图&quot;">​</a></h2><p>动画控制器组件提供了一些方法用于在运行时控制动画图的 <a href="./animation-graph-basics">动画状态机</a>：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getVariables</code></td><td style="text-align:left;">获取所有的变量及变量名/类型/值等相关信息。</td></tr><tr><td style="text-align:left;"><code>setValue</code></td><td style="text-align:left;">设置变量的值。</td></tr><tr><td style="text-align:left;"><code>getValue</code></td><td style="text-align:left;">获取变量的值。</td></tr><tr><td style="text-align:left;"><code>getCurrentStateStatus</code></td><td style="text-align:left;">获取当前状态的信息。</td></tr><tr><td style="text-align:left;"><code>getCurrentClipStatuses</code></td><td style="text-align:left;">获取当前的动画剪辑的状态。</td></tr><tr><td style="text-align:left;"><code>getCurrentTransition</code></td><td style="text-align:left;">获取当前的状态过渡。</td></tr><tr><td style="text-align:left;"><code>getNextStateStatus</code></td><td style="text-align:left;">获取下一个状态的信息。</td></tr><tr><td style="text-align:left;"><code>getNextClipStatuses</code></td><td style="text-align:left;">获取下一个动画剪辑的状态。</td></tr><tr><td style="text-align:left;"><code>setLayerWeight</code></td><td style="text-align:left;">设置某个 <a href="./animation-graph-layer">动画图层级</a> 的权重。</td></tr></tbody></table><ul><li><p><strong>变量</strong> 控制</p><p>例如我们在 <a href="./animation-graph-panel#变量（variables）">动画图面板</a> 添加了多个变量，通过代码可以获取和修改变量的值，代码示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取动画控制器组件    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnimationController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animation.AnimationController)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取所有的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVariables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取名为 ‘vertical’ 的变量的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vertical</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vertical&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改名为 ‘vertical’ 的变量的值为 1.0。修改后，将会在下一帧 update 的时候计算条件过渡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animationController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vertical&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><blockquote><p><strong>注意</strong>：动画状态机的变量目前只能在 <a href="./animation-graph-panel#变量（variables）">动画图面板</a> 进行添加和删除。</p></blockquote></li><li><p>获取当前 <strong>状态</strong></p><p>获取第 0 层级状态机当前 <strong>状态</strong> 的归一化进度，代码示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MotionStateStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentStateStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states.progress);</span></span></code></pre></div></li><li><p>获取当前 <strong>过渡</strong></p><p>获取第 0 层级状态机即将发生的 <strong>过渡</strong> 的相关信息：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransitionStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transition.duration, transition.time)</span></span></code></pre></div></li></ul>`,12),r=[h];function p(k,o,d,g,E,c){return a(),i("div",null,r)}const u=s(l,[["render",p]]);export{F as __pageData,u as default};
