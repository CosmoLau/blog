import{_ as s,c as i,o as e,a4 as t}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/scrollview-content.iyau4JQn.png",n="/docs/cocos/assets/scrollview-inspector.paTJqZK6.png",l="/docs/cocos/assets/scrollview-event.BjN8HgFO.png",h="/docs/cocos/assets/scrollview-hierarchy.B1Th4pxC.png",m=JSON.parse('{"title":"ScrollView Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/scrollview.md","filePath":"en/ui-system/components/editor/scrollview.md","lastUpdated":1712305443000}'),o={name:"en/ui-system/components/editor/scrollview.md"},r=t('<h1 id="scrollview-component-reference" tabindex="-1">ScrollView Component Reference <a class="header-anchor" href="#scrollview-component-reference" aria-label="Permalink to &quot;ScrollView Component Reference&quot;">​</a></h1><p><strong>ScrollView</strong> is a container with a scroll function. It provides a way to browse more contents within a limited display area. Generally, ScrollView will be used along with the <strong>Mask</strong> component and the <strong>ScrollBar</strong> component can also be added to show the current offset location within the browsing content.</p><p><img src="'+a+'" alt="scrollview-content"></p><p><img src="'+n+'" alt="scrollview-inspector"></p><p>Click the <strong>Add Component</strong> button at the bottom of the <strong>Inspector</strong> panel and select <strong>UI/ScrollView</strong> to add the ScrollView component to the node.</p><p>To use <code>ScrollView</code>, please refer to the <a href="./__APIDOC__/en/class/ScrollView">ScrollView API</a> documentation and the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/06.scrollview" target="_blank" rel="noreferrer">ScrollView</a> scene of the test-cases-3d project.</p><h2 id="scrollview-properties" tabindex="-1">ScrollView Properties <a class="header-anchor" href="#scrollview-properties" aria-label="Permalink to &quot;ScrollView Properties&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;">BounceDuration</td><td style="text-align:left;">Floating point number, the time duration for bounce back. The value range is <strong>0-10</strong></td></tr><tr><td style="text-align:left;">Brake</td><td style="text-align:left;">Floating point number, the deceleration coefficient after scrolling. The value range is <strong>0-1</strong>. If set to 1, then the scrolling will stop immediately, if set to 0, then the scrolling will continue until the content border</td></tr><tr><td style="text-align:left;">CancelInnerEvents</td><td style="text-align:left;">If it is set to true, then the scroll behavior will cancel the touch events registered on the child node. The default setting is true</td></tr><tr><td style="text-align:left;">Content</td><td style="text-align:left;">A reference node for the inner content of the <strong>ScrollView</strong>. It could be a node containing a very large image or long texts.</td></tr><tr><td style="text-align:left;">Elastic</td><td style="text-align:left;">Boolean value, whether to bounce back or not while scroll to the border.</td></tr><tr><td style="text-align:left;">Horizontal</td><td style="text-align:left;">Boolean value, whether horizontal scroll is allowed or not</td></tr><tr><td style="text-align:left;">HorizontalScrollBar</td><td style="text-align:left;">A reference node for creating a scroll bar showing the horizontal position of the content</td></tr><tr><td style="text-align:left;">Inertia</td><td style="text-align:left;">Is there an accelerating velocity when scrolling</td></tr><tr><td style="text-align:left;">ScrollEvents</td><td style="text-align:left;">Default list type is null. Each event added by the user is composed of the node reference, component name and a response function. Please see the <strong>ScrollView Event</strong> section below for details</td></tr><tr><td style="text-align:left;">Vertical</td><td style="text-align:left;">Boolean value, whether vertical scroll is allowed or not</td></tr><tr><td style="text-align:left;">VerticalScrollBar</td><td style="text-align:left;">A reference node for creating a scroll bar showing vertical position of the contents</td></tr></tbody></table><h3 id="scrollview-event" tabindex="-1">ScrollView Event <a class="header-anchor" href="#scrollview-event" aria-label="Permalink to &quot;ScrollView Event&quot;">​</a></h3><p><img src="'+l+'" alt="scrollview-event"></p><p>For event structure you can refer to the <a href="./button">Button</a> documentation.</p><p>The ScrollView event callback will have two parameters, the first one is the ScrollView itself and the second one is the event type of ScrollView.</p><h3 id="scrollbar-setting" tabindex="-1">ScrollBar Setting <a class="header-anchor" href="#scrollbar-setting" aria-label="Permalink to &quot;ScrollBar Setting&quot;">​</a></h3><p>ScrollBar is optional. You can choose to set either a Horizontal ScrollBar or a Vertical ScrollBar or of course set them both.</p><p>To build a connection, you can drag a node with the ScrollBar component in the <strong>Hierarchy</strong> over to the corresponding field in ScrollView.</p><h2 id="detailed-explanation" tabindex="-1">Detailed Explanation <a class="header-anchor" href="#detailed-explanation" aria-label="Permalink to &quot;Detailed Explanation&quot;">​</a></h2><p>The ScrollView component can only work with the specified content node. It calculates location information during scrolling using both the designated scroll direction and the length of the content node in this direction.</p><p>The Content node can also set up the auto resize by adding a <code>Widget</code>, or it can arrange the layout of child nodes by adding a <code>Layout</code>, but these two components should not be added to a node at the same time to avoid unintentional consequences.</p><p>Normally a ScrollView node tree resembles the following:</p><p><img src="'+h+`" alt="scrollview-hierarchy"></p><p>The <code>view</code> here is used to define a scroll area that can be displayed. As a result, the Mask will normally be added to the <code>view</code>. Contents that can scroll can be put in the content node or added to its child node.</p><h2 id="add-a-callback-through-the-script-code" tabindex="-1">Add a callback through the script code <a class="header-anchor" href="#add-a-callback-through-the-script-code" aria-label="Permalink to &quot;Add a callback through the script code&quot;">​</a></h2><h3 id="method-one" tabindex="-1">Method one <a class="header-anchor" href="#method-one" aria-label="Permalink to &quot;Method one&quot;">​</a></h3><p>The event callback added by this method is the same as the event callback added by the editor, all added by code. First you need to construct a <code>EventHandler</code> object, and then set the corresponding <code>target</code>, <code>component</code>, <code>handler</code> and <code>customEventData</code> parameters.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, ScrollView, EventHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scrollViewEventHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This node is the node to which your event handler code component belongs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scrollViewEventHandler.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the script class name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scrollViewEventHandler.component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scrollViewEventHandler.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scrollViewEventHandler.customEventData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foobar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scrollview</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ScrollView);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scrollview.scrollEvents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scrollViewEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scrollview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // here scrollview is a ScrollView component object instance</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // here the eventType === ScrollView.EventType enum</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // here the customEventData parameter is equal to the &quot;foobar&quot; you set before</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="method-two" tabindex="-1">Method two <a class="header-anchor" href="#method-two" aria-label="Permalink to &quot;Method two&quot;">​</a></h3><p>By <code>scrollview.node.on(&#39;scroll-to-top&#39;, ...)</code> way to add.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Suppose we add an event handler callback to the onLoad method of a component and handle the event in the callback function:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, ScrollView } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ScrollView)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    scrollview</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScrollView</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scrollview.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scroll-to-top&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scrollView</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScrollView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The callback parameter is the ScrollView component, note that events registered this way cannot pass customEventData.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Similarly, you can register events such as <code>scrolling</code>, <code>touch-up</code>, <code>scroll-began</code>, etc. The parameters of the callback function for these events are consistent with the parameters of <code>scroll-to-top</code>.</p>`,29),p=[r];function c(d,k,E,g,y,F){return e(),i("div",null,p)}const w=s(o,[["render",c]]);export{m as __pageData,w as default};
