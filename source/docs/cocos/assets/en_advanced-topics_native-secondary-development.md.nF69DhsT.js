import{_ as e,c as i,o,a4 as t}from"./chunks/framework.uQk9_EO2.js";const g=JSON.parse('{"title":"Native Platform Secondary Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced-topics/native-secondary-development.md","filePath":"en/advanced-topics/native-secondary-development.md","lastUpdated":1712305443000}'),a={name:"en/advanced-topics/native-secondary-development.md"},n=t(`<h1 id="native-platform-secondary-development-guide" tabindex="-1">Native Platform Secondary Development Guide <a class="header-anchor" href="#native-platform-secondary-development-guide" aria-label="Permalink to &quot;Native Platform Secondary Development Guide&quot;">​</a></h1><p>If you need to integrate third-party SDK libraries or modify, add or remove C++, Objective-C, or Java code files, the following information can help you do it faster.</p><h2 id="native-project-directories" tabindex="-1">Native Project Directories <a class="header-anchor" href="#native-project-directories" aria-label="Permalink to &quot;Native Project Directories&quot;">​</a></h2><p>When you click the <strong>Build</strong> button, three native platform-related folders are generated.</p><p>There is 3 directories related to native project.</p><h3 id="common-directory" tabindex="-1">Common Directory <a class="header-anchor" href="#common-directory" aria-label="Permalink to &quot;Common Directory&quot;">​</a></h3><p>Location: <code>native/engine/common</code></p><p>This directory is used to store common content such as engine library configurations and some third-party libraries that are used by all platforms.</p><blockquote><p>The code in this directory is mostly written in C/C++.</p></blockquote><h3 id="native-platforms-directories" tabindex="-1">Native Platforms Directories <a class="header-anchor" href="#native-platforms-directories" aria-label="Permalink to &quot;Native Platforms Directories&quot;">​</a></h3><p>Location: <code>native/engine/&lt;current_build_platform&gt;</code></p><p>This directory is used to store platform-specific content. For example:</p><ul><li>native/engine/android</li><li>native/engine/ios</li><li>native/engine/win64</li><li>native/engine/mac</li></ul><blockquote><p><code>win64</code> is used for Windows, and <code>win32</code> is no longer supported. Only <code>win64</code> applications are supported for release by Cocos Creator.</p></blockquote><h3 id="project-directory" tabindex="-1">Project Directory <a class="header-anchor" href="#project-directory" aria-label="Permalink to &quot;Project Directory&quot;">​</a></h3><p>Location: <code>build/&lt;current_build_platform&gt;</code></p><p>This directory contains the final generated native projects used for compilation, debugging, and publishing. For example:</p><ul><li>build/android</li><li>build/ios</li><li>build/windows</li><li>build/mac</li></ul><p>During each build, the engine combines the common directory, the native platform directory, and the resources and scripts from the Cocos Creator project to generate the project directory.</p><p>The code and related configurations in the project directory reference the files in the corresponding native platform directory and the common directory. If you make changes to the corresponding parts in the IDE, the files in the referenced directories will be modified accordingly.</p><p><strong>Note:</strong> The <code>native/engine/ios/info.plist</code> and <code>native/engine/mac/info.plist</code> files copied due to the mechanism of <code>CMake</code>. If you want to modify <code>info.plist</code>, please be cautious.</p><p>The project directory contains the following contents:</p><ul><li><code>assets</code>: <code>data</code> A symbolic link to the data directory, used for compatibility across platforms.</li><li><code>data</code>: The contents generated from the resources and scripts in the Cocos Creator project.</li><li><code>proj</code>: The native platform project for the current build, used for compilation, debugging, and publishing in the corresponding platform&#39;s IDE (e.g., Xcode, Android Studio).</li><li><code>cocos.compile.config.json</code>: The build options configuration used for this build.</li></ul><h2 id="native-project-customization" tabindex="-1">Native Project Customization <a class="header-anchor" href="#native-project-customization" aria-label="Permalink to &quot;Native Project Customization&quot;">​</a></h2><p>Sometimes, due to project requirements, we may need to modify, add, or remove native platform-related source code files, integrate third-party SDKs, or modify project configurations. These tasks are referred to as project customization development.</p><p>Below, we will categorize different scenarios and explain how to perform the operations.</p><h3 id="modifying-engine-code" tabindex="-1">Modifying Engine Code <a class="header-anchor" href="#modifying-engine-code" aria-label="Permalink to &quot;Modifying Engine Code&quot;">​</a></h3><p>Please refer to the <a href="./engine-customization">Engine Customization Workflow</a>。</p><h3 id="modifying-project-code" tabindex="-1">Modifying Project Code <a class="header-anchor" href="#modifying-project-code" aria-label="Permalink to &quot;Modifying Project Code&quot;">​</a></h3><p>If you need to modify project-related code, simply locate the corresponding files and make the necessary changes. Once modified, you can compile the project without any additional configuration.</p><h3 id="adding-removing-code-files" tabindex="-1">Adding/Removing Code Files <a class="header-anchor" href="#adding-removing-code-files" aria-label="Permalink to &quot;Adding/Removing Code Files&quot;">​</a></h3><p>Adding or removing code files involves modifying the build configuration, which may differ for different programming languages and platforms. Let&#39;s categorize them as follows.</p><h4 id="adding-removing-c-files" tabindex="-1">Adding/Removing C++ Files <a class="header-anchor" href="#adding-removing-c-files" aria-label="Permalink to &quot;Adding/Removing C++ Files&quot;">​</a></h4><p>If you need to add or remove project-related C++ files, you need to modify the corresponding <code>CMakeLists.txt</code> file.</p><p>If the C++ files to be added or removed are in the <code>native/engine/common/</code> directory, you need to modify <code>native/engine/common/CMakeLists.txt</code>.</p><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list(APPEND CC_COMMON_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${CMAKE_CURRENT_LIST_DIR}/Classes/Game.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${CMAKE_CURRENT_LIST_DIR}/Classes/Game.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>As shown in the code above, find the corresponding location and add or remove your own source code.</p><p>If the code files to be added or removed are platform-specific C++ files, you need to modify <code>native/engine/&lt;platform_name&gt;/CMakeLists.txt</code>. Refer to the code below:</p><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">include(\${CC_PROJECT_DIR}/../common/CMakeLists.txt)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">//Add your own C++ files here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list(APPEND CC_PROJ_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${CMAKE_CURRENT_LIST_DIR}/MyTest2.hpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${CMAKE_CURRENT_LIST_DIR}/MyTest2.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="adding-removing-objective-c-files" tabindex="-1">Adding/Removing Objective-C Files <a class="header-anchor" href="#adding-removing-objective-c-files" aria-label="Permalink to &quot;Adding/Removing Objective-C Files&quot;">​</a></h4><p>The management of Objective-C files in the iOS/macOS native projects generated by Cocos Creator is exactly the same as for C++. Please refer to the previous content.</p><h4 id="adding-removing-java-files" tabindex="-1">Adding/Removing Java Files <a class="header-anchor" href="#adding-removing-java-files" aria-label="Permalink to &quot;Adding/Removing Java Files&quot;">​</a></h4><p>Java is based on a path-based package management mechanism, so adding or removing Java files does not require any special handling.</p><h3 id="integrating-c-oc-libraries" tabindex="-1">Integrating C++/OC Libraries <a class="header-anchor" href="#integrating-c-oc-libraries" aria-label="Permalink to &quot;Integrating C++/OC Libraries&quot;">​</a></h3><p>If the library you want to integrate is written in C++ or Objective-C, place the SDK in the <code>native/engine/common/</code> or <code>native/engine/&lt;platform_name&gt;/</code> directory depending on the situation, and modify the corresponding <code>CMakeLists.txt</code> in the respective directory.</p><p>Libraries written by Objective-C should only be placed in the platform-specific directory and should not be placed in <code>native/engine/common/</code>, as it may cause compilation errors on other native platforms.</p><p>Most C++ SDKs provide their own <code>CMakeLists.txt</code>, so you can integrate them by including the files.</p><p>For CMake configuration, you can refer to the existing <code>CMakeLists.txt</code> in the project for modification. For more details on using CMake, you can refer to <a href="./../advanced-topics/cmake-learning">Introduce to CMake Usage</a>.</p><h3 id="integrating-jar-libraries" tabindex="-1">Integrating Jar Libraries <a class="header-anchor" href="#integrating-jar-libraries" aria-label="Permalink to &quot;Integrating Jar Libraries&quot;">​</a></h3><p>If the library you want to integrate is written by Java and specific to the Android platform, simply place it in the corresponding <code>native/engine/android/</code> directory and configure <code>native/android/build.gradle</code>.</p><h2 id="interacting-with-native" tabindex="-1">Interacting with Native <a class="header-anchor" href="#interacting-with-native" aria-label="Permalink to &quot;Interacting with Native&quot;">​</a></h2><p>For newly created native methods or newly integrated native SDKs that you want to export for use in script code, you can use the following approaches.</p><h3 id="using-jsbbridge" tabindex="-1">Using JsbBridge <a class="header-anchor" href="#using-jsbbridge" aria-label="Permalink to &quot;Using JsbBridge&quot;">​</a></h3><p>If you need to call simple and infrequent functions, you can use the <code>JsbBridge</code> mechanism for communication.</p><ul><li><a href="./js-java-bridge">JavaScript and Java Communication using JsbBridge</a></li><li><a href="./js-oc-bridge">JavaScript and Objective-C Communication using JsbBridge</a></li></ul><h3 id="using-jsb-auto-binding" tabindex="-1">Using JSB Auto Binding <a class="header-anchor" href="#using-jsb-auto-binding" aria-label="Permalink to &quot;Using JSB Auto Binding&quot;">​</a></h3><p>For frequent C++ function calls or batch C++ API exports to the script layer, it is recommended to use the <a href="./(jsb-auto-binding.md)">JSB Automatic Binding</a> mechanism for script-native interaction.</p><h3 id="using-reflection" tabindex="-1">Using Reflection <a class="header-anchor" href="#using-reflection" aria-label="Permalink to &quot;Using Reflection&quot;">​</a></h3><p>Communication based on the reflection mechanism in Java and Objective-C can also be used for convenient script-native interaction. However, due to stricter review rules on iOS, there is a risk of review failure when using reflection mechanisms on iOS.</p><ul><li><a href="./java-reflection">JavaScript and Android Communication with Reflection</a></li><li><a href="./oc-reflection">JavaScript and iOS/macOS Communication with Reflection</a></li></ul><h2 id="source-code-version-control" tabindex="-1">Source Code Version Control <a class="header-anchor" href="#source-code-version-control" aria-label="Permalink to &quot;Source Code Version Control&quot;">​</a></h2><p>If your team uses source code version control software for collaborative work, the <code>native/</code> directory should be included in the version control.</p><p>All project customization work should be done in the <code>/</code> directory as much as possible, so that the <code>build/</code> directory can be deleted at any time and does not need to be included in the source code version control.</p><p>For special project requirements that cannot be achieved within the <code>native/</code> directory, modifications to the content under the <code>build/</code> directory are required. In this case, the corresponding folders should be included in version control based on the requirements.</p>`,64),r=[n];function s(d,c,l,h,p,m){return o(),i("div",null,r)}const f=e(a,[["render",s]]);export{g as __pageData,f as default};
