import{_ as s,v as n,b as a,R as l}from"./chunks/framework.5ffcbaff.js";const A=JSON.parse('{"title":"使用计时器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/scripting/scheduler.md","filePath":"zh/manual/scripting/scheduler.md"}'),p={name:"zh/manual/scripting/scheduler.md"},o=l(`<h1 id="使用计时器" tabindex="-1">使用计时器 <a class="header-anchor" href="#使用计时器" aria-label="Permalink to &quot;使用计时器&quot;">​</a></h1><p>在 Cocos Creator 中，我们为组件提供了方便的计时器。</p><p>也许有人会认为 <code>setTimeout</code> 和 <code>setInterval</code> 就足够了，开发者当然可以使用这两个函数，不过我们更推荐使用计时器，因为它更加强大灵活，和组件也结合得更好！</p><p>下面来看看它的具体使用方式：</p><ol><li><p>开始一个计时器</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里的 this 指向 component</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面这个计时器将每隔 5s 执行一次。</p></li><li><p>更灵活的计时器</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 以秒为单位的时间间隔</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> interval </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重复次数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> repeat </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开始延时</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> delay </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里的 this 指向 component</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> interval</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> repeat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> delay)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面的计时器将在 10 秒后开始计时，每 5 秒执行一次回调，重复 <strong>3 + 1</strong> 次。</p></li><li><p>只执行一次的计时器（快捷方式）</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">scheduleOnce</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里的 this 指向 component</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面的计时器将在两秒后执行一次回调函数，之后就停止计时。</p></li><li><p>取消计时器</p><p>开发者可以使用回调函数本身来取消计时器：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">callback</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在第六次执行回调时取消这个计时器</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">unschedule</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ol><blockquote><p><strong>注意</strong>：组件的计时器调用回调时，会将回调的 <code>this</code> 指定为组件本身，因此回调中可以直接使用 <code>this</code>。</p></blockquote><p>下面是 Component 中所有关于计时器的函数：</p><ul><li>schedule：开始一个计时器</li><li>scheduleOnce：开始一个只执行一次的计时器</li><li>unschedule：取消一个计时器</li><li>unscheduleAllCallbacks：取消这个组件的所有计时器</li></ul><p>这些 API 的详细描述都可以在我们的 API 文档中找到。</p><p>除此之外，如果需要每一帧都执行一个函数，请直接在 Component 中添加 <code>update</code> 函数，这个函数将默认被每帧调用，这在 <a href="./life-cycle-callbacks.html#update">生命周期文档</a> 中有详细描述。</p><h3 id="注意-node-不包含计时器相关-api" tabindex="-1">注意：<code>Node</code> 不包含计时器相关 API <a class="header-anchor" href="#注意-node-不包含计时器相关-api" aria-label="Permalink to &quot;注意：\`Node\` 不包含计时器相关 API&quot;">​</a></h3>`,11),e=[o];function t(c,r,F,y,i,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
