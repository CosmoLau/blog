import{_ as s,v as a,b as l,R as n}from"./chunks/framework.5ffcbaff.js";const A=JSON.parse('{"title":"GLSL 语法简介","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/glsl.md","filePath":"zh/manual/shader/glsl.md"}'),o={name:"zh/manual/shader/glsl.md"},p=n(`<h1 id="glsl-语法简介" tabindex="-1">GLSL 语法简介 <a class="header-anchor" href="#glsl-语法简介" aria-label="Permalink to &quot;GLSL 语法简介&quot;">​</a></h1><p>GLSL 是为图形计算量身定制的用于编写着色器的语言，它包含一些针对向量和矩阵操作的特性，使渲染管线具有可编程性。本章主要介绍在编写 Shader 时常用的一些语法，包括以下几个方面：</p><ul><li>变量</li><li>语句</li><li>限定符</li><li>预处理宏定义</li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="变量及变量类型" tabindex="-1">变量及变量类型 <a class="header-anchor" href="#变量及变量类型" aria-label="Permalink to &quot;变量及变量类型&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">变量类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">Cocos Shader 中的默认值</th><th style="text-align:left;">Cocos Shader 中的可选项</th></tr></thead><tbody><tr><td style="text-align:left;">bool</td><td style="text-align:left;">布尔型标量数据类型</td><td style="text-align:left;">false</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">int/ivec2/ivec3/ivec4</td><td style="text-align:left;">包含 1/2/3/4 个整型向量</td><td style="text-align:left;">0/[0, 0]/[0, 0, 0]/[0, 0, 0, 0]</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">float/vec2/vec3/vec4</td><td style="text-align:left;">包含 1，2，3，4 个浮点型向量</td><td style="text-align:left;">0/[0, 0]/[0, 0, 0]/[0, 0, 0, 0]</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">sampler2D</td><td style="text-align:left;">表示 2D 纹理</td><td style="text-align:left;"><strong>default</strong></td><td style="text-align:left;">black、grey、white、normal、default</td></tr><tr><td style="text-align:left;">samplerCube</td><td style="text-align:left;">表示立方体纹理</td><td style="text-align:left;"><strong>default-cube</strong></td><td style="text-align:left;">black-cube、white-cube、default-cube</td></tr><tr><td style="text-align:left;">mat[2..3]</td><td style="text-align:left;">表示 2x2 和 3x3 的矩阵</td><td style="text-align:left;">不可用</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">mat4</td><td style="text-align:left;">表示 4x4 的矩阵</td><td style="text-align:left;">[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="标量" tabindex="-1">标量 <a class="header-anchor" href="#标量" aria-label="Permalink to &quot;标量&quot;">​</a></h3><p>构造标量的方式和 C 语言一致：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> floatValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> booleanValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span></code></pre></div><h3 id="向量" tabindex="-1">向量 <a class="header-anchor" href="#向量" aria-label="Permalink to &quot;向量&quot;">​</a></h3><p>构造向量时的规则如下：</p><ul><li>若向向量构造器提供了一个标量，则向量的所有值都会设定为该标量值</li><li>若提供多个标量值或向量，则从左到右使用提供的值赋值。前提是标量或向量的数量之和要等于向量构造器的数量</li></ul><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> myVec4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">              // myVec4 = {1.0, 1.0, 1.0, 1.0}</span></span>
<span class="line"><span style="color:#C792EA;">vec2</span><span style="color:#A6ACCD;"> myVec2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec2</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">         // myVec2 = {0.5, 0.5}</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> newVec4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> myVec2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">// newVec4 = {1.0, 1.0, 0.5, 0.5}</span></span></code></pre></div><p>向量可以通过 <code>r, g, b, a</code> 或 <code>x, y, z, w</code> 进行访问，也可以同时访问多个角标：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> myVec4_0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // myVec4_0 = { 1.0, 1.0, 1.0, 1.0 }</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> myVec4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4.0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // myVec4 = { 1.0, 2.0, 3.0, 4.0 }</span></span>
<span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myVec4.x</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       // x = 1.0;</span></span>
<span class="line"><span style="color:#C792EA;">vec3</span><span style="color:#A6ACCD;"> myVec3_0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myVec4.xyz</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // myVec3_0 = { 1.0, 2.0, 3.0 }</span></span>
<span class="line"><span style="color:#C792EA;">vec3</span><span style="color:#A6ACCD;"> myVec3_1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myVec4.rgb</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // myVec3_1 = { 1.0, 2.0, 3.0 }</span></span>
<span class="line"><span style="color:#C792EA;">vec3</span><span style="color:#A6ACCD;"> myVec3_2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myVec4.zyx</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // myVec3_2 = { 3.0, 2.0, 1.0 }</span></span>
<span class="line"><span style="color:#C792EA;">vec3</span><span style="color:#A6ACCD;"> myVec3_3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myVec4.xxx</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // myVec3_3 = { 1.0, 1.0, 1.0 }</span></span></code></pre></div><h3 id="矩阵" tabindex="-1">矩阵 <a class="header-anchor" href="#矩阵" aria-label="Permalink to &quot;矩阵&quot;">​</a></h3><p>在 GLSL 内可构造 mat[2..4] 来表示 2 阶到 4 阶的矩阵。</p><p>矩阵构造有如下的规则：</p><ul><li>若只为矩阵构造器提供了一个标量，则该值会构造矩阵对角线上的值</li><li>矩阵可以由多个向量构造</li><li>矩阵可以由单个标量从左到右进行构造</li></ul><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">mat4</span><span style="color:#A6ACCD;"> marixt4x4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mat4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // marixt4x4 = { 1.0, 0.0, 0.0, 0.0, </span></span>
<span class="line"><span style="color:#89DDFF;">                            </span><span style="color:#676E95;font-style:italic;">//                0.0, 1.0, 0.0, 0.0 </span></span>
<span class="line"><span style="color:#89DDFF;">                            </span><span style="color:#676E95;font-style:italic;">//                0.0, 0.0, 1.0, 0.0                    </span></span>
<span class="line"><span style="color:#89DDFF;">                            </span><span style="color:#676E95;font-style:italic;">//                0.0, 0.0, 0.0, 1.0 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">vec2</span><span style="color:#A6ACCD;"> col1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec2</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">vec2</span><span style="color:#A6ACCD;"> col2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec2</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">mat2</span><span style="color:#A6ACCD;"> matrix2x2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mat2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">coll1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> col2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// GLSL 是列矩阵存储，因此构造时，构造器会按照列顺序进行填充</span></span>
<span class="line"><span style="color:#C792EA;">mat3</span><span style="color:#A6ACCD;"> matrix3x3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mat3</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">   // 第一列</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">   // 第二列</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 第三列</span></span></code></pre></div><blockquote><p><strong>注意</strong>：为避免 implicit padding，引擎规定若要使用 Uniform 限定符的矩阵，必须是 4 阶矩阵，2 阶和 3 阶的矩阵不可作为 Uniform 变量。</p></blockquote><p>矩阵的访问：</p><p>矩阵可以通过索引访问不同的列：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">mat2</span><span style="color:#A6ACCD;"> matrix2x2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mat2</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> myVec4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matrix2x2</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> matrix2x2</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#C792EA;">vec2</span><span style="color:#A6ACCD;"> myVec2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> matrix2x2</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 访问第一列的第一个元素</span></span>
<span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> matrix2x2</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">][</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">matrix2x2</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">][</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h3><p>结构体的形成和 C 语言类似，可由不同数据类型聚合而成：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> myStruct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  vec4 position</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  vec4 color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  vec2 uv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>构造结构体的代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">myStruct structVar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myStruct</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec2</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">));</span></span></code></pre></div><p>结构体支持赋值（=）和比较（==，!=）运算符，但要求两个结构体拥有相同的类型且组件分量（component-wise）都必须相同。</p><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><p>数组的用法和 C 语言类似，规则如下：</p><ul><li>数组必须声明长度</li><li>数组不能在声明的同时初始化</li><li>数组必须由常量表达式初始化</li><li>数组不能用 <code>const</code> 修饰</li><li>不支持多维数组</li></ul><p>数组声明和初始化的代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h2><h3 id="控制流程" tabindex="-1">控制流程 <a class="header-anchor" href="#控制流程" aria-label="Permalink to &quot;控制流程&quot;">​</a></h3><p>GLSL 支持标准的 C/C++ 控制流程，包括：</p><ul><li><code>if-esle</code>/<code>switch-case</code></li><li><code>for</code>/<code>while</code>/<code>do-while</code></li><li><code>break</code>/<code>continue</code>/<code>return</code></li><li>没有 <code>goto</code>，若要跳出可使用 <code>discard</code>。该语句仅在片元着色器下有效，需要注意的是使用该语句会导致管线放弃当前片元，不会写入帧缓存</li></ul><p><code>if-else</code> 的用法和 C 语言一致，代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v_uvMode </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uv</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> v_uv0 </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v_uvSizeOffset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v_uvSizeOffset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zw</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v_uvMode </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uv</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fract</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">v_uv0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v_uvSizeOffset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v_uvSizeOffset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zw</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v_uvMode </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uv</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">evalSlicedUV</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">v_uv0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v_uvSizeOffset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v_uvSizeOffset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zw</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uv</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> v_uv0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 GLSL 中，循环变量必须是常量或者编译时已知，代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10.</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">++){</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">   ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>错误示例：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10.</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 错误，value 不为常量</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">++){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">   ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><p>GLSL 的函数由 <strong>返回值</strong>、<strong>函数名</strong> 和 <strong>参数</strong> 构成，其中返回值和函数名是必须的。若无返回值，需要使用 <code>void</code> 代替。</p><blockquote><p><strong>注意</strong>：GLSL 的函数不能递归。</p></blockquote><p>代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scaleMatrix</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inout mat4 </span><span style="color:#A6ACCD;font-style:italic;">m</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">xyz</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*=</span><span style="color:#F07178;"> s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">xyz</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*=</span><span style="color:#F07178;"> s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">xyz</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*=</span><span style="color:#F07178;"> s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="限定符" tabindex="-1">限定符 <a class="header-anchor" href="#限定符" aria-label="Permalink to &quot;限定符&quot;">​</a></h2><h3 id="存储限定符" tabindex="-1">存储限定符 <a class="header-anchor" href="#存储限定符" aria-label="Permalink to &quot;存储限定符&quot;">​</a></h3><p>存储限定符用于描述变量在管线中的作用。</p><table><thead><tr><th style="text-align:left;">限定符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">&lt; none:default &gt;</td><td style="text-align:left;">无限定符或者使用 <code>default</code>，常用语局部变量，函数参数</td></tr><tr><td style="text-align:left;">const</td><td style="text-align:left;">编译时为常量或作为参数时只读</td></tr><tr><td style="text-align:left;">attribute</td><td style="text-align:left;">应用程序和顶点着色器间通信，用于确定顶点格式</td></tr><tr><td style="text-align:left;">uniform</td><td style="text-align:left;">应用程序和着色器之间交互数据。在顶点着色器和片元着色器中保持一致</td></tr><tr><td style="text-align:left;">varying</td><td style="text-align:left;">顶点着色器传输给片元着色器的插值</td></tr></tbody></table><h4 id="uniform" tabindex="-1">uniform <a class="header-anchor" href="#uniform" aria-label="Permalink to &quot;uniform&quot;">​</a></h4><p>在一个渲染过程内声明的 <code>uniform</code> 不能重复。例如在顶点着色器中定义了变量 <code>variableA</code>，<code>variableA</code> 也会存在于片元着色器且值相同，那么也就是 <code>variableA</code> 不能在片元着色器中再次定义。</p><p>引擎不支持离散声明的 <code>uniform</code> 变量，必须使用 UBO 并保持内存对齐，以避免 implicit padding。</p><h4 id="varying" tabindex="-1">varying <a class="header-anchor" href="#varying" aria-label="Permalink to &quot;varying&quot;">​</a></h4><p><code>varying</code> 是由顶点着色器输出并传输给片元着色器的变量。在管线的作用下，变量值并不会和顶点着色器输出的保持一致，而是由管线进行插值，这就可能会出现顶点输出的法线没有归一化的情况。此时需要手动归一化，代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 归一化法线</span></span>
<span class="line"><span style="color:#C792EA;">vec3</span><span style="color:#A6ACCD;"> normal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">normalize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v_normal</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="参数限定符" tabindex="-1">参数限定符 <a class="header-anchor" href="#参数限定符" aria-label="Permalink to &quot;参数限定符&quot;">​</a></h3><p>GLSL 中函数的参数限定符包括以下几种：</p><table><thead><tr><th style="text-align:left;">限定符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">&lt; none:in &gt;</td><td style="text-align:left;">缺省限定符，和 C 语言的值传递类似，指明传入的参数传递的是值，函数内不会修改传入的值</td></tr><tr><td style="text-align:left;">inout</td><td style="text-align:left;">类似于 C 语言的引用，参数的值会传入函数并返回函数内修改的值</td></tr><tr><td style="text-align:left;">out</td><td style="text-align:left;">参数的值不会传入函数，由函数内部修改并返回修改后的值</td></tr></tbody></table><h3 id="精度限定符" tabindex="-1">精度限定符 <a class="header-anchor" href="#精度限定符" aria-label="Permalink to &quot;精度限定符&quot;">​</a></h3><p>GLSL 引入了精度限定符，用于指定整型或浮点型变量的精度。精度限定符可使着色器的编写者明确定义着色器变量计算时使用的精度。在 在 Shader 头部声明的精度应用于整个 Shader，是所有基于浮点型的变量的默认精度，同时也可以定义单个变量的精度。在 Shader 中如果没有指定默认精度，则所有的整型和浮点型变量都采用高精度计算。</p><p>GLSL 支持的精度限定符包括以下几种：</p><table><thead><tr><th style="text-align:left;">限定符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">highp</td><td style="text-align:left;">高精度。<br>浮点型精度范围为 [-2<sup>62</sup>, 2<sup>62</sup>]<br>整型精度范围为 [-2<sup>16</sup>, 2<sup>16</sup>]。</td></tr><tr><td style="text-align:left;">mediump</td><td style="text-align:left;">中精度。<br>浮点型精度范围为 [-2<sup>14</sup>, 2<sup>14</sup>]<br>整型精度范围为 [-2<sup>10</sup>, 2<sup>10</sup>]。</td></tr><tr><td style="text-align:left;">lowp</td><td style="text-align:left;">低精度。<br>浮点型精度范围为 [-2<sup>8</sup>, 2<sup>8</sup>]<br>整型精度范围为 [-2<sup>8</sup>, 2<sup>8</sup>]。</td></tr></tbody></table><p>代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">highp </span><span style="color:#C792EA;">mat4</span><span style="color:#A6ACCD;"> cc_matWorld</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">mediump </span><span style="color:#C792EA;">vec2</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">lowp </span><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> cc_shadowColor</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="预处理宏定义" tabindex="-1">预处理宏定义 <a class="header-anchor" href="#预处理宏定义" aria-label="Permalink to &quot;预处理宏定义&quot;">​</a></h2><p>GLSL 允许定义和 C 语言类似的宏定义。</p><p>预处理宏定义允许着色器定义多样化的动态分支，确定最终的渲染效果。</p><p>在 GLSL 中使用预处理宏定义的代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#undef</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#if</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifdef</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#else</span></span>
<span class="line"><span style="color:#A6ACCD;">#elif</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><p>下方代码示例若 <code>USE_VERTEX_COLOR</code> 条件为真，则声明一个名为 <code>v_color</code> 的四维向量：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">USE_VERTEX_COLOR</span></span>
<span class="line"><span style="color:#A6ACCD;">  in vec4 v_color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><p>预处理宏定义和引擎的交互部分可参考： <a href="./macros.html">预处理宏定义</a></p><blockquote><p><strong>注意</strong>：在引擎中，材质的预处理宏定义在材质初始化完成后便不能修改。如果需要修改，请使用 <code>Material.initialize</code> 或 <code>Material.reset</code> 方法。代码示例可参考：<a href="./../material-system/material-script.html">程序化使用材质</a></p></blockquote>`,78),t=[p];function e(c,r,y,D,F,i){return a(),l("div",null,t)}const d=s(o,[["render",e]]);export{A as __pageData,d as default};
