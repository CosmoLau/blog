import{_ as e,c as t,o as a,a4 as r}from"./chunks/framework.uQk9_EO2.js";const m=JSON.parse('{"title":"自定义着色器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/shader/write-effect-overview.md","filePath":"zh/shader/write-effect-overview.md","lastUpdated":1712305443000}'),i={name:"zh/shader/write-effect-overview.md"},o=r('<h1 id="自定义着色器" tabindex="-1">自定义着色器 <a class="header-anchor" href="#自定义着色器" aria-label="Permalink to &quot;自定义着色器&quot;">​</a></h1><p>若内置的着色器无法满足需求，可通过自定义着色器实现特例化渲染。</p><p>自定义着色器有以下两种方式：</p><ol><li><p>参考 <a href="./effect-inspector">着色器资源</a> 创建新的着色器。</p></li><li><p>基于内置着色器。将 <strong>资源管理器</strong> 面板中 <strong>internal/effects/</strong> 目录下相应的内置着色器拷贝到 <strong>assets</strong> 目录下，然后对其进行自定义。</p></li></ol><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>由于着色器是使用 YAML 作为流程控制，GLSL 作为着色器语言，因此在自定义着色器之前需要对这些知识有一定程度上的熟悉和了解：</p><p>对于不熟悉的开发者，我们也准备了一些简单的介绍：</p><ul><li><a href="./glsl">GLSL 语法简介</a></li><li><a href="./yaml-101">YAML 语法简介</a></li></ul><p>本节将以自定义 2D 着色器和 3D 着色器为例，详细介绍自定义流程，具体内容请参考：</p><ul><li><a href="./write-effect-3d-rim-light">3D 着色器：RimLight</a></li><li><a href="./write-effect-2d-sprite-gradient">2D 着色器：Gradient</a></li></ul>',10),s=[o];function l(n,c,f,h,d,p){return a(),t("div",null,s)}const u=e(i,[["render",l]]);export{m as __pageData,u as default};
