import{_ as e,c as o,o as t,a4 as a}from"./chunks/framework.uQk9_EO2.js";const s="/docs/cocos/assets/label_in_boundingbox.Drq7dxDj.png",r="/docs/cocos/assets/horizontal-vertical-align.BwRMb6tt.png",c="/docs/cocos/assets/font_equal_line_height.uiZfxNcL.png",n="/docs/cocos/assets/font_smaller.BQPY5ENU.png",i="/docs/cocos/assets/font_bigger.BY8Zsn3u.png",l="/docs/cocos/assets/clamp.DhJUCMO2.png",p="/docs/cocos/assets/shrink.p8N5TSIF.png",d="/docs/cocos/assets/resize-height.kDbkSwbs.png",h="/docs/cocos/assets/clamp_wrap.4mSSKwsh.png",g="/docs/cocos/assets/clamp_wrap1.Coy6lWsu.png",m="/docs/cocos/assets/clamp_wrap2.LffFzug4.png",_="/docs/cocos/assets/shrink_wrap.Bfzkoo9e.png",b="/docs/cocos/assets/anchor1.CWwryiJx.png",u="/docs/cocos/assets/anchor2.0T8jpujO.png",f="/docs/cocos/assets/widget.DpVcdfFU.png",E=JSON.parse('{"title":"文字排版","description":"","frontmatter":{},"headers":[],"relativePath":"zh/ui-system/components/engine/label-layout.md","filePath":"zh/ui-system/components/engine/label-layout.md","lastUpdated":1712305443000}'),k={name:"zh/ui-system/components/engine/label-layout.md"},q=a('<h1 id="文字排版" tabindex="-1">文字排版 <a class="header-anchor" href="#文字排版" aria-label="Permalink to &quot;文字排版&quot;">​</a></h1><p><strong>文字组件（Label）</strong> 是核心渲染组件之一，您需要了解如何设置文字的排版，才能在 UI 系统进行多分辨率适配和对齐设置时显示完美的效果。</p><h2 id="文字在约束框中对齐" tabindex="-1">文字在约束框中对齐 <a class="header-anchor" href="#文字在约束框中对齐" aria-label="Permalink to &quot;文字在约束框中对齐&quot;">​</a></h2><p>和其他渲染组件一样，Label 组件的排版也是基于 <a href="./../editor/ui-transform">UITransform</a> 组件所拥有的尺寸信息（<code>contentSize</code>），也就是约束框（Bounding Box）所规定的范围。</p><p><img src="'+s+'" alt=""></p><p>上图所示就是 Label 渲染的文字在蓝色约束框内显示的效果。Label 中以下的属性决定了文字在约束框中显示的位置：</p><ul><li><p><code>Horizontal Align</code>（水平对齐）：文字在约束框中水平方向的对齐准线，可以从 Left、Right、Center 三种位置中选择。</p></li><li><p><code>Vertical Align</code>（垂直对齐）：文字在约束框中垂直方向的对齐准线，可以从 Top、Bottom、Center 三种位置中选择。</p><p><img src="'+r+'" alt=""></p></li></ul><p>上图中水平方向对齐位置设置为 <code>Right</code>，垂直方向的对齐位置设为了 <code>Bottom</code>，可以看到文字出现在约束框的底部且靠右对齐。开发者可以将以上两个属性修改为其他组合，文字会根据设置出现在蓝色约束框内相应的位置。</p><h2 id="文字尺寸和行高" tabindex="-1">文字尺寸和行高 <a class="header-anchor" href="#文字尺寸和行高" aria-label="Permalink to &quot;文字尺寸和行高&quot;">​</a></h2><p><code>Font Size</code>（文字尺寸）决定了文字的显示大小，单位是 Point（也称作“磅”），是大多数图像制作和文字处理软件中通用的字体大小单位。对于动态字体来说，<code>Font Size</code> 可以无损放大，但位图字体在将 <code>Font Size</code> 设置为超过字体标定的字号大小时，显示会变得越来越模糊。</p><p><code>Line Height</code>（行高）决定了文字在多行显示时每行文字占据的空间高度，单位同样是 Point。多行文字显示可以通过两种方式实现：</p><ul><li>在 <code>String</code> 属性中输入文字时，手动输入回车或换行符</li><li>开启 <code>Enable Wrap Text</code>（换行）属性，下文会详细介绍</li></ul><p><strong>文字尺寸和行高的关系</strong>：</p><ul><li><p>如果 <code>Font Size</code> 和 <code>Line Height</code> 设为相同数值，文字正好占据一行大部分的空间高度。</p><p><img src="'+c+'" alt=""></p></li><li><p>如果 <code>Font Size</code> 小于 <code>Line Height</code>，多行文字之间间隔会加大</p><p><img src="'+n+'" alt=""></p></li><li><p>如果 <code>Font Size</code> 大于 <code>Line Height</code>，多行文字之间间隔会缩小，甚至出现文字相互重叠的情况。</p><p><img src="'+i+'" alt=""></p></li></ul><h2 id="排版模式-overflow" tabindex="-1">排版模式（Overflow） <a class="header-anchor" href="#排版模式-overflow" aria-label="Permalink to &quot;排版模式（Overflow）&quot;">​</a></h2><p><strong>Overflow（排版模式）</strong> 属性，决定了文字内容增加时，如何在约束框的范围内排布。共有 <strong>NONE</strong>、<strong>CLAMP</strong>、<strong>SHRINK</strong>、<strong>RESIZE_HEIGHT</strong> 四种模式，而只有在 <strong>后三种模式</strong> 下才能通过编辑器左上角的 <strong>矩形变换工具</strong>（也可以是按键盘按键 <strong>T</strong>）或者修改 <strong>属性检查器</strong> 中的 <strong>Size</strong> 大小或者添加 <strong>Widget 组件</strong> 来调整约束框的大小。</p><p><strong>NONE</strong> 模式会自动根据文字尺寸、行高等固定约束框尺寸。</p><h3 id="截断-clamp" tabindex="-1">截断（Clamp） <a class="header-anchor" href="#截断-clamp" aria-label="Permalink to &quot;截断（Clamp）&quot;">​</a></h3><p><img src="'+l+'" alt=""></p><p>截断模式下，文字首先按照对齐模式和尺寸的要求进行渲染，而超出约束框的部分会被隐藏（截断）。</p><h3 id="自动缩小-shrink" tabindex="-1">自动缩小（Shrink） <a class="header-anchor" href="#自动缩小-shrink" aria-label="Permalink to &quot;自动缩小（Shrink）&quot;">​</a></h3><p><img src="'+p+'" alt=""></p><p>自动缩小模式下，如果文字按照原定尺寸渲染会超出约束框时，会自动缩小文字尺寸以显示全部文字。</p><p><strong>注意</strong>：自动缩小模式不会放大文字来适应约束框。</p><h3 id="自动适应高度-resize-height" tabindex="-1">自动适应高度（Resize Height） <a class="header-anchor" href="#自动适应高度-resize-height" aria-label="Permalink to &quot;自动适应高度（Resize Height）&quot;">​</a></h3><p><img src="'+d+'" alt=""></p><p>自动适应高度模式会保证文字的约束框贴合文字的高度，不管文字有多少行。这个模式非常适合显示内容量不固定的大段文字，配合 <a href="./../components/scrollview">ScrollView 组件</a> 可以在任意 UI 区域中显示无限量的文字内容。</p><h2 id="自动换行-enable-wrap-text" tabindex="-1">自动换行（Enable Wrap Text） <a class="header-anchor" href="#自动换行-enable-wrap-text" aria-label="Permalink to &quot;自动换行（Enable Wrap Text）&quot;">​</a></h2><p>Label 组件中的 <code>Enable Wrap Text</code>（自动换行）属性，可以切换文字的自动换行开关。在自动换行开启的状态下，不需要在输入文字时手动输入回车或换行符，文字也会根据约束框的宽度自动换行。</p><p><strong>注意</strong>：自动换行属性只有在文字排版模式的 <strong>截断（Clamp）</strong> 和 <strong>自动缩小（Shrink）</strong> 这两种模式下才有。<strong>自动适应高度（Resize Height）</strong> 模式下，自动换行属性是强制开启的。</p><h3 id="截断-clamp-模式自动换行" tabindex="-1">截断（Clamp）模式自动换行 <a class="header-anchor" href="#截断-clamp-模式自动换行" aria-label="Permalink to &quot;截断（Clamp）模式自动换行&quot;">​</a></h3><p>截断模式开启自动换行后，会优先在约束框允许的范围内换行排列文字，如果换行之后仍无法显示全部文字时才发生截断。</p><p><img src="'+h+'" alt=""></p><p>以下两幅图都是在 <code>Clamp</code> + <code>Enable Wrap Text</code> 开启情况下的，区别在于文字约束框的宽度不同：</p><p><img src="'+g+'" alt=""> <img src="'+m+'" alt=""></p><p>在约束框宽度从左图变化到右图的过程中，文字将不断调整换行，最后由于约束框高度不足而产生了截断显示。</p><h3 id="自动缩小-shrink-模式自动换行" tabindex="-1">自动缩小（Shrink）模式自动换行 <a class="header-anchor" href="#自动缩小-shrink-模式自动换行" aria-label="Permalink to &quot;自动缩小（Shrink）模式自动换行&quot;">​</a></h3><p>和截断模式类似，自动缩小模式下文字超出约束框宽度时也会优先试图换行，在约束框宽度和长度都已经完全排满的情况下才会自动缩小文字以适应约束框。</p><p><img src="'+_+'" alt=""></p><h3 id="中文自动换行" tabindex="-1">中文自动换行 <a class="header-anchor" href="#中文自动换行" aria-label="Permalink to &quot;中文自动换行&quot;">​</a></h3><p>中文自动换行的行为和英文不同，英文是以单词为单位进行换行的，必须有空格才能作为换行调整的最小单位。中文是以字为单位进行换行，每个字都可以单独调整换行。</p><h2 id="文字节点的锚点" tabindex="-1">文字节点的锚点 <a class="header-anchor" href="#文字节点的锚点" aria-label="Permalink to &quot;文字节点的锚点&quot;">​</a></h2><p>文字节点的锚点和文字在约束框中的对齐模式是需要区分的两个概念。在需要靠文字内容将约束框撑大的排版模式中（如 <code>Resize Height</code>），要正确设置锚点位置，才能让约束框向我们期望的方向调整。</p><p>例如，如果希望文字约束框向下扩展，需要将锚点（<code>Anchor</code>）的 <code>y</code> 属性设为 <code>1</code>。如下图所示：</p><p><img src="'+b+'" alt=""></p><p><img src="'+u+'" alt=""></p><h2 id="文字配合对齐挂件-widget" tabindex="-1">文字配合对齐挂件（Widget） <a class="header-anchor" href="#文字配合对齐挂件-widget" aria-label="Permalink to &quot;文字配合对齐挂件（Widget）&quot;">​</a></h2><p>在 Label 组件所在节点上添加一个 <strong>Widget（对齐挂件）</strong> 组件，就可以让文字节点相对于父节点进行各式各样的排版。</p><p><img src="'+f+'" alt=""></p><p>上图中我们在背景节点上添加了两个 Label 子节点，分别为它们添加 Widget 组件后，设置左边文字 Widget 的 <code>Right</code> 属性为 <code>50%</code>，右边文字 Widget 的 <code>Left</code> 属性为 <code>60%</code>，就可以实现图中所示的多列布局式文字。</p><p>而且通过 Widget 上设置边距，加上文字本身的排版模式，可以让我们在不需要具体微调文字约束框大小的情况下轻松实现灵活美观的文字排版。</p><h2 id="查看组件参考" tabindex="-1">查看组件参考 <a class="header-anchor" href="#查看组件参考" aria-label="Permalink to &quot;查看组件参考&quot;">​</a></h2><p>关于 Label 组件的属性，也可以查阅 <a href="./../editor/label">Label 组件参考</a> 文档。</p>',53),x=[q];function S(z,P,w,L,T,W){return t(),o("div",null,x)}const H=e(k,[["render",S]]);export{E as __pageData,H as default};
