import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.uQk9_EO2.js";const r="/docs/cocos/assets/inspector_1.f5pglyif.png",i="/docs/cocos/assets/inspector_2.ITiMYBix.png",_=JSON.parse('{"title":"Particle System Function Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"en/particle-system/module.md","filePath":"en/particle-system/module.md","lastUpdated":1712305443000}'),l={name:"en/particle-system/module.md"},n=o('<h1 id="particle-system-function-introduction" tabindex="-1">Particle System Function Introduction <a class="header-anchor" href="#particle-system-function-introduction" aria-label="Permalink to &quot;Particle System Function Introduction&quot;">​</a></h1><p>Particle System stores the initial state of particle emission and the state update submodule after particle emission.</p><h2 id="particle-system-module" tabindex="-1">Particle System Module <a class="header-anchor" href="#particle-system-module" aria-label="Permalink to &quot;Particle System Module&quot;">​</a></h2><p>The Cocos Creator particle system operation panel is as follows:</p><p><img src="'+r+'" alt="inspector_1"><br><img src="'+i+'" alt="inspector_2"></p><p>The particle system uses modules to organize functionality, including the following modules:</p><table><thead><tr><th style="text-align:left;">Module</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">Node</td><td style="text-align:left;">Particle node, used to set the position, direction, size, rendering level and other properties of the particle emitter.</td></tr><tr><td style="text-align:left;"><a href="./main-module">ParticleSystem</a> (main module)</td><td style="text-align:left;">Used to store all the data displayed in the <strong>Inspector</strong> panel, manage particle generation, update, destroy related modules, and control particle playback</td></tr><tr><td style="text-align:left;"><a href="./emitter">ShapeModule</a> (emitter module)</td><td style="text-align:left;">Used to control particle emitting, including emitting direction and speed, support predefined emitting direction, including square, circle, cone, ball, hemisphere.</td></tr><tr><td style="text-align:left;">AnimatorModule</td><td style="text-align:left;">Used to control the state update after the particle is launched. Supported features include:<br><a href="./noise-module">NoiseModule</a><br><a href="./velocity-module">VelocityOvertimeModule</a><br><a href="./force-module">ForceOvertimeModule</a><br><a href="./size-module">SizeOvertimeModule</a><br><a href="./rotation-module">RotationOvertimeModule</a><br><a href="./color-module">ColorOvertimeModule</a><br><a href="./texture-animation-module">TextureAnimationModule</a><br><a href="./limit-velocity-module">LimitVelocityOvertimeModule</a><br><a href="./trail-module">TrailModule</a></td></tr><tr><td style="text-align:left;"><a href="./renderer">Renderer</a></td><td style="text-align:left;">The data needed to generate particle rendering. Including VB, IB, render state related control.</td></tr></tbody></table>',7),d=[n];function s(c,m,u,p,h,f){return a(),t("div",null,d)}const g=e(l,[["render",s]]);export{_ as __pageData,g as default};
