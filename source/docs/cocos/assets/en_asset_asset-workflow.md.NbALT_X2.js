import{_ as e,c as t,o as s,a4 as o}from"./chunks/framework.uQk9_EO2.js";const p=JSON.parse('{"title":"Assets workflow","description":"","frontmatter":{},"headers":[],"relativePath":"en/asset/asset-workflow.md","filePath":"en/asset/asset-workflow.md","lastUpdated":1712305443000}'),a={name:"en/asset/asset-workflow.md"},n=o('<h1 id="assets-workflow" tabindex="-1">Assets workflow <a class="header-anchor" href="#assets-workflow" aria-label="Permalink to &quot;Assets workflow&quot;">​</a></h1><h2 id="importing-assets" tabindex="-1">Importing assets <a class="header-anchor" href="#importing-assets" aria-label="Permalink to &quot;Importing assets&quot;">​</a></h2><p>There are three ways to <strong>import assets</strong>:</p><ul><li>Create a new file through the <strong>Assets</strong> panel in Cocos Creator. Use the <strong>Create button</strong> to start the importing process.</li><li>By copying files, in the <strong>file manager of the operating system</strong>, to the project asset folder, and then open the editor or activate the editor window to automatically refresh the asset list of the <strong>Assets</strong> panel to finish importing assets.</li><li>Drag and drop asset files from the <strong>file manager of the operating system</strong> to a folder location on the <strong>Assets</strong> panel. This will trigger an import of the selected assets.</li></ul><h2 id="syncing-assets" tabindex="-1">Syncing Assets <a class="header-anchor" href="#syncing-assets" aria-label="Permalink to &quot;Syncing Assets&quot;">​</a></h2><p>The assets in the <strong>Assets</strong> panel are synchronized with the project asset files seen in the <strong>file manager of the operating system</strong>. Assets are <strong>moved</strong>, <strong>renamed</strong>, and <strong>deleted</strong> in the <strong>Assets</strong> panel.</p><ul><li>If deleted in Cocos Creator, it will be deleted in the <strong>file manager of the operating system</strong>.</li><li>If deleted in the <strong>file manager of the operating system</strong>, it will be deleted in Cocos Creator.</li></ul><h2 id="asset-configuration-information-meta-file" tabindex="-1">Asset Configuration Information <code>.meta</code> File <a class="header-anchor" href="#asset-configuration-information-meta-file" aria-label="Permalink to &quot;Asset Configuration Information `.meta` File&quot;">​</a></h2><p>All asset files will generate a <code>.meta</code> configuration file with the same name when imported. This configuration file provides the unique identification (<strong>UUID</strong>) of the asset in the project, small image references, cropping data of texture assets, as well as other configuration information. This data is a necessary factor in identifying a legitimate asset that Cocos Creator is using.</p><p>The <code>.meta</code> file is not visible in the <strong>Assets</strong> panel. When operating in the <strong>Assets</strong> panel, the <strong>renaming</strong>, <strong>moving</strong>, and <strong>deleting</strong> of an <strong>asset</strong> will automatically synchronize the <code>.meta</code> file that corresponds to the <strong>asset</strong> by the Editor. To ensure that configuration information such as the <strong>UUID</strong> remains unchanged, that is, it does not affect existing references.</p><p>It is not recommended to operate the asset file directly in the <strong>file manager of the operating system</strong>. If there is such an operation, please manually operate the corresponding <code>.meta</code> file along with the <strong>asset</strong> file. The following suggestions are recommended:</p><ul><li>Close the editor you are using to avoid update failures due to file locks or identical asset names.</li><li>When <strong>deleting</strong>, <strong>renaming</strong>, or <strong>moving</strong> assets, please <strong>delete</strong>, <strong>rename</strong>, and <strong>move</strong> the <code>.meta</code> file as needed.</li><li>When copying assets together with <code>.meta</code> files, the copied <code>.meta</code> files will be used directly instead of generating new <code>.meta</code> files; if only the asset files are copied, a new <code>.meta</code> file with the corresponding name will be generated when you re-open the editor. This asset will become a new asset to the editor.</li></ul><h2 id="assets-in-library" tabindex="-1">Assets in Library <a class="header-anchor" href="#assets-in-library" aria-label="Permalink to &quot;Assets in Library&quot;">​</a></h2><p>After the asset is imported, new data will be generated and stored in the project&#39;s <strong>Library</strong> folder. The structure and assets of the files in <strong>Library</strong> are engine-oriented and the format required for the final game, that is, <strong>machine-friendly</strong>, but <strong>not human-friendly</strong>.</p><p>When a library is lost or damaged, just delete the entire library folder and open the project, and the asset library will be rebuilt.</p><h2 id="how-to-locate-assets" tabindex="-1">How to locate assets <a class="header-anchor" href="#how-to-locate-assets" aria-label="Permalink to &quot;How to locate assets&quot;">​</a></h2><p>A asset has a unique <strong>UUID</strong>, used to locate the asset, but this method is not intuitive enough. There is another intuitive way: <strong>Database URL</strong> format, such as an <code>asset-db</code>. The corresponding protocol header is <code>db://assets</code>, the protocol header for <code>internal-db</code> is <code>db://internal</code>.</p><p>There are folder-level asset formats, such as <code>db://assets/prefabs/fire.prefab</code></p><h2 id="svn-or-git-syncing-of-assets" tabindex="-1">SVN or GIT syncing of assets <a class="header-anchor" href="#svn-or-git-syncing-of-assets" aria-label="Permalink to &quot;SVN or GIT syncing of assets&quot;">​</a></h2><blockquote><p><strong>Note</strong>: there are line breaks in the <code>.meta</code> file. It is recommended to unify the line break styles and rules of the team members&#39; computers to avoid opening the project after synchronizing the project assets.</p></blockquote>',20),r=[n];function i(l,d,h,g,c,f){return s(),t("div",null,r)}const u=e(a,[["render",i]]);export{p as __pageData,u as default};
