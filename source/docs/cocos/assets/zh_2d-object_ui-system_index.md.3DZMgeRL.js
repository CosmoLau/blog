import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.uQk9_EO2.js";const s="/docs/cocos/assets/resolution_config.Df3MNItv.png",n="/docs/cocos/assets/create-ui.NxwIJRx3.png",i="/docs/cocos/assets/add-ui-component.BzZHGKGH.png",U=JSON.parse('{"title":"UI 系统","description":"","frontmatter":{},"headers":[],"relativePath":"zh/2d-object/ui-system/index.md","filePath":"zh/2d-object/ui-system/index.md","lastUpdated":1712305443000}'),r={name:"zh/2d-object/ui-system/index.md"},c=o('<h1 id="ui-系统" tabindex="-1">UI 系统 <a class="header-anchor" href="#ui-系统" aria-label="Permalink to &quot;UI 系统&quot;">​</a></h1><p>本章将介绍 Cocos Creator 中强大而灵活的 UI（用户界面）系统，通过组合不同 UI 组件来生产能够适配多种分辨率屏幕的、通过数据动态生成和更新显示内容，以及支持多种排版布局方式的 UI 界面。</p><h2 id="ui-入门" tabindex="-1">UI 入门 <a class="header-anchor" href="#ui-入门" aria-label="Permalink to &quot;UI 入门&quot;">​</a></h2><p>在引擎中界定 UI 和 2D 渲染对象的区别主要在于适配和交互，所有的 UI 需要在 Canvas 节点下，以做出适配行为，而 Canvas 组件本身继承自 <code>RenderRoot2D</code> 组件，所以也可以作为数据收集的入口。</p><p>UI 是游戏开发的必要交互部分，一般游戏上的按钮、文字、背景等都是通过 UI 来制作的。在开始制作一款 UI 时，首先需要确定当前设计的内容显示区域大小（设计分辨率），可以在菜单栏的 <strong>项目 -&gt; 项目设置 -&gt; 项目数据</strong> 面板中设置：</p><p><img src="'+s+'" alt="resolution-config"></p><p>设计分辨率设置完成后，开始创建 UI 元素，所有的 UI 元素都包含在 Canvas 节点下。可以在 <strong>层级管理器</strong> 面板中点击左上方的 <strong>+</strong> 按钮，然后选择 <strong>UI Component -&gt; Canvas</strong> 来创建 Canvas 节点。Canvas 节点上有一个 <a href="./../../ui-system/components/editor/canvas">Canvas</a> 组件，该组件可以关联一个 camera。</p><blockquote><p><strong>注意</strong>：</p><ol><li>在一个场景中可以存在多个 Canvas 节点，但是 Canvas 节点不应该嵌套在另一个 Canvas 节点或其子节点下。</li><li>Canvas 组件并非和 camera 是一一对应关系，它们之前的渲染与否完全取决于 node 的 layer 和 camera 的 Visibility，在多 Canvas 的时候要格外注意 layer 管理以得到想要的渲染效果。</li></ol></blockquote><p>接下来就可以在 Canvas 节点下创建 UI 节点了。编辑器自带的 UI 节点有以下几种：</p><p><img src="'+n+'" alt="create-ui"></p><p>可以通过选中节点，在 <strong>属性检查器</strong> 面板中点击 <strong>添加组件</strong> 来查看 UI 组件。</p><p><img src="'+i+'" alt="add-ui-component"></p><p>UI 渲染组件的先后顺序采用的是深度排序方案，也就是 Canvas 节点下的子节点的排序就已经决定了之后的整个 <a href="./../../ui-system/components/engine/priority">渲染排序</a>。</p><p>在一般的游戏开发中，必要的 UI 元素除了 Sprite（精灵图）、Label（文字）、Mask（遮罩）等基础 2D 渲染组件外，还有用于快速搭建界面的 Layout（布局）、Widget（对齐）等。其中 Sprite 和 Label 用于渲染图片和文字。Mask 主要用于限制显示内容，比较常用的地方是一些聊天框和背包等。Layout 主要用于排版，一般用于按钮单一排列，背包内道具整齐排列等。<br> 最后一个比较重要的功能其实是 Widget，主要用于显示对齐。这里可能涉及到另外一个功能，那就是多分辨率适配，在我们设计完 UI 需要发布到不同平台时，势必会出现平台的实际设备分辨率和我们的设计分辨率不符的情况，这个时候为了适配不得不做一些取舍，比如头像框，是不能做缩放的，但是我们又希望它没有很大程度受设备影响，那么我们则需要为它添加上 Widget 组件，并且始终保证它对齐在我们的设计分辨率的左上方，具体参考：<a href="./../../ui-system/components/engine/widget-align">对齐策略</a> 和 <a href="./../../ui-system/components/editor/widget">对齐</a>。</p><p>当我们的界面制作完成之后，可能有人会发现，怎么发布 iPhone 7 和 iPhone X 的显示效果不一样？这个其实也是我们上面提到的设备分辨率的问题。在你以设计分辨率设计，最终以设备分辨率发布的时候，因为不同型号的手机设备分辨率可能不一致，这中间存在像素偏差的问题，因此，还需要做的一道转换工序那就是屏幕适配。<br> 在菜单栏的 <strong>项目 -&gt; 项目设置 -&gt; 项目数据</strong> 页面中可以看到，还有两个选项是 <strong>适配屏幕宽度 / 适配屏幕高度</strong>，按照屏幕适配规则再结合 Widget 组件，就可以实现不同设备的轻松适配。具体适配规则可参考 <a href="./../../ui-system/components/engine/multi-resolution">多分辨率适配方案</a>。</p><h2 id="ui-组件" tabindex="-1">UI 组件 <a class="header-anchor" href="#ui-组件" aria-label="Permalink to &quot;UI 组件&quot;">​</a></h2><p>UI 组件大部分自身不具有渲染能力，但持有了 2D 渲染组件用于渲染，其本身更多拥有着快速构成用户交互界面的能力，承担着事件响应，排版适配等功能。各 UI 组件具体说明请参考 <a href="./../../ui-system/components/editor/base-component">UI 组件</a>。</p><h2 id="ui-实践指南" tabindex="-1">UI 实践指南 <a class="header-anchor" href="#ui-实践指南" aria-label="Permalink to &quot;UI 实践指南&quot;">​</a></h2><ul><li><a href="./../../ui-system/components/engine/multi-resolution">多分辨率适配方案</a></li><li><a href="./../../ui-system/components/engine/widget-align">对齐策略</a></li><li><a href="./../../ui-system/components/engine/label-layout">文字排版</a></li><li><a href="./../../ui-system/components/engine/auto-layout">自动布局容器</a></li><li><a href="./../../ui-system/components/engine/list-with-data">制作动态生成内容的列表</a></li><li><a href="./../../ui-system/components/engine/sliced-sprite">制作可任意拉伸的 UI 图像</a></li></ul>',19),l=[c];function p(d,m,u,g,h,I){return a(),t("div",null,l)}const f=e(r,[["render",p]]);export{U as __pageData,f as default};
