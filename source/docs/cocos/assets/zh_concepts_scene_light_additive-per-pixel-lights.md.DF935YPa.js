import{_ as s,c as t,o as a,a4 as e}from"./chunks/framework.uQk9_EO2.js";const o="/docs/cocos/assets/default-material.C424XVLe.png",p="/docs/cocos/assets/usingLight.CFuNmdUs.png",c="/docs/cocos/assets/drawCall.kUNTGMJj.png",r="/docs/cocos/assets/debug.DCvmHox4.png",i="/docs/cocos/assets/pass1.Bvlc5jAI.png",d="/docs/cocos/assets/pass2.2-nklGAn.png",l="/docs/cocos/assets/pass3.CeGPVmTB.png",S=JSON.parse('{"title":"基于多 Pass 的多光源支持","description":"","frontmatter":{},"headers":[],"relativePath":"zh/concepts/scene/light/additive-per-pixel-lights.md","filePath":"zh/concepts/scene/light/additive-per-pixel-lights.md","lastUpdated":1712305443000}'),n={name:"zh/concepts/scene/light/additive-per-pixel-lights.md"},_=e('<h1 id="基于多-pass-的多光源支持" tabindex="-1">基于多 Pass 的多光源支持 <a class="header-anchor" href="#基于多-pass-的多光源支持" aria-label="Permalink to &quot;基于多 Pass 的多光源支持&quot;">​</a></h1><p>超着色器（Uber Shader）目前在一些性能受限的平台上仍然是主流方案，但随着硬件性能的增强和画质需求的提高，固定数量的光源再也无法满足实际应用的需求，于是就有了支持多光源的方案 — <strong>多遍绘制</strong>。</p><p>下面以 Creator 中默认的光照材质 <code>default-material.mtl</code> 为例，介绍如何实现基于多 Pass 的多光源支持。</p><p><img src="'+o+'" alt="default-material"></p><p>首先在 <strong>层级管理器</strong> 中新建一个 <strong>Sphere 球体</strong> 节点，然后继续添加一个平行光，两个聚光灯，将它们设置环绕在球体周围，如下图所示：</p><p><img src="'+p+'" alt="using Light"></p><p>场景搭建完成后，选择编辑器上面的浏览器预览，可以在左下角看到 Draw Call。</p><p><img src="'+c+'" alt="Draw Call"></p><p>我们可以通过第三方软件，例如 RenderDoc，打开 Frame Debug 来看看这些到底是如何渲染到屏幕上的：</p><p><img src="'+r+'" alt="Frame Debug"></p><p>由上图可以看出来，第一遍渲染的是 <code>Directional Light</code> 的光照：</p><p><img src="'+i+'" alt="main light pass"></p><p>第二遍，渲染的是 <code>Spot Light 1</code> 的光照：</p><p><img src="'+d+'" alt="ForwardAdd pass"></p><p>第三遍，渲染的是 <code>Spot Light 2</code> 的光照：</p><p><img src="'+l+'" alt="ForwardAdd pass"></p><p>这种渲染方式便是支持多种光照模型的 Forward-Pipeline。Forward 一般由两个 Pass 组成：</p><ul><li><p>第一个 Pass 是 BasePass，用于渲染平行光的光照。</p></li><li><p>第二个 Pass 是 LightPass，用于渲染剩余光源的光照。</p></li></ul><p>因此，当一个物体同时被多个灯光照射时，Draw Call 也会增加。</p>',19),g=[_];function m(h,u,P,f,C,D){return a(),t("div",null,g)}const v=s(n,[["render",m]]);export{S as __pageData,v as default};
