import{_ as o,c as t,o as a,a5 as s}from"./chunks/framework.CqnjdYks.js";const e="/docs/cocos/assets/native-platform.BYtGMGmX.png",i="/docs/cocos/assets/native-options.WPxw_4ub.png",r="/docs/cocos/assets/encrypt-js.5u-zC7Q1.png",n="/docs/cocos/assets/native-build-buttons.DfsHlr5S.png",d="/docs/cocos/assets/build-progress-windows.CmN2P1co.png",p="/docs/cocos/assets/android-studio.BfzeO1yO.png",l="/docs/cocos/assets/ios-xcode.DtZdfh11.png",c="/docs/cocos/assets/windows-vs.Pq5GMcIF.png",v=JSON.parse('{"title":"打包发布到原生平台","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/publish/native-options.md","filePath":"zh/manual/editor/publish/native-options.md"}'),h={name:"zh/manual/editor/publish/native-options.md"},u=s('<h1 id="打包发布到原生平台" tabindex="-1">打包发布到原生平台 <a class="header-anchor" href="#打包发布到原生平台" aria-label="Permalink to &quot;打包发布到原生平台&quot;">​</a></h1><p>点击菜单栏的 <strong>项目 -&gt; 构建发布</strong>，打开构建发布面板。</p><p>目前可以选择的原生平台包括 Android、iOS、HarmonyOS、Mac 和 Windows 四个。iOS、Mac 只在 macOS 电脑上才能选择，Windows 只在 Windows 电脑上才能选择。</p><p><img src="'+e+'" alt="native platform"></p><h2 id="原生平台通用构建选项" tabindex="-1">原生平台通用构建选项 <a class="header-anchor" href="#原生平台通用构建选项" aria-label="Permalink to &quot;原生平台通用构建选项&quot;">​</a></h2><p><img src="'+i+'" alt="Native 选项"></p><h3 id="加密脚本" tabindex="-1">加密脚本 <a class="header-anchor" href="#加密脚本" aria-label="Permalink to &quot;加密脚本&quot;">​</a></h3><p>该项用于加密发布后的脚本。会在构建后的 <code>assets</code> 目录下生成 jsc 文件，这个文件是加密过的。而 js 文件会备份在 <code>script-backup</code> 目录下以便调试，打包时不会进入 APP 中。</p><p><strong>脚本加密密钥</strong>：在 Native 平台上会使用这个值作为加密 js 文件的密钥。项目新建时会随机生成。</p><p><strong>Zip 压缩</strong>：勾选上的话可以减小脚本体积。</p><p><img src="'+r+'" alt="encrypt js"></p><h3 id="原生引擎" tabindex="-1">原生引擎 <a class="header-anchor" href="#原生引擎" aria-label="Permalink to &quot;原生引擎&quot;">​</a></h3><p>该项用于展示当前使用的是内置引擎还是定制引擎，点击后面的编辑按钮即可前往 <strong>偏好设置 -&gt; <a href="./../preferences/#引擎管理器">引擎管理器</a></strong> 面板进行设置。</p><h3 id="任务调度系统" tabindex="-1">任务调度系统 <a class="header-anchor" href="#任务调度系统" aria-label="Permalink to &quot;任务调度系统&quot;">​</a></h3><p>该项是目前引擎内部功能模块使用的功能，用户暂不需要关注该项。如果确实对任务调度系统有需求，应当注意以下两点：</p><ol><li>TBB 与 TaskFlow 会因项目情况和环境不同而产生表现差异，应根据实际项目情况做出选择。</li><li>TBB 或 TaskFlow 在原生平台上的应用会有版本限制，具体请查看下文 <strong>版本支持</strong> 部分的内容。</li></ol><p>TaskFlow 依赖特定的 C++ 版本和操作系统版本，请往 <a href="./../../advanced-topics/supported-versions.html">特性与系统版本</a> 查看详情。</p><h3 id="自动执行下一步" tabindex="-1">自动执行下一步 <a class="header-anchor" href="#自动执行下一步" aria-label="Permalink to &quot;自动执行下一步&quot;">​</a></h3><p><img src="'+n+'" alt="native-build-buttons"></p><p>构建面板右下方，有 <strong>构建</strong>，<strong>生成</strong>，<strong>运行</strong> 三个按钮，默认情况下，需要点击对应的按钮，才会执行相应的动作。</p><p>可以点击两个按钮之间的 <strong>链接</strong> 按钮，按钮会变为 <strong>箭头</strong>，意味着箭头指向的下一步会在上一步操作完成后自动执行。 再次点击箭头，可恢复为之前的状态。</p><h2 id="其他构建选项" tabindex="-1">其他构建选项 <a class="header-anchor" href="#其他构建选项" aria-label="Permalink to &quot;其他构建选项&quot;">​</a></h2><p>发布到原生平台需要安装配置一些必要的环境，详情请参考 <a href="./setup-native-development.html">安装配置原生开发环境</a>。</p><p>如需查看所有平台通用的选项，请参考请参考 <a href="./build-options.html">通用构建选项</a>。</p><p>如需查看某个原生平台专有的构建选项，请参考：</p><ul><li><a href="./android/build-options-android.html">Android 平台构建选项</a></li><li><a href="./ios/build-options-ios.html">iOS 平台构建选项</a></li><li><a href="./windows/build-options-windows.html">Windows 平台构建选项</a></li><li><a href="./mac/build-options-mac.html">Mac 平台构建选项</a></li></ul><h2 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h2><p>构建选项设置完成后，就可以开始构建了，点击 <strong>构建发布</strong> 面板右下角的 <strong>构建</strong> 按钮，开始构建流程。</p><p>编译脚本和打包资源时会在 <strong>构建发布</strong> 面板的 <strong>构建任务</strong> 页面显示蓝色的进度条，构建成功的话进度条到达 100% 并显示为绿色：</p><p><img src="'+d+'" alt="build progress"></p><h2 id="原生工程目录结构" tabindex="-1">原生工程目录结构 <a class="header-anchor" href="#原生工程目录结构" aria-label="Permalink to &quot;原生工程目录结构&quot;">​</a></h2><p>Cocos Creator 构建的原生工程，包含 原生公共目录，原生平台目录和原生项目目录，详情请参考 <a href="./../../advanced-topics/native-secondary-development.html">原生平台二次开发指南</a>。</p><h2 id="编译和运行" tabindex="-1">编译和运行 <a class="header-anchor" href="#编译和运行" aria-label="Permalink to &quot;编译和运行&quot;">​</a></h2><p>在 Cocos Creator 中，可以通过构建面板上的按钮，编译和运行项目，也可以通过各平台对应的 IDE（如 Xcode、Android Studio、Visual Studio）打开项目，执行进一步的编译、运行、调试和发布。</p><h3 id="通过编辑器" tabindex="-1">通过编辑器 <a class="header-anchor" href="#通过编辑器" aria-label="Permalink to &quot;通过编辑器&quot;">​</a></h3><p>构建完成后，继续点击旁边的 <strong>生成</strong> 按钮，成功后会提示：</p><p><code>make package YourProjectBuildPath success!</code></p><blockquote><p><strong>注意</strong>：首次编译 Android 项目或者有版本升级时，需要通过 Android Studio 打开工程，检查是否有缺失的工具和错误，确认无误后方可使用构建面板按钮生成和运行。</p></blockquote><p><strong>生成</strong> 过程完成后，继续点击旁边的 <strong>运行</strong> 按钮，可能还会继续进行一部分编译工作，请耐心等待或通过日志文件查看进展。各平台的运行结果为：</p><ul><li>Mac/Windows 平台会直接在桌面运行预览</li><li>Android 平台必须通过 USB 连接真机，并且在真机上开启 USB 调试后才可以运行预览</li><li>iOS 平台会调用模拟器运行预览，但建议通过 Xcode 连接真机执行 <strong>生成</strong> 和 <strong>运行</strong>。</li></ul><h3 id="通过-ide" tabindex="-1">通过 IDE <a class="header-anchor" href="#通过-ide" aria-label="Permalink to &quot;通过 IDE&quot;">​</a></h3><p>点击 <strong>构建任务</strong> 左下角的 <strong>文件夹图标</strong> 按钮，就会在操作系统的文件管理器中打开构建发布路径，这个路径中 <code>build</code> 目录下的 <code>proj</code> 里就包含了当前构建的原生平台工程。</p><p>接下来使用原生平台对应的 IDE（如 Xcode、Android Studio、Visual Studio）打开这些工程，就可以进一步地编译和发布预览了。</p><ul><li><p><strong>Android</strong></p><p><img src="'+p+'" alt="android studio"></p></li><li><p><strong>iOS</strong> 和 <strong>Mac</strong></p><p><img src="'+l+'" alt="ios xcode"></p></li><li><p><strong>Windows</strong></p></li></ul><p><img src="'+c+'" alt="windows xcode"></p><p>如果要对生成的原生项目做修改，请参考 <a href="./../../advanced-topics/native-secondary-development.html">原生项目二次开发</a>。</p><p>关于原生平台 IDE 的使用请搜索相关信息，这里就不再赘述了。若要了解如何在原生平台上调试，请参考 <a href="./debug-jsb.html">原生平台 JavaScript 调试</a>。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li><p>在 MIUI 10 系统上运行 debug 模式构建的工程可能会弹出 “Detected problems with API compatibility” 的提示框，这是 MIUI 10 系统自身引入的问题，使用 release 模式构建即可。</p></li><li><p>打包 iOS 平台时，如果开发者在项目中未使用到 WebView 相关功能，请确保在 <strong>项目 -&gt; 项目设置 -&gt; 功能裁剪</strong> 中剔除 WebView 模块，以提高 iOS 的 App Store 机审成功率。如果开发者确实需要使用 WebView（或者添加的第三方 SDK 自带了 WebView），并因此 iOS 的 App Store 机审不通过，仍可尝试通过邮件进行申诉。</p></li><li><p>Android 平台通过编辑器和 Android Studio 编译后的结果有些区别：</p><ul><li><p>通过编辑器执行 <strong>生成</strong> 步骤后，会在发布路径下生成 <code>build</code> 目录，<code>.apk</code> 生成在 <code>build</code> 目录的 <code>app\\build\\outputs\\apk</code> 目录下。</p></li><li><p>通过 Android Studio 编译后，<code>.apk</code> 则生成在 <code>proj\\app\\build\\outputs\\apk</code> 目录下。</p></li></ul></li><li><p>在 Cocos Creator 3.0 中，Android 与 Android Instant 使用同一个构建模板，构建生成的工程都是在 <code>build\\android\\proj</code> 目录中。针对该目录请注意：</p><ul><li><p>如果是 Android 平台单独使用的代码请放入 <code>app\\src</code> 目录，单独使用的第三方库请放入 <code>app\\libs</code> 目录（若没有这两个目录可自行创建）。</p></li><li><p>如果是 Android Instant 单独使用的代码和第三方库请分别放入 <code>instantapp\\src</code> 和 <code>instantapp\\libs</code> 目录（若没有这两个目录可自行创建）。</p></li><li><p>如果是 Android 和 Android Instant 共用的代码和第三方库，请分别放入 <code>src</code> 和 <code>libs</code> 目录（若没有这两个目录可自行创建）。</p></li></ul><p>通过在 <strong>构建发布</strong> 面板点击 <strong>生成</strong> 按钮来编译 Android 时，会默认执行 <code>assembleRelease/Debug</code>，编译 Android Instant 时会默认执行 <code>instantapp:assembleRelease/Debug</code>。</p></li></ol>',49),g=[u];function m(b,_,f,q,S,k){return a(),t("div",null,g)}const w=o(h,[["render",m]]);export{v as __pageData,w as default};
