import{_ as e,c as t,o as s,a4 as i}from"./chunks/framework.uQk9_EO2.js";const o="/docs/cocos/assets/default-material.C424XVLe.png",a="/docs/cocos/assets/usingLight.CFuNmdUs.png",r="/docs/cocos/assets/drawCall.kUNTGMJj.png",n="/docs/cocos/assets/debug.DCvmHox4.png",l="/docs/cocos/assets/pass1.Bvlc5jAI.png",p="/docs/cocos/assets/pass2.2-nklGAn.png",c="/docs/cocos/assets/pass3.CeGPVmTB.png",x=JSON.parse('{"title":"Additive Per-Pixel Lights","description":"","frontmatter":{},"headers":[],"relativePath":"en/concepts/scene/light/additive-per-pixel-lights.md","filePath":"en/concepts/scene/light/additive-per-pixel-lights.md","lastUpdated":1712305443000}'),h={name:"en/concepts/scene/light/additive-per-pixel-lights.md"},d=i('<h1 id="additive-per-pixel-lights" tabindex="-1">Additive Per-Pixel Lights <a class="header-anchor" href="#additive-per-pixel-lights" aria-label="Permalink to &quot;Additive Per-Pixel Lights&quot;">â€‹</a></h1><p>Uber Shader is still the dominant solution on some performance-constrained platforms, but as hardware performance increases and the demand for higher picture quality increases, a fixed number of lights can no longer meet the needs of practical applications, so there is a solution that supports multiple lights -- <strong>Multi-Pass Drawing</strong>.</p><p>The following is an example of how to implement multiple lights based on multiple <code>Pass</code> with the default lighting material <code>default-material.mtl</code> in Cocos Creator.</p><p><img src="'+o+'" alt="default-material"></p><p>First, create a new <strong>Sphere</strong> node in the <strong>Hierarchy</strong> panel, then continue to add a Directional Light and two Spotlights, setting them to surround the Sphere, as shown in the following image:</p><p><img src="'+a+'" alt="using Light"></p><p>After the scene is built, select the browser preview above the editor and you can see the draw call in the bottom left corner of the web preview:</p><p><img src="'+r+'" alt="Draw Call"></p><p>We can use a third party software such as RenderDoc to open the Frame Debug to see how these lights are rendered to the screen:</p><p><img src="'+n+'" alt="Frame Debug"></p><p>As shown in the image above, the first rendering is the lighting of <strong>Directional Light</strong>:</p><p><img src="'+l+'" alt="main light pass"></p><p>The second rendering is the lighting of <strong>Spotlight 1</strong>:</p><p><img src="'+p+'" alt="ForwardAdd pass"></p><p>The third rendering is the lighting of <strong>Spotlight 2</strong>:</p><p><img src="'+c+'" alt="ForwardAdd pass"></p><p>This type of rendering is the <strong>Forward-Pipeline</strong> that supports multiple lighting models, and <strong>Forward</strong> generally consists of two <code>Pass</code>:</p><ul><li><p>The first <code>Pass</code> is <strong>BasePass</strong>, which is used to render the lighting of Directional Light.</p></li><li><p>The second <code>Pass</code> is <strong>LightPass</strong>, which is used to render the lighting of the remaining lights.</p></li></ul><p>Therefore, when an object is illuminated by more than one light at the same time, the Draw Call will also increase.</p>',19),g=[d];function m(u,_,f,w,P,b){return s(),t("div",null,g)}const T=e(h,[["render",m]]);export{x as __pageData,T as default};
