import{_ as s,c as e,o as a,a4 as i}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"Message System","description":"","frontmatter":{},"headers":[],"relativePath":"en/editor/extension/messages.md","filePath":"en/editor/extension/messages.md","lastUpdated":1712305443000}'),t={name:"en/editor/extension/messages.md"},n=i(`<h1 id="message-system" tabindex="-1">Message System <a class="header-anchor" href="#message-system" aria-label="Permalink to &quot;Message System&quot;">​</a></h1><p>There are many independent processes running in Cocos Creator, and they are isolated from each other. When you need to interact with other functions within the editor, you need to do so through the &quot;messaging mechanism&quot;.</p><p>The &quot;Message System&quot; in the editor is a functional extension of the IPC (Inter-Process Communication) wrapper. This system carries the burden of communication and interaction within the editor.</p><p>For more information about multi-process architecture and cross-process communication, please refer to the document <a href="./package">Extension Infrastructure</a>.</p><h2 id="message-types" tabindex="-1">Message Types <a class="header-anchor" href="#message-types" aria-label="Permalink to &quot;Message Types&quot;">​</a></h2><p>There are two types of messages within the Cocos Creator system.</p><ol><li>Normal message: a message is sent to a function (extension) on its own initiative</li><li>Broadcast messages: a function (extension) sends a notification to everyone that an operation has been completed</li></ol><h3 id="normal-messages" tabindex="-1">Normal messages <a class="header-anchor" href="#normal-messages" aria-label="Permalink to &quot;Normal messages&quot;">​</a></h3><p>It can be understood as an external interface, for example the engine&#39;s <strong>Scene Editor</strong> module has defined a <code>query-node</code> message for querying nodes, as follows:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scene&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;contributions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;query-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;queryNode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For more information on how to customize messages and the meaning of the message fields, please refer to the document <a href="./contributions-messages">Customized Messages</a>.</p><p>When we want to query a scene node in an extension we have written, we can use this message to do so, as follows:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Editor.Message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scene&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;query-node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uuid);</span></span></code></pre></div><p>This message is similar to a remote process call (RPC), where the <code>info</code> object is part of the data on the actual node being queried.</p><blockquote><p><strong>Note</strong>: Since this is a remote call, <code>request</code> will not return immediately, so you need to use <code>await</code> to convert asynchronous to synchronous.</p></blockquote><h4 id="naming-convention-for-normal-messages" tabindex="-1">Naming Convention for Normal Messages <a class="header-anchor" href="#naming-convention-for-normal-messages" aria-label="Permalink to &quot;Naming Convention for Normal Messages&quot;">​</a></h4><p>Please use <strong>lowercase</strong> words, and no special characters, with <strong>-</strong> concatenated between words. For example, <code>open-panel</code>, <code>text-changed</code>.</p><h3 id="broadcast-messages" tabindex="-1">Broadcast Messages <a class="header-anchor" href="#broadcast-messages" aria-label="Permalink to &quot;Broadcast Messages&quot;">​</a></h3><p>A broadcast message is a notification to the outside world after the completion of an operation within a function.</p><h4 id="receive-broadcast-messages" tabindex="-1">Receive Broadcast Messages <a class="header-anchor" href="#receive-broadcast-messages" aria-label="Permalink to &quot;Receive Broadcast Messages&quot;">​</a></h4><p>For example, if the <strong>Scene Editor</strong> needs to notify everyone that a scene has been started after it has been started, the <strong>Scene Editor</strong> sends a broadcast message using the following code.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Editor.Message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">broadcast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scene:ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sceneUUID);</span></span></code></pre></div><p>If an extension wants to receive <code>scene:ready</code> messages, they need to be defined first in <code>package.json</code>, as follows:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;contributions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;scene:ready&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;initData&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The broadcast <code>scene:ready</code> message triggers the <code>initData</code> method in the &quot;hello-world&quot; extension whenever the scene is ready.</p><h4 id="sending-broadcast-messages" tabindex="-1">Sending Broadcast Messages <a class="header-anchor" href="#sending-broadcast-messages" aria-label="Permalink to &quot;Sending Broadcast Messages&quot;">​</a></h4><p>If an extension wants to send a broadcast message, it also needs to be defined in <code>package.json</code> first.</p><p>For example, &quot;hello-world&quot; will broadcast a message to other extensions when it is ready for data. As shown below:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;contributions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;scene:ready&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;initData&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;hello-world:ready&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;public&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-world ready notification.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>At the appropriate time, the following code is called within the &quot;hello-world&quot; extension to broadcast to everyone.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Editor.Message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">broadcast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello-world:ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p><strong>Note</strong>: Broadcast messages can have no <code>methods</code>, which means they don&#39;t listen. As shown in the definition above, it means that &quot;hello-world&quot; does not need to listen for its own initialization completion message.</p></blockquote><h4 id="naming-convention-for-broadcast-messages" tabindex="-1">Naming Convention for Broadcast Messages <a class="header-anchor" href="#naming-convention-for-broadcast-messages" aria-label="Permalink to &quot;Naming Convention for Broadcast Messages&quot;">​</a></h4><p>The format is <code>packageName:actionName</code>, and the following naming is legal.</p><ul><li>scene:ready</li><li>scene:query-node</li><li>hello-world:ready</li><li>hello-world:data-loaded</li></ul><p>Adding <code>packageName</code> prevents naming conflicts and makes it more intuitive to see which extension is listening to which broadcast message (action) when defining messages in <code>package.json</code>.</p><h2 id="view-the-list-of-messages" tabindex="-1">View the List of Messages <a class="header-anchor" href="#view-the-list-of-messages" aria-label="Permalink to &quot;View the List of Messages&quot;">​</a></h2><p>The list of messages that are available to the editor and extensions can be viewed in the <strong>Developer -&gt; Message Manager</strong> panel. For detailed definition rules, please refer to the documentation <a href="./contributions-messages">Custom Messages</a>.</p><h2 id="sending-messages-in-code" tabindex="-1">Sending Messages in Code <a class="header-anchor" href="#sending-messages-in-code" aria-label="Permalink to &quot;Sending Messages in Code&quot;">​</a></h2><p>The <code>send</code> method only sends the message and does not wait for a return. Use this method if you don&#39;t need to return data and don&#39;t care if execution completes.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Editor.Message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkgName, message, . .args);</span></span></code></pre></div><p>The <code>request</code> method returns a promise object that receives the data returned after the message has been processed.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Editor.Message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkgName, message, . . args);</span></span></code></pre></div><p>The <code>broadcast</code> method only sends, and sends to all function extensions that listen for the corresponding message.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Editor.Message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">broadcast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkgName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actionName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, . .args);</span></span></code></pre></div>`,45),o=[n];function h(l,p,r,d,k,c){return a(),e("div",null,o)}const u=s(t,[["render",h]]);export{E as __pageData,u as default};
