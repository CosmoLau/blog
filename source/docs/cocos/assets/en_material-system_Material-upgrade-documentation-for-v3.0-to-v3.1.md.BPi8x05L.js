import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"Cocos Creator 3.1 Material Upgrade Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/material-system/Material-upgrade-documentation-for-v3.0-to-v3.1.md","filePath":"en/material-system/Material-upgrade-documentation-for-v3.0-to-v3.1.md","lastUpdated":1712305443000}'),e={name:"en/material-system/Material-upgrade-documentation-for-v3.0-to-v3.1.md"},l=n(`<h1 id="cocos-creator-3-1-material-upgrade-guide" tabindex="-1">Cocos Creator 3.1 Material Upgrade Guide <a class="header-anchor" href="#cocos-creator-3-1-material-upgrade-guide" aria-label="Permalink to &quot;Cocos Creator 3.1 Material Upgrade Guide&quot;">​</a></h1><blockquote><p>This article will detail the considerations for upgrading Cocos Creator 3.0 materials to v3.1.</p></blockquote><h2 id="_1-shader-upgrades-and-changes" tabindex="-1">1. Shader upgrades and changes <a class="header-anchor" href="#_1-shader-upgrades-and-changes" aria-label="Permalink to &quot;1. Shader upgrades and changes&quot;">​</a></h2><h3 id="_1-1-built-in-header-file-changes" tabindex="-1">1.1 Built-in header file changes <a class="header-anchor" href="#_1-1-built-in-header-file-changes" aria-label="Permalink to &quot;1.1 Built-in header file changes&quot;">​</a></h3><p>The standard shader header <code>shading-standard</code> from v3.0 has become <code>standard-surface-entry</code> from v3.1, making the effect compatible with both the forward render pipeline and the deferred render pipeline.</p><p>The <code>cc-fog</code> header file from v3.0 is now <code>cc-fog-vs/fs</code> from v3.1, split into vertex shader and fragment shader versions.</p><h3 id="_1-2-vertex-shaders" tabindex="-1">1.2 Vertex shaders <a class="header-anchor" href="#_1-2-vertex-shaders" aria-label="Permalink to &quot;1.2 Vertex shaders&quot;">​</a></h3><ul><li><p><code>gl_Position</code></p><p>The main function name of <code>VS</code> in v3.1 has been changed from <code>vert</code> to <code>main</code>, and a new macro <code>gl_Position</code> has been added to assign a value to the return value.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    precision highp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Include your headfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;cc-fog-vs&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Note the change in the header file name here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fill in your data result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div></li></ul><h3 id="_1-3-fragment-shaders" tabindex="-1">1.3 Fragment shaders <a class="header-anchor" href="#_1-3-fragment-shaders" aria-label="Permalink to &quot;1.3 Fragment shaders&quot;">​</a></h3><ul><li><p><code>CC_STANDARD_SURFACE_ENTRY()</code></p><p>Load the standard shader header file <code>standard-surface-entry</code> and use the v3.1 standard shader output function <code>CC_STANDARD_SURFACE_ENTRY()</code> to replace the original v3.0 shader output function <code>frag()</code>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Include your headfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;cc-fog-fs&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Note the change in the header file name here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;standard-surface-entry&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Note the change in the name of the standard shader header file here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> surf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (out StandardSurface s) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CC_STANDARD_SURFACE_ENTRY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Standard shader output function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div></li></ul><h2 id="_2-deferred-render-pipeline" tabindex="-1">2. Deferred Render Pipeline <a class="header-anchor" href="#_2-deferred-render-pipeline" aria-label="Permalink to &quot;2. Deferred Render Pipeline&quot;">​</a></h2><h3 id="_2-1-deferred-render-pipeline" tabindex="-1">2.1 Deferred Render Pipeline <a class="header-anchor" href="#_2-1-deferred-render-pipeline" aria-label="Permalink to &quot;2.1 Deferred Render Pipeline&quot;">​</a></h3><p>The biggest difference between v3.1 and v3.0 is that v3.1 supports the <a href="./../render-pipeline/builtin-pipeline">deferred render pipeline</a>. The engine comes with a standard <code>standard-surface-entry</code> header file that supports both the forward render pipeline and the deferred render pipeline, which is used as follows:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCEffect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    techniques:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">deferred</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vert:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // your Vertex shader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        frag:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // your Fragment shader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        phase: deferred</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        propertyIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        blendState:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            targets:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // turn off blending</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            properties:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // your properties name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fill in your data here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    precision highp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;cc-global&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;shared-ubos&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;cc-fog-fs&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Note the change in the header file name here.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;standard-surface-entry&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Note the change in the name of the standard shader header file here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fill in your data here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> surf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (out StandardSurface s) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CC_STANDARD_SURFACE_ENTRY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Standard shader output function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fill in your data here</span></span></code></pre></div><h3 id="_2-2-render-pipeline-determination" tabindex="-1">2.2 Render pipeline determination <a class="header-anchor" href="#_2-2-render-pipeline-determination" aria-label="Permalink to &quot;2.2 Render pipeline determination&quot;">​</a></h3><p>The header file <code>standard-surface-entry</code> determines which render pipeline is selected, and the lighting calculation is in the file <code>shading-standard-additive</code>.</p><p>If it is a deferred render pipeline, the <code>deferred-lighting</code> effect file is called first, followed by the light calculation file <code>shading-standard-additive</code>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_STANDARD_SURFACE_ENTRY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                                 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_FORWARD_ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;shading-standard-additive&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#elif</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_PIPELINE_TYPE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_PIPELINE_TYPE_FORWARD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Determine if it is the forward render pipeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Fill in your data here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#elif</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_PIPELINE_TYPE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_PIPELINE_TYPE_DEFERRED</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Determine if it is the deferred render pipeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Fill in your data here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre></div><h2 id="_3-parameter-transfer-upgrade" tabindex="-1">3. Parameter transfer upgrade <a class="header-anchor" href="#_3-parameter-transfer-upgrade" aria-label="Permalink to &quot;3. Parameter transfer upgrade&quot;">​</a></h2><p>The macro for passing shadow parameters from vertex shaders to fragment shaders was originally <code>CCPassShadowParams</code> in v3.0, but was changed to <code>CC_TRANSFER_SHADOW</code> in v3.1.</p><p>The v3.1 vertex shader transfers <code>FOG</code> parameters to the fragment shader, using the <code>CC_TRANSFER_FOG</code> macro directly.</p><p>Version comparison:</p><ul><li><p>v3.0</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v_fog_factor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_TRANSFER_FOG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCPassShadowParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos);</span></span></code></pre></div></li><li><p>v3.1</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CC_TRANSFER_FOG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CC_TRANSFER_SHADOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos);</span></span></code></pre></div></li></ul>`,23),t=[l];function h(p,r,d,k,c,o){return i(),a("div",null,t)}const y=s(e,[["render",h]]);export{E as __pageData,y as default};
