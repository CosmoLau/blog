import{_ as s,v as n,b as a,R as l}from"./chunks/framework.5ffcbaff.js";const C=JSON.parse('{"title":"JsbBridgeWrapper 基于原生反射机制的事件处理","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/jsb-bridge-wrapper.md","filePath":"zh/manual/advanced-topics/jsb-bridge-wrapper.md"}'),e={name:"zh/manual/advanced-topics/jsb-bridge-wrapper.md"},p=l(`<h1 id="jsbbridgewrapper-基于原生反射机制的事件处理" tabindex="-1">JsbBridgeWrapper 基于原生反射机制的事件处理 <a class="header-anchor" href="#jsbbridgewrapper-基于原生反射机制的事件处理" aria-label="Permalink to &quot;JsbBridgeWrapper 基于原生反射机制的事件处理&quot;">​</a></h1><blockquote><p><strong>注意</strong>：在 v3.6 之后，jsb 模块将会逐步废弃，接口将会迁移到 cc 命名空间下的 native 模块。</p></blockquote><p>JsbBridgeWrapper 是基于事件机制，用于 JS 层与原生层进行通信的接口。</p><h2 id="建立于-jsbbridge-上的事件分发机制" tabindex="-1">建立于 JsbBridge 上的事件分发机制 <a class="header-anchor" href="#建立于-jsbbridge-上的事件分发机制" aria-label="Permalink to &quot;建立于 JsbBridge 上的事件分发机制&quot;">​</a></h2><p><code>JsbBridgeWrapper</code> 是封装在 <code>JsbBridge</code> 之上的事件派发机制，相对于 <code>JsbBridge</code> 而言它更方便易用。开发者不需要手动去实现一套消息收发机制就可以进行多事件的触发。但它不具有多线程稳定性或者是 100% 安全。如果遇到复杂需求场景，仍然建议自己实现对应的事件派发。</p><h2 id="jsbbridgewrapper-接口介绍" tabindex="-1">JsbBridgeWrapper 接口介绍 <a class="header-anchor" href="#jsbbridgewrapper-接口介绍" aria-label="Permalink to &quot;JsbBridgeWrapper 接口介绍&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Listener for jsbBridgeWrapper&#39;s event.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * It takes one argument as string which is transferred by jsbBridge.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnNativeEventListener</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">jsbBridgeWrapper</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/** If there&#39;s no event registered, the wrapper will create one  */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">addNativeEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">listener</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">OnNativeEventListener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Dispatch the event registered on Objective-C, Java etc.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * No return value in JS to tell you if it works.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dispatchEventToNative</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Remove all listeners relative.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">removeAllListenersForEvent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Remove the listener specified</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">removeNativeEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">listener</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">OnNativeEventListener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Remove all events, use it carefully!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">removeAllListeners</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>OnNativeEventListener</code> 是实际注册的 <strong>回调（callback）</strong> 类型，为了防止因为类型不匹配导致的低级错误，因此使用显示声明该类型。<code>addNativeEventListener</code> 中的第二个参数即为传入的 callback。当然也可以使用匿名函数代替。代码示例如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">native</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当事件 “A” 触发时， ‘this.A’ 方法会被调用</span></span>
<span class="line"><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">jsbBridgeWrapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addNativeEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">usr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">A</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">usr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p><strong>注意</strong>：这里是为了防止 this 指向不明确，所以使用匿名函数封装一层作用域。</p></blockquote><h3 id="jsbbridgewrapper-接口说明" tabindex="-1">JsbBridgeWrapper 接口说明 <a class="header-anchor" href="#jsbbridgewrapper-接口说明" aria-label="Permalink to &quot;JsbBridgeWrapper 接口说明&quot;">​</a></h3><h4 id="addnativeeventlistener" tabindex="-1">addNativeEventListener <a class="header-anchor" href="#addnativeeventlistener" aria-label="Permalink to &quot;addNativeEventListener&quot;">​</a></h4><p>增加一个事件监听。</p><p>参数：</p><ul><li>eventName: string 事件名称</li><li>listener: OnNativeEventListener 回调函数</li></ul><h4 id="dispatcheventtonative" tabindex="-1">dispatchEventToNative <a class="header-anchor" href="#dispatcheventtonative" aria-label="Permalink to &quot;dispatchEventToNative&quot;">​</a></h4><p>派发一个事件到原生层。</p><p>参数：</p><ul><li>eventName: string 事件名称</li><li>arg?: string 参数</li></ul><h4 id="removenativeeventlistener" tabindex="-1">removeNativeEventListener <a class="header-anchor" href="#removenativeeventlistener" aria-label="Permalink to &quot;removeNativeEventListener&quot;">​</a></h4><p>删除事件监听。</p><p>参数：</p><ul><li>eventName: string 事件名称</li><li>listener: OnNativeEventListener 要删除的回调函数</li></ul><h4 id="removealllisteners" tabindex="-1">removeAllListeners <a class="header-anchor" href="#removealllisteners" aria-label="Permalink to &quot;removeAllListeners&quot;">​</a></h4><p>删除所有的事件监听。</p><h2 id="原生平台-jsbbridgewrapper-的实现" tabindex="-1">原生平台 JsbBridgeWrapper 的实现 <a class="header-anchor" href="#原生平台-jsbbridgewrapper-的实现" aria-label="Permalink to &quot;原生平台 JsbBridgeWrapper 的实现&quot;">​</a></h2><p><code>JsbBridgeWrapper</code> 在不同平台有不同的实现，开发者可以通过下列方式进行查看：</p><ul><li><p>在 Objective-C 端，可查看 <a href="https://github.com/cocos/cocos-engine/blob/v3.7.0/native/cocos/platform/apple/JsbBridgeWrapper.h" target="_blank" rel="noreferrer">JsbBridgeWrapper.h</a> ：</p><div class="language-objc"><button title="Copy Code" class="copy"></button><span class="lang">objc</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//In Objective-C</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(^</span><span style="color:#A6ACCD;">OnScriptEventListener</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JsbBridgeWrapper</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NSObject</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Get the instance of JsbBridgetWrapper</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">+ </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">instancetype</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">sharedInstance</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Add a listener to specified event, if the event does not exist, the wrapper will create one. Concurrent listener will be ignored</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">- </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">addScriptEventListener</span><span style="color:#89DDFF;">:(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listener</span><span style="color:#89DDFF;">:(</span><span style="color:#A6ACCD;">OnScriptEventListener</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;font-style:italic;">listener</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Remove listener for specified event, concurrent event will be deleted. Return false only if the event does not exist</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">- </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">removeScriptEventListener</span><span style="color:#89DDFF;">:(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listener</span><span style="color:#89DDFF;">:(</span><span style="color:#A6ACCD;">OnScriptEventListener</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;font-style:italic;">listener</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Remove all listener for event specified.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">- </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">removeAllListenersForEvent</span><span style="color:#89DDFF;">:(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Remove all event registered. Use it carefully!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">- </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">removeAllListeners</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Dispatch the event with argument, the event should be registered in javascript, or other script language in future.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">- </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">dispatchEventToScript</span><span style="color:#89DDFF;">:(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">arg</span><span style="color:#89DDFF;">:(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Dispatch the event which is registered in javascript, or other script language in future.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">- </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">dispatchEventToScript</span><span style="color:#89DDFF;">:(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">end</span></span></code></pre></div></li><li><p>安卓可查看 <a href="https://github.com/cocos/cocos-engine/blob/v3.7.0/native/cocos/platform/android/java/src/com/cocos/lib/JsbBridgeWrapper.java" target="_blank" rel="noreferrer">JsbBridgeWrapper.java</a>：</p><div class="language-JAVA"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// In JAVA</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JsbBridgeWrapper</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnScriptEventListener</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onScriptEvent</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Add a listener to specified event, if the event does not exist, the wrapper will create one. Concurrent listener will be ignored</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addScriptEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnScriptEventListener</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">listener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Remove listener for specified event, concurrent event will be deleted. Return false only if the event does not exist</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeScriptEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnScriptEventListener</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">listener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Remove all listener for event specified.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeAllListenersForEvent</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Remove all event registered. Use it carefully!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeAllListeners</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">eventMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Dispatch the event with argument, the event should be registered in javascript, or other script language in future.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dispatchEventToScript</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Dispatch the event which is registered in javascript, or other script language in future.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dispatchEventToScript</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>Huawei HarmonyOS 也可以通过 <a href="https://github.com/cocos/cocos-engine/blob/v3.7.0/native/cocos/platform/ohos/libcocos/src/main/java/com/cocos/lib/JsbBridgeWrapper.java" target="_blank" rel="noreferrer">JsbBridgeWrapper.java</a> 查看其实现方式。</p></li></ul><h2 id="使用-jsbbridgewrapper" tabindex="-1">使用 JsbBridgeWrapper <a class="header-anchor" href="#使用-jsbbridgewrapper" aria-label="Permalink to &quot;使用 JsbBridgeWrapper&quot;">​</a></h2><p>常见的需求如数据存放在原生层，当需要将数据取至 JS 层时，可以通过 JsbBridgeWrapper 实现。</p><p>下文通过一个示例说明，如何通过原生的回调结果改变 label 内容，当原生层的事件被触发时，将目标文本字符回传给 JS 层。</p><h3 id="注册-js-事件" tabindex="-1">注册 JS 事件 <a class="header-anchor" href="#注册-js-事件" aria-label="Permalink to &quot;注册 JS 事件&quot;">​</a></h3><p>JS 层需要首先注册一个 <code>changeLabelContent</code> 事件监听。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public </span><span style="color:#82AAFF;">changeLabelContent</span><span style="color:#A6ACCD;">(user: string): </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> I&#39;m K</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">labelForContent</span><span style="color:#89DDFF;">!.</span><span style="color:#A6ACCD;">string</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> ! I&#39;m K</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">jsbBridgeWrapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addNativeEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">changeLabelContent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">usr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">changeLabelContent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">usr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>当 JS 层的 <code>changeLabelContent</code> 事件被触发时，标签的内容会变成对应的字符串组合。接下来需要处理原生的事件注册。</p><h3 id="原生事件注册与派发" tabindex="-1">原生事件注册与派发 <a class="header-anchor" href="#原生事件注册与派发" aria-label="Permalink to &quot;原生事件注册与派发&quot;">​</a></h3><ul><li><p>在 Objective-C 端使用下列代码：</p><div class="language-Objc"><button title="Copy Code" class="copy"></button><span class="lang">Objc</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Objective-C</span></span>
<span class="line"><span style="color:#A6ACCD;">JsbBridgeWrapper</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">JsbBridgeWrapper </span><span style="color:#82AAFF;">sharedInstance</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">OnScriptEventListener requestLabelContent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">^</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">NSString</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> arg</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    JsbBridgeWrapper</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">JsbBridgeWrapper </span><span style="color:#82AAFF;">sharedInstance</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">m </span><span style="color:#82AAFF;">dispatchEventToScript</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">@&quot;</span><span style="color:#C3E88D;">changeLabelContent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">@&quot;</span><span style="color:#C3E88D;">Charlotte</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">m </span><span style="color:#82AAFF;">addScriptEventListener</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">@&quot;</span><span style="color:#C3E88D;">requestLabelContent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listener</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">requestLabelContent</span><span style="color:#89DDFF;">];</span></span></code></pre></div></li><li><p>在 JAVA 端使用如下代码：</p><div class="language-JAVA"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JAVA</span></span>
<span class="line"><span style="color:#C792EA;">JsbBridgeWrapper</span><span style="color:#A6ACCD;"> jbw </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JsbBridgeWrapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">jbw</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addScriptEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">requestLabelContent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg </span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@JAVA: here is the argument transport in</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    jbw</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatchEventToScript</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">changeLabelContent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Charlotte</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><blockquote><p><strong>注意</strong>：JAVA 可以通过匿名函数的方法来实现 interface 的需求，此处写法简化。</p></blockquote></li></ul><p>这里原生的返回值被设置成固定字符，但开发者可以根据需求实现异步亦或是延后的字符赋值，时机并非固定。简而言之，当原生收到 <code>requestLabelContent</code> 的事件时，原生将会反过来触发 JS 层的 <code>changeLabelContent</code> 的事件，并将字符作为事件触发的传参。</p><h3 id="在场景中派发事件" tabindex="-1">在场景中派发事件 <a class="header-anchor" href="#在场景中派发事件" aria-label="Permalink to &quot;在场景中派发事件&quot;">​</a></h3><p>最后一步，我们在场景中添加一个按钮和对应的事件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 按钮点击事件 SAY HELLO</span></span>
<span class="line"><span style="color:#A6ACCD;">public </span><span style="color:#82AAFF;">sayHelloBtn</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">jsbBridgeWrapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatchEventToNative</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">requestLabelContent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>最终的效果和 JsbBridge 的测试例效果相同。点击 <code>SAY HELLO</code> 按钮，第一行的内容会改变为打过招呼的信息，否则即为失败。</p><p>使用 <code>JsbBridgeWrapper</code> 模块时，开发者不需要自己去维护多余的机制，只需要关心是否正确注册和取消注册即可。</p>`,43),o=[p];function t(r,c,i,y,F,D){return n(),a("div",null,o)}const d=s(e,[["render",t]]);export{C as __pageData,d as default};
