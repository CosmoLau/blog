import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.uQk9_EO2.js";const u=JSON.parse('{"title":"Native Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced-topics/native-plugins/brief.md","filePath":"en/advanced-topics/native-plugins/brief.md","lastUpdated":1712305443000}'),n={name:"en/advanced-topics/native-plugins/brief.md"},t=e(`<h1 id="native-plugins" tabindex="-1">Native Plugins <a class="header-anchor" href="#native-plugins" aria-label="Permalink to &quot;Native Plugins&quot;">​</a></h1><blockquote><p>Notice: Native plugin support for 3.6.2 is broken, please upgrade to 3.6.3 or later.</p></blockquote><p>Native Plugins are part of the editor plugins. By calling JSB interfaces (e.g. export with <code>sebind</code>) through native plugins, developers can extend the ability of JS scripts to call C++ interfaces, which can be very beneficial for solving script performance bottles and reusing existing codebases. As the engine is upgraded in the future, the native plugins will open up more features.</p><h2 id="cooperation-with-existing-editor-extensions" tabindex="-1">Cooperation with existing <em>Editor Extensions</em> <a class="header-anchor" href="#cooperation-with-existing-editor-extensions" aria-label="Permalink to &quot;Cooperation with existing *Editor Extensions*&quot;">​</a></h2><p>Native plugins can exist independently of editor extensions, and users can use native plug-ins by copying them to the specified directory.</p><p>At the same time, native plugins complement the existing editor extension system, extending the game&#39;s runtime capabilities. Developers use the ability of editor extensions to manage native plugins, such as download/switch/version upgrade, etc.</p><h2 id="installing-dependencies" tabindex="-1">Installing Dependencies <a class="header-anchor" href="#installing-dependencies" aria-label="Permalink to &quot;Installing Dependencies&quot;">​</a></h2><p>In a few environments without Cocos Creator installed, <a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer">NodeJS</a> version 8.0 or higher is required to support plugin configuration parsing. You can set the environment variable <code>PATH</code>, or specify it by setting the <code>NODE_EXECUTABLE</code> variable in <code>CMakeLists.txt</code>.</p><p>Or set the environment variable <code>NODE_EXECUTABLE</code> to the full path to node. Starting with 3.6.2, if CMake still does not locate NodeJS, you can set <code>NODE_EXECUTABLE</code> directly in <code>native/engine/common/localCfg.cmake</code>.</p><h2 id="example-of-the-plugin-s-directory-structure" tabindex="-1">Example of the plugin&#39;s directory structure <a class="header-anchor" href="#example-of-the-plugin-s-directory-structure" aria-label="Permalink to &quot;Example of the plugin&#39;s directory structure&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── cc_plugin.json</span></span>
<span class="line"><span>├── android</span></span>
<span class="line"><span>│ ├── arm64-v8a</span></span>
<span class="line"><span>│ ├── armeabi-v7a</span></span>
<span class="line"><span>│ ├── x86</span></span>
<span class="line"><span>│ └─ x86_64</span></span>
<span class="line"><span>├─ ios</span></span>
<span class="line"><span>│ ├── include</span></span>
<span class="line"><span>│ └── lib</span></span>
<span class="line"><span>├─ mac</span></span>
<span class="line"><span>│ ├── include</span></span>
<span class="line"><span>│ └── lib</span></span>
<span class="line"><span>└─ windows</span></span>
<span class="line"><span>    ├─ include</span></span>
<span class="line"><span>    └── lib</span></span></code></pre></div><p>The file <code>cc_plugin.json</code> provides the information necessary to load the plugin, and is the identifier of the native plugin. Each supported native platform corresponds to a directory that contains at least one <code>&lt;PackageName&gt;-Config.cmake</code> file. The build system will use CMake&#39;s <a href="https://cmake.org/cmake/help/latest/command/find_package.html#id7" target="_blank" rel="noreferrer"><code>find_package</code></a> mechanism to locate or link to the required library files.</p><p>If there are cross-platform source files or CMake configurations in the plugin, these files can be merged into the top-level directory. For example: <a href="https://github.com/PatriceJiang/ccplugin_tutorial/tree/main/NewProject/native/plugins/hello_cocos" target="_blank" rel="noreferrer">example project</a></p><h2 id="description-file-cc-plugin-json-format" tabindex="-1">Description file <code>cc_plugin.json</code> format <a class="header-anchor" href="#description-file-cc-plugin-json-format" aria-label="Permalink to &quot;Description file \`cc_plugin.json\` format&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// required: plugin name</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// required: plugin version</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;engine-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mandatory: the range of the corresponding engine version</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// required: the author of the plugin</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// required: description of the plugin</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string[];       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional: list of supported platforms, all native platforms are supported by default if not filled. Including windows, android, mac, ios</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;disabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional: Disable plugins on all platforms</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;disable-by-platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string[];    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional: Disable plugins for the specified platform</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mandatory: the libraries included in the plugin, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mandatory: the name of the corresponding \`find_package\`, consistent with the first parameter of \`CC_PLUGIN_ENTRY\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;depends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string[];     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional: depends on other module names </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string[];           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional: re-qualify the supported native platforms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>engine-version</code> can specify a version range and exclude specific versions, for example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;engine-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3.3 &lt;= 3.6.0 !3.5.2 || 4.x&quot;</span></span></code></pre></div><h3 id="example-file" tabindex="-1">Example file <a class="header-anchor" href="#example-file" aria-label="Permalink to &quot;Example file&quot;">​</a></h3><p>Example of description file <code>cc_plugin.json</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-cocos-demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo group&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;engine-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3.6.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello_cocos_glue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;platforms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mac&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iOS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="installing-native-plugins" tabindex="-1">Installing Native Plugins <a class="header-anchor" href="#installing-native-plugins" aria-label="Permalink to &quot;Installing Native Plugins&quot;">​</a></h2><p>Developers can download and enable editor extensions from the Store that contain native plugins, and complete the installation of the plugins into the <code>extensions</code> directory. You can also get the plugin archive from the forums and manually extract it to the <code>native/</code> directory or its subdirectories.</p><p>If you want to disable the plugin, or disable it only in a special platform, you can change the relevant fields(<code>disabled</code> and <code>disable-by-platforms</code>) in <code>cc_plugin.json</code>.</p><blockquote><p><strong>Note</strong>: Native plugins require CMake 3.12+, Android projects need to <a href="https://developer.android.com/studio/projects/install-ndk#vanilla_cmake" target="_blank" rel="noreferrer">specify cmake version</a> to 3.18.1.</p></blockquote><h2 id="creating-native-plugins" tabindex="-1">Creating native plugins <a class="header-anchor" href="#creating-native-plugins" aria-label="Permalink to &quot;Creating native plugins&quot;">​</a></h2><p>Cocos native projects are managed using CMake. Simply put, a native plugin is a search directory for <code>find_package</code> on specific platform.</p><p>As long as the directory matches the cmake find_package search rules, the plugin will load correctly, regardless of whether it is source code or precompiled libraries. Therefore, the development process of a native plugin is the process of providing the cmake configuration and related resources, and writing <code>cc_plugin.json</code>.</p><p>See <a href="./tutorial">Cocos Native Plugin Quick Tutorial</a> to learn more about native plugins.</p>`,28),l=[t];function p(o,r,h,d,c,k){return a(),i("div",null,l)}const E=s(n,[["render",p]]);export{u as __pageData,E as default};
