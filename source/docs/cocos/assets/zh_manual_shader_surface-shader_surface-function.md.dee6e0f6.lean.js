import{_ as t,v as a,b as s,R as e}from"./chunks/framework.5ffcbaff.js";const i=JSON.parse('{"title":"Surface Shader 可替换的内置函数","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/surface-shader/surface-function.md","filePath":"zh/manual/shader/surface-shader/surface-function.md"}'),o={name:"zh/manual/shader/surface-shader/surface-function.md"},d=e(`<h1 id="surface-shader-可替换的内置函数" tabindex="-1">Surface Shader 可替换的内置函数 <a class="header-anchor" href="#surface-shader-可替换的内置函数" aria-label="Permalink to &quot;Surface Shader 可替换的内置函数&quot;">​</a></h1><p>Surface Shader 统一了着色流程，同时向用户提供了大量的自定义函数，大家可以根据自己的需求，利用宏机制，重写相关函数。</p><h2 id="_1、原理" tabindex="-1">1、原理 <a class="header-anchor" href="#_1、原理" aria-label="Permalink to &quot;1、原理&quot;">​</a></h2><p>Surface Shader 提供的自定义函数，在内部都有一个默认版本，并且在适合的时候被调用。可以参考 <a href="./shader-code-flow.html">Surface Shader 执行流程</a>了解详情。</p><p>这些函数通常以 <code>Surfaces+Shader类型名+Modify+属性</code> 方式全名，比如：</p><ul><li>SurfacesVertexModifyLocalPos</li><li>SurfacesVertexModifyLocalNormal</li><li>SurfacesVertexModifyLocalTangent</li></ul><p>所有函数可以在 <a href="https://github.com/cocos/cocos-engine/tree/v3.7.0/editor/assets/chunks/surfaces/default-functions" target="_blank" rel="noreferrer"><code>internal/chunks/surfaces/default-functions/</code></a> 中查看。</p><p><strong>如果你想替换某函数的实现，可以通过预定义该函数对应的宏来完成</strong>。</p><p>比如，可以预先定义 <code>CC_SURFACES_VERTEX_MODIFY_WORLD_POS</code> 宏，让 Surface Shader 使用你定义的函数来计算世界坐标，示例代码如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CC_SURFACES_VERTEX_MODIFY_WORLD_POS</span></span>
<span class="line"><span style="color:#C792EA;">vec3</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SurfacesVertexModifyWorldPos</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in SurfacesStandardVertexIntermediate </span><span style="color:#A6ACCD;font-style:italic;">In</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  vec3 worldPos </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">In</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">worldPos</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">worldPos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cc_time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">worldPos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">worldPos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cos</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cc_time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">worldPos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> worldPos</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果对 Surface Shader 中的函数替换机制不熟悉，可以先参考 <a href="./function-replace.html">使用宏定义实现函数替换</a>。</p><blockquote><p>用这种方式的好处是可以方便地扩展多种不同的材质数据结构、光照模型和渲染用途，并且不用对内置的 Surface Shader 流程进行修改。</p></blockquote><h2 id="_2、vs-对应的常用函数列表" tabindex="-1">2、VS 对应的常用函数列表 <a class="header-anchor" href="#_2、vs-对应的常用函数列表" aria-label="Permalink to &quot;2、VS 对应的常用函数列表&quot;">​</a></h2><p>可用宏替换的 VS 内置函数定义在：internal/chunks/surfaces/default-functions/common-vs.chunk 文件中。</p><p>在 VS 中的内置函数参数均为 <code>SurfacesStandardVertexIntermediate</code> 结构体，存放的是 VS 输入输出的数据。用户无需关心具体的顶点输入输出流程处理，只需要聚焦到某个数据的修改即可。</p><table><thead><tr><th>预先定义宏</th><th>对应的函数定义</th><th>对应的材质模型</th><th>功能说明</th></tr></thead><tbody><tr><td>CC_SURFACES_VERTEX_MODIFY_LOCAL_POS</td><td>vec3 SurfacesVertexModifyLocalPos</td><td>Common</td><td>返回修改后的模型空间坐标</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL</td><td>vec3 SurfacesVertexModifyLocalNormal</td><td>Common</td><td>返回修改后的模型空间法线</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT</td><td>vec4 SurfacesVertexModifyLocalTangent</td><td>Common</td><td>返回修改后的模型空间切线和镜像法线标记</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA</td><td>void SurfacesVertexModifyLocalSharedData</td><td>Common</td><td>如果某些贴图和计算需要在多个材质节点中使用，可在此函数中进行，在世界变换前调用，直接修改 SurfaceStandardVertexIntermediate 结构体内的三个Local参数</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_WORLD_POS</td><td>vec3 SurfacesVertexModifyWorldPos</td><td>Common</td><td>返回修改后的世界空间坐标（世界空间动画）</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_CLIP_POS</td><td>vec4 SurfacesVertexModifyClipPos</td><td>Common</td><td>返回修改后的剪裁（NDC）空间坐标（通常用于修改深度）</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_UV</td><td>void SurfacesVertexModifyUV</td><td>Common</td><td>修改结构体内的 UV0 和 UV1 （使用 tiling 等）</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL</td><td>vec3 SurfacesVertexModifyWorldNormal</td><td>Common</td><td>返回修改后的世界空间法线（世界空间动画）</td></tr><tr><td>CC_SURFACES_VERTEX_MODIFY_ SHARED_DATA</td><td>void SurfacesVertexModify SharedData</td><td>Common</td><td>如果某些贴图和计算需要在多个材质节点中使用，可在此函数中进行，直接修改 SurfaceStandardVertexIntermediate 结构体内的参数，减少性能耗费</td></tr></tbody></table><h2 id="_3、fs-对应的常用函数列表" tabindex="-1">3、FS 对应的常用函数列表 <a class="header-anchor" href="#_3、fs-对应的常用函数列表" aria-label="Permalink to &quot;3、FS 对应的常用函数列表&quot;">​</a></h2><p>FS 由 PBR 和 Toon 两个部分组成，分别在下面两个文件中：</p><ul><li>internal/chunks/surfaces/default-functions/standard-fs.chunk</li><li>internal/chunks/surfaces/default-functions/toon-vs.chunk</li></ul><p>FS 中的函数，大部分为无参函数，用户需要结合 <a href="./fs-input.html">FS 输入值</a> 来做处理。对于一些特殊用途的函数，也提供了对应的参数。具体属于哪种情况请参考函数定义。</p><table><thead><tr><th>预先定义宏</th><th>对应的函数定义</th><th>对应的材质模型</th><th>功能说明</th></tr></thead><tbody><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ BASECOLOR_AND_TRANSPARENCY</td><td>vec4 SurfacesFragmentModify BaseColorAndTransparency</td><td>Common</td><td>返回修改后的基础色（rgb 通道）和透明值（a 通道）</td></tr><tr><td>CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY</td><td>vec4 SurfacesFragmentModify AlphaClipOnly</td><td>Common</td><td>不需要获取颜色仅处理透贴的Pass中使用。如渲染到阴影图等，不重载此函数可能导致阴影没有透贴效果</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ WORLD_NORMAL</td><td>vec3 SurfacesFragmentModify WorldNormal</td><td>Common</td><td>返回修改后的像素法线（通常是法线贴图）</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ SHARED_DATA</td><td>void SurfacesFragmentModify SharedData</td><td>Common</td><td>若某些贴图和计算需要在多个材质节点中使用，可在此函数中进行，直接修改 Surface 结构体内的参数，减少性能耗费，类似legacy shader中的surf()函数。<strong>需要在定义函数前 include 必要的头文件</strong></td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ WORLD_TANGENT_AND_BINORMAL</td><td>void SurfacesFragmentModify WorldTangentAndBinormal</td><td>Standard PBR</td><td>修改 Surface 结构体内的世界切空间向量</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ EMISSIVE</td><td>vec3 SurfacesFragmentModify Emissive</td><td>Standard PBR</td><td>返回修改后的自发光颜色</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ PBRPARAMS</td><td>vec4 SurfacesFragmentModify PBRParams</td><td>Standard PBR</td><td>返回修改后的 PBR 参数（ao, roughness, metallic, specularIntensity）</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ ANISOTROPY_PARAMS</td><td>vec4 SurfacesFragmentModify AnisotropyParams</td><td>Standard PBR</td><td>返回修改后的各向异性参数（rotation, shape, unused, unused）</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ BASECOLOR_AND_TOONSHADE</td><td>void SurfacesFragmentModify BaseColorAndToonShade</td><td>Toon</td><td>修改卡通渲染基础色</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ TOON_STEP_AND_FEATHER</td><td>vec4 SurfacesFragmentModify ToonStepAndFeather</td><td>Toon</td><td>返回修改后的参数</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ TOON_SHADOW_COVER</td><td>vec4 SurfacesFragmentModify ToonShadowCover</td><td>Toon</td><td>返回修改后的参数</td></tr><tr><td>CC_SURFACES_FRAGMENT_MODIFY_ TOON_SPECULAR</td><td>vec4 SurfacesFragmentModify ToonSpecular</td><td>Toon</td><td>返回修改后的参数</td></tr><tr><td>CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT</td><td>void SurfacesLightingModifyFinalResult</td><td>Common</td><td>自定义光照模型，可以在之前计算的光照结果上再次修改，比如添加轮廓光等。<strong>需要在定义函数前 include 必要的头文件</strong></td></tr></tbody></table>`,21),r=[d];function n(l,c,p,F,_,S){return a(),s("div",null,r)}const A=t(o,[["render",n]]);export{i as __pageData,A as default};
