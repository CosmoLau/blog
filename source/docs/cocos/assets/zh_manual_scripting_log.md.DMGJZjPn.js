import{_ as a,c as e,o as s,a5 as n}from"./chunks/framework.CqnjdYks.js";const m=JSON.parse('{"title":"在引擎内添加 Log 信息","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/scripting/log.md","filePath":"zh/manual/scripting/log.md"}'),p={name:"zh/manual/scripting/log.md"},o=n(`<h1 id="在引擎内添加-log-信息" tabindex="-1">在引擎内添加 Log 信息 <a class="header-anchor" href="#在引擎内添加-log-信息" aria-label="Permalink to &quot;在引擎内添加 Log 信息&quot;">​</a></h1><p>本文档主要说明如何按照正确的规范在引擎内部代码中添加新的 Log 信息（包含 log、warning、error）。</p><h2 id="log-信息机制和背景" tabindex="-1">Log 信息机制和背景 <a class="header-anchor" href="#log-信息机制和背景" aria-label="Permalink to &quot;Log 信息机制和背景&quot;">​</a></h2><p>目前 Cocos Creator 中的 Log 信息是以一个错误信息表形式独立于引擎存储的，具体存储在 engine 目录下的 <code>EngineErrorMap.md</code> 中。而在引擎代码中，不允许直接以字符串形式写日志、警告、错误等信息，必须以下面三个 API 来书写：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import { logID, warnID, errorID } from &#39;core/platform/debug&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>logID(id, ...params);</span></span>
<span class="line"><span>warnID(id, ...params);</span></span>
<span class="line"><span>errorID(id, ...params);</span></span></code></pre></div><p>这样做的主要目的是减少字符串在引擎源码中所占据的包体。</p><h2 id="engineerrormap-的编写规范" tabindex="-1">EngineErrorMap 的编写规范 <a class="header-anchor" href="#engineerrormap-的编写规范" aria-label="Permalink to &quot;EngineErrorMap 的编写规范&quot;">​</a></h2><p>EngineErrorMap 按照一百位来做大模块划分，总共四位，从 0000 到 9900，也就是说支持最多 100 个大模块。十位数是用来划分子模块的，或者也可以直接以连续的形式排列，这个由模块负责人决定。</p><p>由于历史原因，目前没有按照严格的优先级顺序来做排序，新建的模块可以简单得往后顺延。未来我们会做更好的排序管理和整理。</p><p>具体错误信息的编写规范如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>### 4 number ID</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Message in english.</span></span></code></pre></div><p>比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>### 8300</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Should only one camera exists, please check your project.</span></span></code></pre></div><p>信息中支持使用 <code>%s</code>、<code>%d</code>、<code>%f</code> 这样的参数接收符，运行输出 LOG 时会按照参数顺序依次拼接到信息中。</p><h2 id="engineerrormap-的维护" tabindex="-1">EngineErrorMap 的维护 <a class="header-anchor" href="#engineerrormap-的维护" aria-label="Permalink to &quot;EngineErrorMap 的维护&quot;">​</a></h2><p>EngineErrorMap 修改后，如果希望代码中的调用生效，需要在 engine 目录下执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt; gulp build-debug-infos</span></span></code></pre></div><p><code>EngineErrorMap.md</code> 的修改也要跟随引擎的其他修改提交到 git。</p>`,18),i=[o];function r(t,l,c,d,g,h){return s(),e("div",null,i)}const b=a(p,[["render",r]]);export{m as __pageData,b as default};
