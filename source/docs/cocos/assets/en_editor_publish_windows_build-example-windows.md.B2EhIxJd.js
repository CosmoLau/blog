import{_ as e,c as i,o,a4 as t}from"./chunks/framework.uQk9_EO2.js";const s="/docs/cocos/assets/project-build-menu.4g6t1_w4.png",a="/docs/cocos/assets/build-panel-windows.Do1Ml77I.png",n="/docs/cocos/assets/build-open-path-windows.BHvOSR80.png",r="/docs/cocos/assets/project-folder-windows.BRCMJqFx.png",l="/docs/cocos/assets/vs-showcase-windows.BBB1Ei0y.png",d="/docs/cocos/assets/run-windows.D1EzLDVR.png",p="/docs/cocos/assets/run-windows-800to400.DEZKiHfC.png",_=JSON.parse('{"title":"Windows Publishing Example","description":"","frontmatter":{},"headers":[],"relativePath":"en/editor/publish/windows/build-example-windows.md","filePath":"en/editor/publish/windows/build-example-windows.md","lastUpdated":1712305443000}'),c={name:"en/editor/publish/windows/build-example-windows.md"},h=t('<h1 id="windows-publishing-example" tabindex="-1">Windows Publishing Example <a class="header-anchor" href="#windows-publishing-example" aria-label="Permalink to &quot;Windows Publishing Example&quot;">​</a></h1><p>This guide demonstrates how to publish a project created with Cocos Creator as a Windows application. Before proceeding, make sure you have the following prerequisites:</p><ul><li>A Windows computer</li><li>C++ development environment</li></ul><h2 id="installing-c-development-environment" tabindex="-1">Installing C++ Development Environment <a class="header-anchor" href="#installing-c-development-environment" aria-label="Permalink to &quot;Installing C++ Development Environment&quot;">​</a></h2><p>First, you need to install <a href="https://www.visualstudio.com/downloads/download-visual-studio-vs" target="_blank" rel="noreferrer">Visual Studio 2019/2022</a>.</p><p>During the installation of Visual Studio, make sure to select the modules <code>Desktop development with C++</code> and <code>Game development with C++</code>.</p><blockquote><p><strong>Note</strong>: Within the Game development with C++ module, there is an option for <strong>Cocos</strong>. Please <strong>do not</strong> select this option.</p></blockquote><h2 id="publishing-process" tabindex="-1">Publishing Process <a class="header-anchor" href="#publishing-process" aria-label="Permalink to &quot;Publishing Process&quot;">​</a></h2><h3 id="prepare-a-project-for-testing" tabindex="-1">Prepare a Project for Testing <a class="header-anchor" href="#prepare-a-project-for-testing" aria-label="Permalink to &quot;Prepare a Project for Testing&quot;">​</a></h3><p>Open an existing project or create a new test project.</p><h3 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Build&quot;">​</a></h3><p><img src="'+s+'" alt="project-build-menu"></p><p>As shown in the above image, select <strong>Project -&gt; Build</strong> from the top menu of Cocos Creator to open the <strong>Build</strong> panel.</p><p><img src="'+a+'" alt="build-panel-windows"></p><h4 id="general-options" tabindex="-1">General Options <a class="header-anchor" href="#general-options" aria-label="Permalink to &quot;General Options&quot;">​</a></h4><p>In the left section of the image above, you can find the common parameters that need to be configured for all platforms supported by Cocos Creator. For more details, refer to <a href="./../build-options">General Build Options</a>.</p><h4 id="windows-specific-options" tabindex="-1">Windows-specific Options <a class="header-anchor" href="#windows-specific-options" aria-label="Permalink to &quot;Windows-specific Options&quot;">​</a></h4><p>Select the platform as <strong>Windows</strong>, and scroll down the panel to see the native and Windows-specific options as shown in the image on the right. For more information, refer to <a href="./../native-options">General Native Build Options</a> and <a href="./build-options-windows">Build Options - Windows</a>.</p><h4 id="start-to-build" tabindex="-1">Start to Build <a class="header-anchor" href="#start-to-build" aria-label="Permalink to &quot;Start to Build&quot;">​</a></h4><p>Once the configuration is complete, click the <strong>Build</strong> button to generate the Visual Studio <code>*.sln</code> project.</p><p>After a successful build, you can click the open file button as shown below to open the generated project folder.</p><p><img src="'+n+'" alt="build-open-path-windows"></p><p>If you haven&#39;t changed the build path, you can find the <code>build/windows/proj</code> directory located in the project root, which contains the following files:</p><p><img src="'+r+'" alt="project-folder-windows"></p><h3 id="compile-and-run-in-visual-studio" tabindex="-1">Compile and Run in Visual Studio <a class="header-anchor" href="#compile-and-run-in-visual-studio" aria-label="Permalink to &quot;Compile and Run in Visual Studio&quot;">​</a></h3><p>Double-click on <code>build/windows/proj/&lt;project_name&gt;.sln</code> to open the project with Visual Studio.</p><p><img src="'+l+'" alt="vs-showcase-windows"></p><p>As shown in the image above, the project includes the <code>cocos-engine</code> library and <strong>project code</strong>. Click the compile and run button to start the project.</p><p><img src="'+d+`" alt="run-windows"></p><blockquote><p><code>*.sln</code> is a Visual Studio project solution file, and it is recommended to open it with Visual Studio. You can also use IDEs such as <strong>Rider</strong> that support <code>*.sln</code> files.</p></blockquote><h3 id="modifying-the-resolution" tabindex="-1">Modifying the Resolution <a class="header-anchor" href="#modifying-the-resolution" aria-label="Permalink to &quot;Modifying the Resolution&quot;">​</a></h3><p>You can modify the resolution in <code>native/engine/common/classes/Game.cpp</code> using the <code>_windowInfo</code> property.</p><p>The default resolution is set to <strong>800 x 600</strong>. Let&#39;s take an example of changing it to <strong>800 x 400</strong>.</p><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Game</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _windowInfo.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GAME_NAME;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // configure window size</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _windowInfo.width  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _windowInfo.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>After making the modification, compile and run again in Visual Studio. The effect will be as shown in the image below:</p><p><img src="`+p+'" alt="run-windows-800to400"></p><h2 id="read-more" tabindex="-1">Read More <a class="header-anchor" href="#read-more" aria-label="Permalink to &quot;Read More&quot;">​</a></h2><h3 id="script-native-communication" tabindex="-1">Script-Native Communication <a class="header-anchor" href="#script-native-communication" aria-label="Permalink to &quot;Script-Native Communication&quot;">​</a></h3><p>Sometimes, projects need to call Windows system functions or, when integrating a third-party SDK, use script code to call its APIs. In such cases, the communication mechanism between the script layer and the native layer is required.</p><p>For information on the JS script and C++ communication mechanism, please refer to the <a href="./../../../advanced-topics/JSB2.0-learning">Tutorial: JSB 2.0</a>。</p><h3 id="debugging-javascript-on-native-platforms" tabindex="-1">Debugging JavaScript on Native Platforms <a class="header-anchor" href="#debugging-javascript-on-native-platforms" aria-label="Permalink to &quot;Debugging JavaScript on Native Platforms&quot;">​</a></h3><p>Some issues only occur on specific devices and environments. If you can debug the code on the corresponding situation, you can quickly identify the problem and find a solution.</p><p>Cocos Creator provides a native debugging mechanism that allows you to easily debug game code on a device. For more details, please refer to <a href="./../debug-jsb">Debugging JavaScript on Native Platforms</a>.</p>',43),u=[h];function g(m,w,f,b,k,v){return o(),i("div",null,u)}const y=e(c,[["render",g]]);export{_ as __pageData,y as default};
