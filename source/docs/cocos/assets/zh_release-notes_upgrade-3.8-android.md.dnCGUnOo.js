import{_ as a,c as s,o as n,a4 as i}from"./chunks/framework.uQk9_EO2.js";const e="/docs/cocos/assets/upgrade-3.8-jdk-bad-version.DkJvt9zP.png",d="/docs/cocos/assets/upgrade-3.8-jdk-version-as.B3DNnYR8.png",b=JSON.parse('{"title":"v3.8 Android 工程升级","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/upgrade-3.8-android.md","filePath":"zh/release-notes/upgrade-3.8-android.md","lastUpdated":1712305443000}'),t={name:"zh/release-notes/upgrade-3.8-android.md"},l=i(`<h1 id="v3-8-android-工程升级" tabindex="-1">v3.8 Android 工程升级 <a class="header-anchor" href="#v3-8-android-工程升级" aria-label="Permalink to &quot;v3.8 Android 工程升级&quot;">​</a></h1><p>从 v3.8 开始，构建产出的 Android 工程默认支持新版本的 Android Studio（Flamingo | 2022.2.1）。由于 Android Gradle 插件的 <a href="https://developer.android.com/studio/releases?hl=zh-cn#jdk-17" target="_blank" rel="noreferrer">要求</a>，开发者需要将 JDK 升级到 17，同时升级 Android Studio 到 Flamingo 版本。</p><blockquote><p>如果没有对构建生成的 Android 工程进行配置，可以直接删除 native/engine/android 目录和 build/android 目录，然后重新构建。这样不需要对工程进行一步步的修改升级。但是请注意，这一步操作是有风险的，如对接 SDK 的代码可能会被删除，请谨慎操作。</p></blockquote><p>对于现有的原生 Android 工程，开发者可以参考以下步骤对工程进行升级：</p><h2 id="第一步-备份当前工程" tabindex="-1">第一步：备份当前工程 <a class="header-anchor" href="#第一步-备份当前工程" aria-label="Permalink to &quot;第一步：备份当前工程&quot;">​</a></h2><p>在升级之前，我们应该先备份当前的 native 目录，以防万一。比如可以用 Git 保存当前修改.</p><h2 id="第二步-升级gradle插件版本" tabindex="-1">第二步：升级Gradle插件版本 <a class="header-anchor" href="#第二步-升级gradle插件版本" aria-label="Permalink to &quot;第二步：升级Gradle插件版本&quot;">​</a></h2><p>Gradle 插件版本是 Gradle 与 Android 构建系统之间的接口。因此，在升级 Gradle 之前，我们需要先升级 Gradle 插件版本。在项目的 native/engine/android/build.gradle 文件中，将 classpath 中的 Gradle 插件版本改为 8.0.2。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         // jcenter() // keeped as anchor, will be removed soon</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     dependencies {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-        classpath &#39;com.android.tools.build:gradle:4.1.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+        classpath &#39;com.android.tools.build:gradle:8.0.2&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         // NOTE: Do not place your application dependencies here; they belong</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         // in the individual module build.gradle files</span></span></code></pre></div><h2 id="第三步-移除-package-字段" tabindex="-1">第三步：移除 package 字段 <a class="header-anchor" href="#第三步-移除-package-字段" aria-label="Permalink to &quot;第三步：移除 package 字段&quot;">​</a></h2><p>移除 native/engine/android/app/AndroidManifest.xml 文件中的 package 属性。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-    package=&quot;com.cocos.test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     android:installLocation=&quot;auto&quot;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span></span></code></pre></div><p>在 <code>native/engine/android/app/build.gradle</code> 中的修改 applicationId 为 namespace</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     buildToolsVersion PROP_BUILD_TOOLS_VERSION</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ndkPath PROP_NDK_PATH</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+    namespace APPLICATION_ID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     compileOptions {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         sourceCompatibility JavaVersion.VERSION_1_8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">@@ -17,7 +18,6 @@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> android {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     defaultConfig {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-        applicationId APPLICATION_ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         minSdkVersion PROP_MIN_SDK_VERSION</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         targetSdkVersion PROP_TARGET_SDK_VERSION</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         versionCode 1</span></span></code></pre></div><h3 id="第四步-升级-gradle-版本" tabindex="-1">第四步：升级 Gradle 版本 <a class="header-anchor" href="#第四步-升级-gradle-版本" aria-label="Permalink to &quot;第四步：升级 Gradle 版本&quot;">​</a></h3><p>接下来，我们需要升级 Gradle wrapper 版本。在项目的 <code>build/android/proj/gradle/wrapper/gradle-wrapper.properties</code> 文件中，将 distributionUrl 改为 8.0.2，如下所示：</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">distributionUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=https\\://services.gradle.org/distributions/gradle-8.0.2-bin.zip</span></span></code></pre></div><h2 id="第五步-更新-proguard-rules" tabindex="-1">第五步: 更新 Proguard Rules <a class="header-anchor" href="#第五步-更新-proguard-rules" aria-label="Permalink to &quot;第五步: 更新 Proguard Rules&quot;">​</a></h2><p>添加下面的内容到文件 <code>native/engine/android/app/proguard-rules.pro</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># This is generated automatically by the Android Gradle plugin.</span></span>
<span class="line"><span>-dontwarn android.hardware.BatteryState</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.Light</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.LightState$Builder</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.LightState</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.LightsManager$LightsSession</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.LightsManager</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.LightsRequest$Builder</span></span>
<span class="line"><span>-dontwarn android.hardware.lights.LightsRequest</span></span>
<span class="line"><span>-dontwarn android.net.ssl.SSLSockets</span></span>
<span class="line"><span>-dontwarn android.os.VibratorManager</span></span></code></pre></div><h2 id="第六步-安装-jdk-17" tabindex="-1">第六步：安装 JDK 17 <a class="header-anchor" href="#第六步-安装-jdk-17" aria-label="Permalink to &quot;第六步：安装 JDK 17&quot;">​</a></h2><p>在 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">官网</a> 上下载并安装 JDK 17。安装过程中需要注意配置环境变量。</p><p>安装完成后，可以通过在命令行输入 <code>java -version</code> 来检查是否安装成功。</p><h2 id="第七步-升级-android-studio" tabindex="-1">第七步：升级 Android Studio <a class="header-anchor" href="#第七步-升级-android-studio" aria-label="Permalink to &quot;第七步：升级 Android Studio&quot;">​</a></h2><p>在升级 Gradle 之后，我们还需要升级 Android Studio。如果您当前使用的是较老版本的 Android Studio，请先下载最新版本的 Android Studio（Flamingo | 2022.2.1）。下载地址为: <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">https://developer.android.com/studio</a>。</p><p>下载完成后，打开 Android Studio 并导入您的项目。Android Studio 会自动检测您的项目所需的 Gradle 版本，并提示您进行升级。按照提示进行操作，即可完成 Android Studio 的升级。</p><p>如果在 Android Studio 编译时遇到下面的错误报告：</p><p><img src="`+e+'" alt="error"></p><p>您可以参考以下截图，在设置中修改 Gradle 使用的 JDK 17：</p><p><img src="'+d+'" alt="fix"></p><p>完成上述步骤后，您也可以在构建面板中重新执行构建。</p>',31),p=[l];function r(o,h,c,g,k,u){return n(),s("div",null,p)}const m=a(t,[["render",r]]);export{b as __pageData,m as default};
