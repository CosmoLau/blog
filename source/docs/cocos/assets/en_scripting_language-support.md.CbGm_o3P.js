import{_ as e,c as a,o as i,a4 as t}from"./chunks/framework.uQk9_EO2.js";const u=JSON.parse('{"title":"Programming Language Support","description":"","frontmatter":{},"headers":[],"relativePath":"en/scripting/language-support.md","filePath":"en/scripting/language-support.md","lastUpdated":1712305443000}'),s={name:"en/scripting/language-support.md"},r=t(`<h1 id="programming-language-support" tabindex="-1">Programming Language Support <a class="header-anchor" href="#programming-language-support" aria-label="Permalink to &quot;Programming Language Support&quot;">​</a></h1><p>Cocos Creator supports both <strong>TypeScript</strong> and <strong>JavaScript</strong> programming languages. Note that JavaScript can only be imported as a <a href="./external-scripts">plugin script</a> to use.</p><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><p>Cocos Creator supports TypeScript 4.1.0. The following restrictions are based on TypeScript 4.1.0:</p><ul><li><p><code>tsconfig.json</code> will not be read. The following options are implied for each project:</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;isolatedModules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;experimentalDecorators&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;moduleResolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Cocos</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Creator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s specific module resolution algorithm */,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;forceConsistentCasingInFileNames&quot;: true,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span></code></pre></div><p>The implicit <code>isolatedModules</code> option means that:</p><ul><li><p><a href="https://www.typescriptlang.org/docs/handbook/enums.html#const-enums" target="_blank" rel="noreferrer">const enums</a> is not supported.</p></li><li><p>Use <code>export type</code> when re-exporting TypeScript types and interfaces. For example, use <code>export type { Foo } from &#39;. /foo&#39;;</code> instead of <code>export { Foo } from &#39;. /foo&#39;;</code>.</p></li></ul></li><li><p><code>export =</code> and <code>import =</code> are not supported.</p></li><li><p>Variables derived from namespace must be declared as <code>const</code>, not <code>var</code> or <code>let</code>.</p></li><li><p>Different declarations in the same namespace do not share scope and require explicit use of qualifiers.</p></li><li><p>Type errors during compilation will be ignored.</p></li></ul><p><code>tsconfig.json</code> is not read at compile time, meaning that the compile option for <code>tsconfig.json</code> does not affect compilation.</p><p>Developers can still use <code>tsconfig.json</code> in their projects to work with the IDE to implement features such as type checking. In order to make the IDE&#39;s TypeScript checking compatible with the behavior of Creator, developers need to pay some extra attention to <a href="./tsconfig">tsconfig</a>.</p><h3 id="typescript-reference-tutorial" tabindex="-1">TypeScript Reference Tutorial <a class="header-anchor" href="#typescript-reference-tutorial" aria-label="Permalink to &quot;TypeScript Reference Tutorial&quot;">​</a></h3><ul><li><a href="https://discuss.cocos2d-x.org/t/tutorial-3-0-typescript-question-answering-and-experience-sharing/52932" target="_blank" rel="noreferrer">Tutorial: v3.0 TypeScript question answering and experience sharing</a></li><li><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript Official Website</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/classes.html" target="_blank" rel="noreferrer">TypeScript - Classes</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">TypeScript - Decorators</a></li><li><a href="http://definitelytyped.org/" target="_blank" rel="noreferrer">TypeScript - DefinitelyTyped</a></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/typescript-cn/" target="_blank" rel="noreferrer">Learn TypeScript in Y minutes [cn]</a></li><li><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noreferrer">TypeScript GitHub</a></li><li><a href="https://www.cocos.com/en/the-best-resources-for-learning-typescript-for-game-development" target="_blank" rel="noreferrer">The Best Resources For Learning TypeScript for Game Development</a></li><li><a href="https://betterprogramming.pub/the-bad-reasons-people-avoid-typescript-and-the-better-reasons-why-they-shouldnt-86f8d98534de" target="_blank" rel="noreferrer">3 Excuses Developers Give To Avoid TypeScript — and the Better Reasons They Should Use It</a></li></ul><h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h2><h3 id="language-features" tabindex="-1">Language Features <a class="header-anchor" href="#language-features" aria-label="Permalink to &quot;Language Features&quot;">​</a></h3><p>The JavaScript language specification supported by Creator is ES6.</p><p>In addition, the following language features or proposals, updated to the ES6 specification, are still supported.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields" target="_blank" rel="noreferrer">Public class fields</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noreferrer">Optional chaining operator <code>?.</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" target="_blank" rel="noreferrer">Nullish coalescing operator <code>??</code></a></li><li>Logical assignment operators <ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment" target="_blank" rel="noreferrer">Logical nullish assignment operator <code>??=</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment" target="_blank" rel="noreferrer">Logical AND assignment operator <code>&amp;&amp;=</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment" target="_blank" rel="noreferrer">Logical OR assignment operator <code>||=</code></a></li></ul></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis" target="_blank" rel="noreferrer">Global object <code>globalThis</code></a></li></ul><p>The following language features are also supported, but require the relevant compilation options to be turned on:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noreferrer">async functions</a></li></ul><p>In particular, Creator currently supports <strong>Legacy</strong> decorator proposals, see <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators" target="_blank" rel="noreferrer">babel-plugin-proposal-decorators</a> for their usage and meaning. Since this <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">proposal</a> is still in phase 2, all decorator-related functional interfaces exposed by the engine are under the <code>_decorator</code> namespace starting with an underscore.</p><h3 id="compilation-options" tabindex="-1">Compilation Options <a class="header-anchor" href="#compilation-options" aria-label="Permalink to &quot;Compilation Options&quot;">​</a></h3><p>Creator opens some compilation options that will be applied to the entire project.</p><table><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Name</th><th style="text-align:left;">Meaning</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>useDefineForClassFields</strong></td><td style="text-align:left;">Conforming class fields</td><td style="text-align:left;">When enabled, class fields will be implemented using the <code>Define</code> semantics, otherwise they will be implemented using the <code>Set</code> semantics. Only works if the target does not support ES6 class fields.</td></tr><tr><td style="text-align:left;"><strong>allowDeclareFields</strong></td><td style="text-align:left;">Allows declaring class fields</td><td style="text-align:left;">When enabled, the <code>declare</code> keyword will be allowed in TypeScript scripts to declare class fields and, when the field is not declared with <code>declare</code> and no explicit initialization is specified, it will be initialized according to the specification to <code>undefined</code>.</td></tr></tbody></table><h3 id="runtime-environment" tabindex="-1">Runtime Environment <a class="header-anchor" href="#runtime-environment" aria-label="Permalink to &quot;Runtime Environment&quot;">​</a></h3><p>From the user&#39;s perspective, Creator does not bind any JavaScript implementation, so it is recommended that developers write scripts strictly according to the JavaScript specification for better cross-platform support.</p><p>For example, when wishing to use <strong>global objects</strong>, the standard feature <code>globalThis</code> should be used:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">globalThis.blahBlah </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;globalThis&#39; must exist in any environment</span></span></code></pre></div><p>instead of <code>window</code>, <code>global</code>, <code>self</code> or <code>this</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// May be &#39;undefined&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// May be &#39;undefined&#39; in the browser environment</span></span></code></pre></div><p>Again, Creator does not provide a module system for <strong>CommonJS</strong>, so the following code snippet would pose a problem:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blah</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./blah-blah&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, require is undefined</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blah; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, module is undefined</span></span></code></pre></div><p>Instead, the standard module syntax should be used:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blah </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./blah-blah&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blah;</span></span></code></pre></div><h3 id="javascript-related-tutorials" tabindex="-1">JavaScript Related Tutorials <a class="header-anchor" href="#javascript-related-tutorials" aria-label="Permalink to &quot;JavaScript Related Tutorials&quot;">​</a></h3><ul><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noreferrer">JavaScript Standard Reference Tutorial [cn]</a></li><li><a href="https://bonsaiden.github.io/JavaScript-Garden/" target="_blank" rel="noreferrer">JavaScript Garden</a></li><li><a href="https://mp.weixin.qq.com/s/EuJzQajlU8rpZprWkXbJVg" target="_blank" rel="noreferrer">JavaScript Memory Detailing &amp; Analysis Guide [cn]</a></li></ul>`,32),n=[r];function l(o,p,h,c,d,g){return i(),a("div",null,n)}const f=e(s,[["render",l]]);export{u as __pageData,f as default};
