import{_ as t,c as e,o,a5 as l}from"./chunks/framework.CqnjdYks.js";const r="/docs/cocos/assets/locomotion_checker.CgsVfpzg.png",a="/docs/cocos/assets/teleporter.ekHMaHgf.png",n="/docs/cocos/assets/sharp_turn.CYA8xqa8.png",s="/docs/cocos/assets/ContinuousTurner.Cuc-ZxfW.png",i="/docs/cocos/assets/ContinuousMover.MwyL5adI.png",C=JSON.parse('{"title":"虚拟移动组件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/xr/vr/locomotion.md","filePath":"zh/manual/xr/vr/locomotion.md"}'),d={name:"zh/manual/xr/vr/locomotion.md"},c=l('<h1 id="虚拟移动组件" tabindex="-1">虚拟移动组件 <a class="header-anchor" href="#虚拟移动组件" aria-label="Permalink to &quot;虚拟移动组件&quot;">​</a></h1><p>在绝大多数的 VR 项目中，用户会用第一人称的角色视角在虚拟场景中进行移动。这种移动行为一般不会依赖于用户在真实空间的移动反馈，因为位姿的追踪会受到现实世界物理空间的限制。因此我们需要一种类似传统 3D 游戏中那种利用接受控制器输入信号的方式来驱动移动行为的组件，称之为虚拟移动组件（Locomotion Component）。</p><h2 id="locomotionchecker" tabindex="-1">LocomotionChecker <a class="header-anchor" href="#locomotionchecker" aria-label="Permalink to &quot;LocomotionChecker&quot;">​</a></h2><p>运动检查器。</p><p><img src="'+r+'" alt="ContinuousMover"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">XR Agent</td><td style="text-align:left;">指定需要进行运动的XR Agent（或其他对象）。添加该组件时，默认绑定遍历当前场景得到的第一个挂载了TrackingOrigin的节点，通常是XR Agent；用户也可以自行指定需要进行locomotion操作的对象</td></tr></tbody></table><h2 id="teleporter" tabindex="-1">Teleporter <a class="header-anchor" href="#teleporter" aria-label="Permalink to &quot;Teleporter&quot;">​</a></h2><p>传送驱动组件。</p><p><img src="'+a+'" alt="Teleporter"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Checker</td><td style="text-align:left;">添加该组件时，默认绑定遍历当前场景得到的第一个挂载Locomotion Checker组件的节点 用户也可以自己拖入需要指定的Locomotion Checker</td></tr></tbody></table><h2 id="sharpturner" tabindex="-1">SharpTurner <a class="header-anchor" href="#sharpturner" aria-label="Permalink to &quot;SharpTurner&quot;">​</a></h2><p>瞬间转向驱动。</p><p><img src="'+n+'" alt="SharpTurner"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Checker</td><td style="text-align:left;">添加该组件时，默认绑定遍历当前场景得到的第一个挂载Locomotion Checker组件的节点 用户也可以自己拖入需要指定的Locomotion Checker</td></tr><tr><td style="text-align:left;">InputDevice</td><td style="text-align:left;">绑定挂载了XRController的控制器对象</td></tr><tr><td style="text-align:left;">TurnAngle</td><td style="text-align:left;">转动角度</td></tr><tr><td style="text-align:left;">EnableTurnAround</td><td style="text-align:left;">开启后按下摇杆允许旋转180°（点击摇杆的按钮）</td></tr><tr><td style="text-align:left;">ActivationTimeout</td><td style="text-align:left;">执行连续的转弯时需要等待的时间</td></tr></tbody></table><h2 id="continuousturner" tabindex="-1">ContinuousTurner <a class="header-anchor" href="#continuousturner" aria-label="Permalink to &quot;ContinuousTurner&quot;">​</a></h2><p>连续转弯驱动。</p><p><img src="'+s+'" alt="ContinuousTurner"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Checker</td><td style="text-align:left;">添加该组件时，默认绑定遍历当前场景得到的第一个挂载Locomotion Checker组件的节点 用户也可以自己拖入需要指定的Locomotion Checker</td></tr><tr><td style="text-align:left;">InputDevice</td><td style="text-align:left;">绑定挂载了XRController的控制器对象</td></tr><tr><td style="text-align:left;">InputControl</td><td style="text-align:left;">绑定接受输入的摇杆</td></tr><tr><td style="text-align:left;">TurnSpeed</td><td style="text-align:left;">转动的角速度</td></tr></tbody></table><h2 id="continuousmover" tabindex="-1">ContinuousMover <a class="header-anchor" href="#continuousmover" aria-label="Permalink to &quot;ContinuousMover&quot;">​</a></h2><p>平移运动驱动。</p><p><img src="'+i+'" alt="ContinuousMover"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Checker</td><td style="text-align:left;">添加该组件时，默认绑定遍历当前场景得到的第一个挂载Locomotion Checker组件的节点 用户也可以自己拖入需要指定的Locomotion Checker</td></tr><tr><td style="text-align:left;">InputDevice</td><td style="text-align:left;">绑定挂载了XRController的控制器对象</td></tr><tr><td style="text-align:left;">InputControl</td><td style="text-align:left;">绑定接受输入的摇杆</td></tr><tr><td style="text-align:left;">MoveSpeed</td><td style="text-align:left;">移动速度</td></tr><tr><td style="text-align:left;">ForwardSource</td><td style="text-align:left;">选择一个物体，用该物体节点的朝向作为移动的正方向</td></tr></tbody></table>',22),h=[c];function u(p,g,f,x,y,m){return o(),e("div",null,h)}const b=t(d,[["render",u]]);export{C as __pageData,b as default};
