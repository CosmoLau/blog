import{_ as e,v as o,b as t,R as a}from"./chunks/framework.5ffcbaff.js";const s="/docs/cocos/assets/align-basic.e63a3e4a.png",d="/docs/cocos/assets/hierarchy.a7d2d5e9.png",n="/docs/cocos/assets/nested-outer.0103a985.png",c="/docs/cocos/assets/nested-inner.3c3372f2.png",i="/docs/cocos/assets/stretch.d557e140.png",r="/docs/cocos/assets/full-screen.fab24d63.png",p="/docs/cocos/assets/percentage.f6e1b272.png",g="/docs/cocos/assets/align-once.eba97a0b.png",v=JSON.parse('{"title":"对齐策略","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/ui-system/components/engine/widget-align.md","filePath":"zh/manual/ui-system/components/engine/widget-align.md"}'),l={name:"zh/manual/ui-system/components/engine/widget-align.md"},h=a('<h1 id="对齐策略" tabindex="-1">对齐策略 <a class="header-anchor" href="#对齐策略" aria-label="Permalink to &quot;对齐策略&quot;">​</a></h1><p>要实现完美的多分辨率适配效果，UI 元素按照设计分辨率中规定的位置呈现是不够的，当屏幕宽度和高度发生变化时，UI 元素要能够智能感知屏幕边界的位置，才能保证出现在屏幕可见范围内，并且分布在合适的位置。我们通过 <strong>Widget（对齐挂件）</strong> 来实现这种效果。</p><p>下面我们根据要对齐元素的类别来划分不同的对齐工作流：</p><h2 id="需要贴边对齐的按钮和小元素" tabindex="-1">需要贴边对齐的按钮和小元素 <a class="header-anchor" href="#需要贴边对齐的按钮和小元素" aria-label="Permalink to &quot;需要贴边对齐的按钮和小元素&quot;">​</a></h2><p>对于暂停菜单、游戏金币这一类面积较小的元素，通常只需要贴着屏幕边对齐就可以了。这时只要几个简单的步骤：</p><ol><li><p>在 <strong>层级管理器</strong> 中创建 2D 对象时会默认自动创建一个 Canvas 节点作为其父节点，这些元素节点都需要放在 Canvas 节点下</p></li><li><p>在元素节点上添加 Widget 组件</p></li><li><p>以对齐左下角为例，开启 <code>Left</code> 和 <code>Bottom</code> 的对齐。</p></li><li><p>然后设置好节点和屏幕边缘的距离，下图中左边距设为 40px，下边距设为 30px。</p><p><img src="'+s+'" alt="align left bottom"></p></li></ol><p>这样设置好 Widget 组件后，不管实际屏幕分辨率是多少，这个节点元素都会保持在屏幕左下角，而且节点约束框左边和屏幕左边距离保持 40px，节点约束框下边和屏幕下边距离保持 30px。</p><blockquote><p><strong>注意</strong>：Widget 组件提供的对齐距离是参照子节点和父节点相同方向的约束框边界的。比如上面例子里选择了 <code>Left</code> 对齐左边，那么子节点约束框左边和父节点，约束框左边的距离就是我们设置的 40px。其中父节点也就是 Canvas 节点，约束框永远等于屏幕大小，前提是在编辑器顶部菜单栏中的 <strong>项目 -&gt; 项目设置 -&gt; 项目数据</strong> 中只勾选 <strong>适配屏幕宽度</strong> 或者 <strong>适配屏幕高度</strong>。</p></blockquote><h2 id="嵌套对齐元素" tabindex="-1">嵌套对齐元素 <a class="header-anchor" href="#嵌套对齐元素" aria-label="Permalink to &quot;嵌套对齐元素&quot;">​</a></h2><p>上面介绍了对齐屏幕边缘的做法，由于 Widget 默认的对齐参照物是父节点，所以我们也可以添加不同的节点层级，并且让每一级节点都使用自动对齐的功能。</p><p>我们下面用一个简单的例子来说明，假设我们有这样的节点层级关系：</p><p><img src="'+d+'" alt="nested nodes"></p><p>其中 <code>parent</code> 是一个面板，<code>button</code> 是一个按钮。我们可以分别为这两个节点添加 Widget 组件，并且分别设置对齐距离。</p><p>对于 <code>parent</code> 节点来说，对齐 <code>Canvas</code> 节点的左上角，距离都是 80px：</p><p><img src="'+n+'" alt="nested outer element"></p><p>对于 <code>button</code> 节点来说，对齐 <code>parent</code> 节点的左上角，距离都是 50px：</p><p><img src="'+c+'" alt="nested inner element"></p><p>依照这样的工作流程，就可以将 UI 元素按照显示区域或功能进行分组，并且不同级别的元素都可以按照设计进行对齐。</p><h2 id="根据对齐需要自动缩放节点尺寸" tabindex="-1">根据对齐需要自动缩放节点尺寸 <a class="header-anchor" href="#根据对齐需要自动缩放节点尺寸" aria-label="Permalink to &quot;根据对齐需要自动缩放节点尺寸&quot;">​</a></h2><p>以上我们展示的例子里，并没有同时对齐在同一轴向相反方向的两个边，如果我们要做一个占满整个屏幕宽度的面板，就可以同时勾选 <code>Left</code> 和 <code>Right</code> 对齐开关：</p><p><img src="'+i+'" alt="stretch"></p><p>当同时勾选相反的两个方向的对齐开关时，Widget 就获得了根据对齐需要修改节点尺寸（<code>Size</code>）的能力，上图中我们勾选了左右两个方向并设置了边距，Widget 就会根据父节点的宽度来动态设置节点的 <code>Width</code> 属性，表现出来就是不管在多宽的屏幕上，我们的面板距离屏幕左右两边的距离永远保持 100px。</p><h3 id="制作和屏幕大小保持一致的节点" tabindex="-1">制作和屏幕大小保持一致的节点 <a class="header-anchor" href="#制作和屏幕大小保持一致的节点" aria-label="Permalink to &quot;制作和屏幕大小保持一致的节点&quot;">​</a></h3><p>利用自动缩放节点的特性，我们可以通过设置节点的 Widget 组件，使节点的尺寸和屏幕大小保持一致。</p><p>要制作这样的节点，首先要保证该节点的父节点尺寸能够保持和屏幕大小一致，Canvas 节点就是一个最好的选择。接下来按照下图的方式设置该节点的 Widget 组件：</p><p><img src="'+r+'" alt="full screen node"></p><p>就可以在运行时时刻保持该节点和 Canvas 节点的尺寸完全一致，也就是和屏幕大小一致。经过这样设置的节点，其子节点也可以使用同样的设置来传递屏幕实际尺寸。</p><blockquote><p><strong>注意</strong>：若要实现该功能，则需要在编辑器顶部菜单栏的 <strong>项目 -&gt; 项目设置 -&gt; 项目数据</strong> 中只勾选 <strong>适配屏幕宽度</strong> 或者 <strong>适配屏幕高度</strong>。</p></blockquote><h2 id="设置百分比对齐距离" tabindex="-1">设置百分比对齐距离 <a class="header-anchor" href="#设置百分比对齐距离" aria-label="Permalink to &quot;设置百分比对齐距离&quot;">​</a></h2><p>Widget 组件上开启某个方向的对齐之后，除了指定以像素为单位的边距以外，我们还可以输入百分比数值（例如：通过 <strong>单击</strong> 方框内圈出的符号），这样 Widget 会以父节点相应轴向的宽度或高度乘以输入的百分比，计算出实际的边距值。</p><p>还是看看实际的例子，我们还是以一个直接放在 Canvas 下的子节点为例，我们希望这个节点面板保持在屏幕右侧，并且总是占据 60% 的屏幕总高度。那么按照下图所示设置 Widget 组件就可以实现这个效果：</p><p><img src="'+p+'" alt="percentage"></p><p>Widget 在对齐方向开启时输入边距值时，可以按照需要混合像素单位和百分比单位的使用。比如左边需要对齐屏幕中心，则 <code>Left</code> 方向输入 <code>50%</code>，右边需要对齐屏幕边缘，则 <code>Right</code> 方向输入 <code>20px</code>，最后计算子节点位置和尺寸时，所有的边距都会先根据父节点的尺寸换算成像素距离，然后再进行摆放。</p><p>利用百分比对齐距离，我们可以制作出根据屏幕大小无限缩放的 UI 元素，发挥你的想象力，一套资源适配数千种机型不是问题！</p><h2 id="运行时每帧更新对齐和优化策略" tabindex="-1">运行时每帧更新对齐和优化策略 <a class="header-anchor" href="#运行时每帧更新对齐和优化策略" aria-label="Permalink to &quot;运行时每帧更新对齐和优化策略&quot;">​</a></h2><p>Widget 组件一般用于场景在目标设备上初始化时定位每个元素的位置，但一旦场景初始化完毕，很多时候我们就不需要 Widget 组件再进行对齐了。这里有个重要的属性 <code>alignOnce</code> 用于确保 Widget 组件只在初始化时执行对齐定位的逻辑，在运行时不再消耗时间来进行对齐。</p><p><img src="'+g+'" alt="alignOnce"></p><p>若 <strong>对齐模式（AlignMode）</strong> 设置为 <code>ONCE</code> 或者 <code>ON_WINDOW_RESIZE</code>，且在组件初始化时执行过一次对齐定位，引擎就会自动将 Widget 组件的 <code>enabled</code> 属性设为 <code>false</code>，禁用 Widget 组件来关闭之后的每帧自动更新，避免重复定位。</p><p>若需要在运行时变更定位，则需要手动将 <strong>AlignMode</strong> 设置为 <code>ALWAYS</code>，或者在运行时需要进行每帧更新对齐时，手动遍历需要对齐的 Widget，并将它们的 <code>enabled</code> 属性设为 <code>true</code>。</p><p>对于有很多 UI 元素的场景，确保 Widget 组件的 <strong>AlignMode</strong> 属性设置为 <code>ON_WINDOW_RESIZE</code>，可以大幅提高场景运行性能。</p><h2 id="对齐组件对节点位置、尺寸的限制" tabindex="-1">对齐组件对节点位置、尺寸的限制 <a class="header-anchor" href="#对齐组件对节点位置、尺寸的限制" aria-label="Permalink to &quot;对齐组件对节点位置、尺寸的限制&quot;">​</a></h2><p>通过 <strong>Widget</strong> 组件开启一个或多个对齐设置后，节点的位置（<code>position</code>）和尺寸（<code>width</code>、<code>height</code>）属性可能会被限制，不能通过 API 或动画系统自由修改。如果需要在运行时修改对齐节点的位置或尺寸，请参考 <a href="./../editor/widget.html#对节点位置、尺寸的限制">Widget 组件参考：对节点位置、尺寸的限制</a> 相关内容。</p>',42),m=[h];function u(_,b,W,f,q,x){return o(),t("div",null,m)}const P=e(l,[["render",u]]);export{v as __pageData,P as default};
