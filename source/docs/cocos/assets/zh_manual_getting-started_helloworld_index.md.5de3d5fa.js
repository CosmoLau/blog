import{_ as s,v as o,b as n,R as a}from"./chunks/framework.5ffcbaff.js";const t="/docs/cocos/assets/new-empty.fa0357a6.png",l="/docs/cocos/assets/editor-panel.edf959ff.png",e="/docs/cocos/assets/create-scene.4c98e943.png",p="/docs/cocos/assets/scene.16b8222d.png",r="/docs/cocos/assets/create-cube.794ae3c1.png",c="/docs/cocos/assets/cube.ff945406.png",i="/docs/cocos/assets/create-typescript.6957e2c0.png",g="/docs/cocos/assets/script.02cbeb3e.png",y="/docs/cocos/assets/preview.c5e23a84.png",d="/docs/cocos/assets/console.a96c08c7.png",D="/docs/cocos/assets/camera.fd95723f.png",F="/docs/cocos/assets/camera-position.f0e65da8.png",C="/docs/cocos/assets/preview1.4f949bf6.png",k=JSON.parse('{"title":"Hello World 项目","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/getting-started/helloworld/index.md","filePath":"zh/manual/getting-started/helloworld/index.md"}'),m={name:"zh/manual/getting-started/helloworld/index.md"},h=a('<h1 id="hello-world-项目" tabindex="-1">Hello World 项目 <a class="header-anchor" href="#hello-world-项目" aria-label="Permalink to &quot;Hello World 项目&quot;">​</a></h1><p>了解 Cocos Dashboard 以后，我们接下来看看如何创建和打开一个 Hello World 项目。</p><h2 id="新建项目" tabindex="-1">新建项目 <a class="header-anchor" href="#新建项目" aria-label="Permalink to &quot;新建项目&quot;">​</a></h2><p>在 Cocos Dashboard 的 <strong>项目</strong> 选项卡中，点击右下角的 <strong>新建</strong> 按钮，进入 <strong>新建项目</strong> 页面。选择 <strong>empty</strong> 项目模板，设置好项目名称和项目路径</p><p><img src="'+t+'" alt="empty"></p><p>然后点击右下方的 <strong>创建并打开</strong> 按钮，就会自动以空项目模板创建项目并打开：</p><p><img src="'+l+'" alt="editor"></p><ul><li><strong>资源管理器</strong>：显示了项目资源文件夹（<code>assets</code>）中的所有资源。</li><li><strong>场景编辑器</strong>：用于展示和编辑场景中可视内容的工作区域。</li><li><strong>层级管理器</strong>：用树状列表的形式展示场景中的所有节点和它们的层级关系，所有在 <strong>场景编辑器</strong> 中看到的内容都可以在 <strong>层级管理器</strong> 中找到对应的节点条目</li><li><strong>属性检查器</strong>：用于查看并编辑当前选中节点及其组件属性的工作区域</li><li><strong>资源预览</strong>：在 <strong>资源管理器</strong> 中选中资源，即可在 <strong>资源预览</strong> 面板中显示资源的缩略图。若选中资源所在的文件夹，即可显示文件夹下所有资源的缩略图，方便查看。</li><li><strong>动画编辑器</strong>：用于制作一些不太复杂的、需要与逻辑进行联动的动画，例如 UI 动画。</li><li><strong>控制台</strong>：用于显示报错、警告或其他 Cocos Creator 编辑器和引擎生成的日志信息。</li></ul><p>关于编辑器各个面板，具体的内容请参考 <a href="./../../editor/">编辑器面板</a>。</p><h2 id="新建场景" tabindex="-1">新建场景 <a class="header-anchor" href="#新建场景" aria-label="Permalink to &quot;新建场景&quot;">​</a></h2><p>在左下方的 <strong>资源管理器</strong> 面板中点击鼠标右键，选择 <strong>创建 -&gt; Scene</strong>。</p><p><img src="'+e+'" alt="scene"></p><p>或者也可以直接点击左上角的 <strong>+</strong> 按钮，然后选择 <strong>Scene</strong>，即可在 <strong>资源管理器</strong> 的 <code>asset</code> 目录下新建一个场景：</p><p><img src="'+p+'" alt="scene"></p><h2 id="创建物体" tabindex="-1">创建物体 <a class="header-anchor" href="#创建物体" aria-label="Permalink to &quot;创建物体&quot;">​</a></h2><p>在左上方的 <strong>层级管理器</strong> 面板中点击鼠标右键, 选择 <strong>创建 -&gt; 3D 对象 -&gt; Cube 立方体</strong>。或者也可以直接点击左上角的 <strong>+</strong> 按钮，然后选择 <strong>3D 对象 -&gt; Cube 立方体</strong>。</p><p><img src="'+r+'" alt="create-cube"></p><p>即可创建一个立方体并且显示在 <strong>场景编辑器</strong> 中：</p><p><img src="'+c+'" alt="cube"></p><h2 id="添加脚本" tabindex="-1">添加脚本 <a class="header-anchor" href="#添加脚本" aria-label="Permalink to &quot;添加脚本&quot;">​</a></h2><ul><li><p>新建脚本</p><p>在 <strong>资源管理器</strong> 面板中点击鼠标右键，选择 <strong>创建 -&gt; TypeScript</strong>，然后命名为 “HelloWorld”，即可在 <strong>资源管理器</strong> 的 <code>asset</code> 目录下新建一个脚本。</p><p><img src="'+i+`" alt="creatr-typescript"></p></li><li><p>添加代码</p><p>双击新建的脚本，脚本会自动在脚本编辑器中打开，前提是需要在编辑器菜单栏的 <strong>Cocos Creator -&gt; 偏好设置 -&gt; 外部程序 -&gt; 默认脚本编辑器</strong> 中指定好使用的脚本编辑器。</p><p>然后在脚本中添加 <code>start()</code> 函数，<code>start()</code> 函数会在组件第一次激活时调用，并输出 “Hello world”。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_decorator</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> ccclass</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> property </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _decorator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">ccclass</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWorld</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* class member could be defined like this */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// dummy = &#39;&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* use \`property\` decorator if your want the member to be serializable */</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// @property</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// serializableDummy = 0;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Your initialization goes here.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// update (deltaTime: number) {</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//     // Your update function goes here.</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>绑定脚本</p><p>在 <strong>层级管理器</strong> 中选中创建的 Cube 节点，然后在 <strong>属性检查器</strong> 面板最下方点击 <strong>添加组件 -&gt; 自定义脚本 -&gt; HelloWorld</strong>，即可将脚本挂载到 Cube 节点上。或者也可以直接将脚本拖拽到 <strong>属性检查器</strong> 面板。</p><p><img src="`+g+'" alt="script"></p><blockquote><p><strong>注意</strong>：场景设置完成后，切记要保存场景。</p></blockquote></li></ul><h2 id="预览场景" tabindex="-1">预览场景 <a class="header-anchor" href="#预览场景" aria-label="Permalink to &quot;预览场景&quot;">​</a></h2><p>简单的场景搭建完成后，就可以点击编辑器上方的 <strong>预览</strong> 按钮来预览游戏了。目前支持使用 <strong>浏览器/模拟器</strong> 进行预览。</p><p><img src="'+y+'" alt="preview"></p><p>以使用 <strong>浏览器</strong> 预览为例，Cocos Creator 会使用您的默认浏览器运行当前游戏场景，效果如下图所示：</p><p><img src="'+d+'" alt="console"></p><p>可以看到在浏览器的开发者工具中的日志信息中输出了 “Hello World”。</p><h2 id="修改场景中的-camera" tabindex="-1">修改场景中的 Camera <a class="header-anchor" href="#修改场景中的-camera" aria-label="Permalink to &quot;修改场景中的 Camera&quot;">​</a></h2><p>在预览中我们可以看到立方体似乎有点太小了，这时便可以通过调整场景中的 Camera 来调整场景运行时显示的区域，Camera 代表的是游戏中的玩家视角。</p><ul><li><p>首先在 <strong>层级管理器</strong> 中选中 <strong>Main Camera</strong> 节点，<strong>场景编辑器</strong> 中便会显示变换工具 Gizmo，以及玩家视角的小窗口。</p><p><img src="'+D+'" alt="camera"></p></li><li><p>然后在 <strong>场景编辑器</strong> 中拖动 Gizmo，或者修改 <strong>属性检查器</strong> 中的 <strong>Position</strong> 属性，使玩家视角窗口中的立方体显示得更为明显。</p><p><img src="'+F+'" alt="camera-position"></p></li><li><p>然后再次在浏览器中预览，可以看到场景中的立方体就很明显了</p><p><img src="'+C+'" alt="preview"></p></li></ul>',30),A=[h];function u(f,_,b,q,x,E){return o(),n("div",null,A)}const H=s(m,[["render",u]]);export{k as __pageData,H as default};
