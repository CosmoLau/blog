import{_ as a,c as t,o as e,a4 as s}from"./chunks/framework.uQk9_EO2.js";const k=JSON.parse('{"title":"Surface Material Data Structure","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/surface-shader/surface-data-struct.md","filePath":"en/shader/surface-shader/surface-data-struct.md","lastUpdated":1712305443000}'),r={name:"en/shader/surface-shader/surface-data-struct.md"},i=s(`<h1 id="surface-material-data-structure" tabindex="-1">Surface Material Data Structure <a class="header-anchor" href="#surface-material-data-structure" aria-label="Permalink to &quot;Surface Material Data Structure&quot;">​</a></h1><h2 id="what-s-surfacematerialdata" tabindex="-1">What&#39;s SurfaceMaterialData <a class="header-anchor" href="#what-s-surfacematerialdata" aria-label="Permalink to &quot;What&#39;s SurfaceMaterialData&quot;">​</a></h2><p>In Surface Shader, according to the needs of different <a href="./lighting-mode">Lighting Models</a>, the corresponding surface material data structure <code>SurfaceMaterialData</code> is provided.</p><p>The surface material data structure defines a series of physical parameters used to calculate the final color of the object&#39;s surface, such as albedo, roughness, etc.</p><blockquote><p><strong>Note</strong>: The material data model must be used in conjunction with the lighting model.</p></blockquote><h2 id="type-of-surface-material-data" tabindex="-1">Type of Surface Material Data <a class="header-anchor" href="#type-of-surface-material-data" aria-label="Permalink to &quot;Type of Surface Material Data&quot;">​</a></h2><table><thead><tr><th>Material Data Type</th><th>Description</th></tr></thead><tbody><tr><td>standard</td><td>Standard PBR material described by roughness and metallic, similar to material nodes in software like SP, Blender, Maya.</td></tr><tr><td>toon</td><td>Simple cartoon material with various shading methods.</td></tr></tbody></table><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h2><p>The corresponding surface material data structures are stored in the <strong>internal/chunks/data-structures/</strong> folder.</p><p>You only need to include the corresponding surface material data structure header file to use different categories of data structures.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//PBR Surface Material</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;surfaces/data-structures/standard&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// toon Surface Material</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//#include &lt;surfaces/data-structures/toon&gt; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SurfacesFragmentModifySharedData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inout SurfacesMaterialData </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">surfaceData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // set user-defined data to surfaceData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11),n=[i];function l(d,c,h,o,u,p){return e(),t("div",null,n)}const g=a(r,[["render",l]]);export{k as __pageData,g as default};
