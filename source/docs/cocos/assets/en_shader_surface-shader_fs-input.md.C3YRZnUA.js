import{_ as a,c as s,o as t,a4 as e}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"Fragment Shader Input","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/surface-shader/fs-input.md","filePath":"en/shader/surface-shader/fs-input.md","lastUpdated":1712305443000}'),i={name:"en/shader/surface-shader/fs-input.md"},n=e(`<h1 id="fragment-shader-input" tabindex="-1">Fragment Shader Input <a class="header-anchor" href="#fragment-shader-input" aria-label="Permalink to &quot;Fragment Shader Input&quot;">​</a></h1><h2 id="built-in-input-variables" tabindex="-1">Built-in Input Variables <a class="header-anchor" href="#built-in-input-variables" aria-label="Permalink to &quot;Built-in Input Variables&quot;">​</a></h2><p>Many parameters have been passed from Vertex Shader to Fragment Shader, listed below.</p><table><thead><tr><th>Fragment Shader Input</th><th>Type</th><th>Needed Macros</th><th>Meaning</th></tr></thead><tbody><tr><td>FSInput_worldPos</td><td>vec3</td><td>N/A</td><td>World Position</td></tr><tr><td>FSInput_worldNormal</td><td>vec3</td><td>N/A</td><td>World Normal</td></tr><tr><td>FSInput_faceSideSign</td><td>float</td><td>N/A</td><td>Two Side Sign be used for double-sided materials</td></tr><tr><td>FSInput_texcoord</td><td>vec2</td><td>N/A</td><td>UV0</td></tr><tr><td>FSInput_texcoord1</td><td>vec2</td><td>N/A</td><td>UV1</td></tr><tr><td>FSInput_vertexColor</td><td>vec4</td><td>N/A</td><td>Vertex Color</td></tr><tr><td>FSInput_worldTangent</td><td>vec3</td><td>N/A</td><td>World Tangent</td></tr><tr><td>FSInput_mirrorNormal</td><td>float</td><td>N/A</td><td>Mirror Normal Sign</td></tr><tr><td>FSInput_localPos</td><td>vec4</td><td>CC_SURFACES_TRANSFER_LOCAL_POS</td><td>Local Position</td></tr><tr><td>FSInput_clipPos</td><td>vec4</td><td>CC_SURFACES_TRANSFER_CLIP_POS</td><td>Clip Position</td></tr></tbody></table><h2 id="macro-switch" tabindex="-1">Macro Switch <a class="header-anchor" href="#macro-switch" aria-label="Permalink to &quot;Macro Switch&quot;">​</a></h2><p>When you need to use input parameters with macro switches, you need to enable the corresponding macros in the <code>macro-remapping</code> code section. Here&#39;s an example.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Enable FSInput_localPos</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_TRANSFER_LOCAL_POS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Enable FSInput_clipPos</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_TRANSFER_CLIP_POS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h2><p>Directly call them in your shader code.</p><h2 id="customize-varying-variables" tabindex="-1">Customize Varying Variables <a class="header-anchor" href="#customize-varying-variables" aria-label="Permalink to &quot;Customize Varying Variables&quot;">​</a></h2><p>When creating some special effects, the Vertex Shader must pass more information to the Fragment Shader. At this time, we need to add new varying variables.</p><p>Adding a new custom varying variable is quite simple. We will use the example of adding a new variable called <code>testVec3</code>.</p><p>First, declare a variable with an <code>out</code> tag in the Vertex Shader, as shown in the following example.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vertex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    out vec3 testVec3;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Then declare a corresponding variable with an <code>in</code> tag in the Fragment Shader, as shown below.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    in vec3 testVec3;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>After that, you can use <code>testVec3</code> in the code of the Fragment Shader.</p>`,17),d=[n];function l(r,h,p,o,c,k){return t(),s("div",null,d)}const u=a(i,[["render",l]]);export{E as __pageData,u as default};
