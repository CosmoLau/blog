import{_ as a,E as r,c as o,m as s,a as e,J as i,w as c,a4 as t,o as d}from"./chunks/framework.uQk9_EO2.js";const h="/docs/cocos/assets/meshrenderer-properties.Dc94aTD0.png",l="/docs/cocos/assets/create-model.DgXA5hwG.png",p="/docs/cocos/assets/view-model.BNYbPFsL.gif",T=JSON.parse('{"title":"MeshRenderer Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/engine/renderable/model-component.md","filePath":"en/engine/renderable/model-component.md","lastUpdated":1712305443000}'),m={name:"en/engine/renderable/model-component.md"},g=t('<h1 id="meshrenderer-component-reference" tabindex="-1">MeshRenderer Component Reference <a class="header-anchor" href="#meshrenderer-component-reference" aria-label="Permalink to &quot;MeshRenderer Component Reference&quot;">​</a></h1><p>The <strong>MeshRenderer</strong> component is used to display a static 3D model. Set the model mesh with the <code>Mesh</code> property, and change the appearance of the model with the <code>Materials</code> property.</p><p>Click <strong>Add Component -&gt; Mesh -&gt; MeshRenderer</strong> in the <strong>Inspector</strong> panel to add the MeshRenderer component.</p><p><img src="'+h+'" alt="MeshRenderer properties"></p><h2 id="meshrenderer-properties" tabindex="-1">MeshRenderer Properties <a class="header-anchor" href="#meshrenderer-properties" aria-label="Permalink to &quot;MeshRenderer Properties&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Materials</strong></td><td style="text-align:left;">The material used to render the model, one material corresponds to one sub-mesh in the mesh.</td></tr><tr><td style="text-align:left;"><strong>LightmapSettings</strong></td><td style="text-align:left;">For baking Lightmap, please refer to <a href="./../../concepts/scene/light/lightmap">Lightmapping</a> for details.</td></tr><tr><td style="text-align:left;"><strong>ShadowCastingMode</strong></td><td style="text-align:left;">Specifies whether the current model will cast shadows, which needs to <a href="./../../concepts/scene/light/shadow#enable-shadow-effect">enable shadow effect</a> in the scene first</td></tr><tr><td style="text-align:left;"><strong>ReceiveShadow</strong></td><td style="text-align:left;">Specifies whether the current model will receive and display shadow effects generated by other objects, which needs to <a href="./../../concepts/scene/light/shadow#enable-shadow-effect">enable shadow effect</a> in the scene first. This property takes effect only when the shadow type is <strong>ShadowMap</strong>.</td></tr><tr><td style="text-align:left;"><strong>Mesh</strong></td><td style="text-align:left;">3D model assets for rendering.</td></tr></tbody></table><p>The component interfaces for the common model are described in <a href="./__APIDOC__/en/class/MeshRenderer">MeshRenderer API</a>.</p><p>The component interfaces for the skinning model are described in <a href="./__APIDOC__/en/class/SkinnedMeshRenderer">SkinnedMeshRenderer API</a>.</p><h3 id="mesh-assets" tabindex="-1">Mesh Assets <a class="header-anchor" href="#mesh-assets" aria-label="Permalink to &quot;Mesh Assets&quot;">​</a></h3><p>Mesh assets are necessary for rendering meshes. Currently, meshes are mainly generated automatically by Creator when <a href="./../../asset/model/mesh">importing models</a> into Creator.</p><p>A Mesh asset contains a set of vertices and multiple sets of indices. The index points to the vertex in the vertex array, and every three sets of indices form a triangle. A mesh is composed of multiple triangles and is the most basic graphical element in the 3D world. Multiple triangles are stitched together to form a complex polygon, and multiple polygons are stitched together to form a 3D model.</p><p>Creator provides several simple static 3D models with basic models such as the cube, cylinder, etc. Developers can create a few in the <strong>Hierarchy</strong> panel as needed to get a first look.</p><p><img src="'+l+'" alt="create model"></p><h2 id="model-group-rendering" tabindex="-1">Model Group Rendering <a class="header-anchor" href="#model-group-rendering" aria-label="Permalink to &quot;Model Group Rendering&quot;">​</a></h2><p>The group rendering function is determined by the <a href="./../../editor/components/camera-component#set-the-visibility-property">Visibility property</a> of the camera component and the <a href="./../../concepts/scene/node-component#set-the-layer-property-of-the-node">Layer property</a> of the node. Users can set the <code>Visibility</code> value through code to complete the group rendering. All nodes belong to the <code>DEFAULT</code> layer by default and are visible on all cameras.</p><h2 id="static-batching" tabindex="-1">Static Batching <a class="header-anchor" href="#static-batching" aria-label="Permalink to &quot;Static Batching&quot;">​</a></h2><p>The current static batching scheme is static batching at run time. Static batching can be performed by calling <code>BatchingUtility.batchStaticModel</code>. This function receives a node, and then merges all <code>Mesh</code> in <code>MeshRenderer</code> under that node into one, and hangs it under another node.</p><p>After batching, the original transform of <code>MeshRenderer</code> cannot be changed, but the transform of the root node after batching can be changed. Only nodes that meet the following conditions can be statically batched:</p><ul><li>The child node can only contain <code>MeshRenderer</code>.</li><li>The vertex data structure of <code>Mesh</code> of <code>MeshRenderer</code> under child nodes must be consistent.</li><li>The material of <code>MeshRenderer</code> under child nodes must be the same.</li></ul><h2 id="dynamic-batching" tabindex="-1">Dynamic Batching <a class="header-anchor" href="#dynamic-batching" aria-label="Permalink to &quot;Dynamic Batching&quot;">​</a></h2><p>The engine currently provides <strong>instancing batching</strong> .</p><p>To turn on batching, simply check the corresponding <code>USE_INSTANCING</code> switch in the material used by the model.</p><blockquote><p><strong>Note</strong>: the current batching process introduces several limitations:</p><ol><li>The transparent models in the same batch are not sorted, this may lead to incorrect blending results.</li><li>The inverse-transpose world matrix is not uploaded into batches, models with non-uniform scale will have inaccurate normals.</li><li>Only plain models and skinning models under pre-baked skeletal animation are supported. (i.e. real-time skeletal animations, 2D objects, UIs and particles do not support dynamic batching)</li></ol></blockquote><h3 id="instancing-batching" tabindex="-1">Instancing Batching <a class="header-anchor" href="#instancing-batching" aria-label="Permalink to &quot;Instancing Batching&quot;">​</a></h3><p>The batch through <strong>instancing</strong> is suitable for drawing a large number of dynamic models with the same vertex data. When enabled, drawing will be grouped according to the material and vertex data, and the instanced attributes information will be organized in each group, and then complete the drawing at one time.</p><blockquote><p><strong>Note</strong>: for the support and related settings of the skinning model, refer to the <a href="./../../animation/skeletal-animation#AboutDynamic-Instancing">Skeletal Animation Component</a> documentation.</p></blockquote><p>In addition, inside each group, the instanced attributes supports custom additional instanced attributes, which can pass more per-instance data between different instances (such as the difference in appearance of a diffuse color between different characters, or the influence of wind in a large grass field). This requires the support of custom effects. For more detailed instructions, please refer to the <a href="./../../material-system/effect-syntax#Custom-Instanced-Properties">Syntax Guide</a> documentation.</p><h3 id="vb-merging-batching" tabindex="-1">VB-merging Batching <a class="header-anchor" href="#vb-merging-batching" aria-label="Permalink to &quot;VB-merging Batching&quot;">​</a></h3><p>VB-merging batching will do some operations such as merging vertices per frame introduce a portion of CPU overhead, which is particularly expensive in JavaScript. Abuse without rigorous testing can cause performance degradation, <strong>This feature has been removed in 3.6.2, so please use Instancing or static batching as a preference instead.</strong></p>',29),f=t('<h2 id="batch-best-practices" tabindex="-1">Batch Best Practices <a class="header-anchor" href="#batch-best-practices" aria-label="Permalink to &quot;Batch Best Practices&quot;">​</a></h2><p>Generally speaking, the priority of the batch system is: <strong>static batching</strong> -&gt; <strong>instancing batching</strong>.</p><p>The material must be insured that it is consistent, under this premise:</p><ul><li>If you are certain that certain models will remain completely static during the game cycle, use <strong>static batching</strong>.</li><li>If there are a large number of the same model repeated drawing, there is only a relatively controllable small difference between each other, use <strong>instancing batching</strong>.</li></ul><h2 id="preview-model" tabindex="-1">Preview Model <a class="header-anchor" href="#preview-model" aria-label="Permalink to &quot;Preview Model&quot;">​</a></h2><p>The model can be observed in the scene view when the mouse hovers over the drop-down mesh in the <strong>Mesh</strong> property.</p><p><img src="'+p+'" alt="view model"></p><p>[^1]: Currently use uniforms to upload the batched world transformation matrix, taking into account the WebGL standard uniform quantity limit, the current batch draws up to 10 models, so for a large number of same For the material model, the number of drawcalls is expected to be reduced by up to 10 times after enabling <strong>VB-merging batching</strong>. [^2]: There have been many discussions in the industry on the topic of batching and performance, you can refer to this <a href="https://www.nvidia.com/docs/IO/8228/BatchBatchBatch.pdf" target="_blank" rel="noreferrer">nVidia slide</a>.</p>',8);function u(b,y,w,_,v,x){const n=r("font");return d(),o("div",null,[g,s("p",null,[e("In addition, it is necessary to remind that "),i(n,{color:"#ff0000"},{default:c(()=>[e("the number of draw calls is not is not the only performance metric[^2]")]),_:1}),e(". Optimal performance is often the result of CPU and GPU load balancing, so when using batch functions, be sure to do more tests to identify performance bottlenecks and do targeted optimization.")]),f])}const k=a(m,[["render",u]]);export{T as __pageData,k as default};
