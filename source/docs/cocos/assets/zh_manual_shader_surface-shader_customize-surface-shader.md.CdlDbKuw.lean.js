import{_ as n,E as t,c as e,m as s,a,J as l,w as h,a5 as r,o as p}from"./chunks/framework.CqnjdYks.js";const C=JSON.parse('{"title":"自定义表面着色器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/surface-shader/customize-surface-shader.md","filePath":"zh/manual/shader/surface-shader/customize-surface-shader.md"}'),d={name:"zh/manual/shader/surface-shader/customize-surface-shader.md"},o=r("",26),c=s("p",null,"比如，如果想要在函数中使用 PBR 光照模型内置的光照函数，可以包含 lighting-models/includes/standard 头文件。",-1),k=s("p",null,"在这个头文件中，会包含 lighting-models/model-functions/standard 头文件。",-1),g=s("p",null,"PBR光照相关的内置函数都在这里，直接调用即可。",-1),u=s("h2",{id:"更多自定义",tabindex:"-1"},[a("更多自定义 "),s("a",{class:"header-anchor",href:"#更多自定义","aria-label":'Permalink to "更多自定义"'},"​")],-1),E=s("p",null,"如果上面的自定义机制还不能满足需求，建议参考 chunks/shading-entries 构建自己的 main 函数，以控制整个着色流程和计算细节。",-1);function f(_,m,F,D,S,y){const i=t("font");return p(),e("div",null,[o,s("p",null,[a("如果希望 "),l(i,{color:"#ff0000"},{default:h(()=>[a("在重载函数内可以直接调用现成的内置光照模块函数")]),_:1}),a("，可以将 lighting-models/includes/common 改为对应光照模型使用的头文件。")]),c,k,g,u,E])}const v=n(d,[["render",f]]);export{C as __pageData,v as default};
