import{_ as s,c as e,o as a,a4 as t}from"./chunks/framework.uQk9_EO2.js";const i="/docs/cocos/assets/UIMaterial.BxSX7kGp.png",_=JSON.parse('{"title":"2D 渲染对象自定义材质","description":"","frontmatter":{},"headers":[],"relativePath":"zh/ui-system/components/engine/ui-material.md","filePath":"zh/ui-system/components/engine/ui-material.md","lastUpdated":1712305443000}'),r={name:"zh/ui-system/components/engine/ui-material.md"},n=t('<h1 id="_2d-渲染对象自定义材质" tabindex="-1">2D 渲染对象自定义材质 <a class="header-anchor" href="#_2d-渲染对象自定义材质" aria-label="Permalink to &quot;2D 渲染对象自定义材质&quot;">​</a></h1><p>2D 渲染对象的自定义材质是拓展 2D 渲染对象表现和提升 2D 渲染对象自身能力的最佳实践，可以通过自定义材质实现溶解、外发光等酷炫的渲染效果。</p><p>v3.0 的 2D 渲染组件大部分都支持使用自定义材质，其使用界面如下图（以 Sprite 组件为例）：</p><p><img src="'+i+`" alt="UIMaterial"></p><p>其使用方法与其他内置材质并无不同，将要使用的材质拖拽到 <strong>CustomMaterial</strong> 属性框中即可。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li><p>当未指定自定义材质时，会使用内置材质进行渲染，面板功能及使用方法可参考 <a href="./../editor/sprite">Sprite 组件参考</a> 文档。</p></li><li><p>2D 渲染对象并不支持多材质，自定义材质的数量最多为一个。</p></li><li><p>请使用 <strong>builtin-spine</strong> 或 <strong>builtin-sprite</strong> 等 2D 专用 Shader 来自定义材质，请勿选择其他 3D 组件使用的 shader。</p></li><li><p>当使用了 2D 渲染对象自定义材质之后，面板上的 <strong>Grayscale</strong> 属性功能将会失效，用户可选择自行在材质中实现此功能。</p></li><li><p>若代码中设置了 BlendFactor，在使用了自定义材质后，会以自定义材质中 BlendFactor 的设置为准。</p></li><li><p>使用了自定义材质之后，组件的深度检测信息会以材质为准。如果想要实现和 3D 物体的遮挡，请使用自定义材质并开启深度检测。可参考范例 <strong>2d-rendering-in-3d</strong>（<a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/2D" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.8/assets/cases/2d-rendering-in-3d" target="_blank" rel="noreferrer">Gitee</a>）。</p></li><li><p>如果用户希望修改自定义材质的属性，可通过获取 2D 渲染组件上的 <strong>customMaterial</strong> 来进行操作，如下代码所示：（以 Sprite 为例）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spriteComp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sprite);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> material </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spriteComp.customMaterial;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//material.setProperty(propName,val)</span></span></code></pre></div></li></ol><h2 id="自定义-2d-shader" tabindex="-1">自定义 2D Shader <a class="header-anchor" href="#自定义-2d-shader" aria-label="Permalink to &quot;自定义 2D Shader&quot;">​</a></h2><p>如果内置的Shader不满足需求，可参考 <a href="./../../../shader/write-effect-2d-sprite-gradient">2D 精灵着色器：Gradient</a> 自定义 Shader。</p>`,9),l=[n];function p(o,h,d,c,k,g){return a(),e("div",null,l)}const u=s(r,[["render",p]]);export{_ as __pageData,u as default};
