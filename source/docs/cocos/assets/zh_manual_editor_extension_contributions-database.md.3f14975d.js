import{_ as s,v as a,b as o,R as n}from"./chunks/framework.5ffcbaff.js";const p="/docs/cocos/assets/extension-database.194aafee.png",A=JSON.parse('{"title":"自定义资源数据库","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/extension/contributions-database.md","filePath":"zh/manual/editor/extension/contributions-database.md"}'),l={name:"zh/manual/editor/extension/contributions-database.md"},e=n(`<h1 id="自定义资源数据库" tabindex="-1">自定义资源数据库 <a class="header-anchor" href="#自定义资源数据库" aria-label="Permalink to &quot;自定义资源数据库&quot;">​</a></h1><p>所有项目内的资源文件都是通过资源数据库进行管理，其中项目内的 <code>assets</code> 目录存放的是当前项目的资源，引擎仓库里 <code>editor/assets</code> 里存放的是引擎内置的资源（如：常见的图片、脚本等）。</p><p>当我们在扩展内使用了资源时，需要将扩展内的资源文件夹注册到资源数据库里，并在扩展发布时将资源随着扩展一起发布。</p><p>通过本文我们将学会如何注册一个资源文件夹，并在脚本里使用资源。</p><h2 id="注册配置" tabindex="-1">注册配置 <a class="header-anchor" href="#注册配置" aria-label="Permalink to &quot;注册配置&quot;">​</a></h2><p>资源注册需要在 <code>contributions</code> 中使用 <code>asset-db</code> 字段进行配置，如下所示：</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test-package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">contributions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">asset-db</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mount</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./assets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">readonly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面的示例中，我们把扩展 <code>test-package</code> 根目录下的 <code>assets</code> 文件夹注册到了资源数据库中。</p><h2 id="脚本资源" tabindex="-1">脚本资源 <a class="header-anchor" href="#脚本资源" aria-label="Permalink to &quot;脚本资源&quot;">​</a></h2><p>在 <code>test-package/assets/</code> 目录下创建一个脚本 <code>foo.ts</code>，内容如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// foo.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_decorator</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> ccclass</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> property </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _decorator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">ccclass</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>为了使用 cc 的定义，我们需要拷贝 <code>{项目目录}\\temp\\declarations</code> 的定义文件到扩展根目录下。</p><p>由于 <code>foo.ts</code> 只是作资源使用，不属于扩展源码，所以我们需要在 <code>tsconfig.json</code> 中加入 <code>exclude</code> 配置进行排除，否则会出现编译错误。</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        ... </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./assets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p><strong>注意</strong>：扩展中的脚本资源可以在 Cocos Creator 工程中编写并测试完成后，再复制到扩展的 <code>assets</code> 目录。</p></blockquote><h2 id="其他资源" tabindex="-1">其他资源 <a class="header-anchor" href="#其他资源" aria-label="Permalink to &quot;其他资源&quot;">​</a></h2><p>图片、文本、字体等资源直接放入 <code>assets</code> 目录下即可。</p><h2 id="使用扩展中的资源" tabindex="-1">使用扩展中的资源 <a class="header-anchor" href="#使用扩展中的资源" aria-label="Permalink to &quot;使用扩展中的资源&quot;">​</a></h2><p>刷新扩展，可以在 Cocos Creator 编辑器的 <strong>资源管理器</strong> 窗口中看到新增了一个 <code>test-package</code> 资源包，如下图所示：</p><p><img src="`+p+`" alt="extension-database"></p><h2 id="拖拽引用" tabindex="-1">拖拽引用 <a class="header-anchor" href="#拖拽引用" aria-label="Permalink to &quot;拖拽引用&quot;">​</a></h2><p>若要以拖拽到组件方式引用包内的资源，使用方式与 <code>assets</code> 和 <code>internal</code> 中的资源一致。</p><h2 id="import-脚本" tabindex="-1">import 脚本 <a class="header-anchor" href="#import-脚本" aria-label="Permalink to &quot;import 脚本&quot;">​</a></h2><p>若要在项目中引用脚本，只需要从资源目录库引用即可，如下所示：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// bar.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">db://test-package/foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>可以不用刻意关注某个类是否来自某个扩展包，TypeScript 开发环境的自动补齐功能会提示 <strong>import</strong> 目录的，无需担心。</p><blockquote><p><strong>注意</strong>：扩展资源包中的类名应当保持全局唯一，否则会造成冲突，实际开发中尽量添加一个适合的前缀（如 <code>test-package</code> 可简称为 <code>TP</code>，资源包中所有类统一加上 <code>TP</code> 前缀，变成 <code>TPFoo</code> ）。</p></blockquote>`,27),t=[e];function c(r,D,y,F,i,C){return a(),o("div",null,t)}const u=s(l,[["render",c]]);export{A as __pageData,u as default};
