import{_ as e,v as a,b as t,R as n}from"./chunks/framework.5ffcbaff.js";const _=JSON.parse('{"title":"事件系统","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/engine/event/index.md","filePath":"zh/manual/engine/event/index.md"}'),i={name:"zh/manual/engine/event/index.md"},r=n('<h1 id="事件系统" tabindex="-1">事件系统 <a class="header-anchor" href="#事件系统" aria-label="Permalink to &quot;事件系统&quot;">​</a></h1><p>事件系统是游戏开发过程中需要涉及到交互常用的功能。使用事件系统不仅可以将输入行为（例如：键盘、鼠标、触摸）以事件的形式发送到应用程序，也可以将游戏过程中的发生的，需要其他对象关注的事情通过事件的形式回应。例如：游戏胜利后需要打开结算或者奖励界面。</p><h2 id="事件使用" tabindex="-1">事件使用 <a class="header-anchor" href="#事件使用" aria-label="Permalink to &quot;事件使用&quot;">​</a></h2><p>事件需要通过注册获取监听，详情请参考 <a href="./event-emit.html">监听和发射事件</a>。</p><p>在事件监听和发射的基础上，Cocos Creator 支持了很多内置事件系统，包括：</p><ul><li><a href="./event-input.html">输入事件系统</a></li><li><a href="./event-node.html">节点事件系统</a></li></ul>',6),o=[r];function s(l,h,d,c,m,p){return a(),t("div",null,o)}const f=e(i,[["render",s]]);export{_ as __pageData,f as default};
