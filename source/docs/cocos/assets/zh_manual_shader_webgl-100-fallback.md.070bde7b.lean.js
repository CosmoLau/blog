import{_ as s,v as a,b as l,R as n}from"./chunks/framework.5ffcbaff.js";const C=JSON.parse('{"title":"WebGL 1.0 向下兼容支持","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/webgl-100-fallback.md","filePath":"zh/manual/shader/webgl-100-fallback.md"}'),e={name:"zh/manual/shader/webgl-100-fallback.md"},o=n(`<h1 id="webgl-1-0-向下兼容支持" tabindex="-1">WebGL 1.0 向下兼容支持 <a class="header-anchor" href="#webgl-1-0-向下兼容支持" aria-label="Permalink to &quot;WebGL 1.0 向下兼容支持&quot;">​</a></h1><p>由于 WebGL 1.0 仅支持 GLSL 100 标准语法，因此在 Cocos Shader 编译时会提供 GLSL 300 ES 转 GLSL 100 的向下兼容代码（fallback shader），开发者基本不需关心这层变化。</p><p>需要注意的是目前的自动向下兼容策略仅支持一些基本的格式转换，如果使用了 GLSL 300 ES 独有的函数（例如 <code>texelFetch</code>、<code>textureGrad</code>）或一些特有的扩展（<code>extensions</code>），推荐根据 <code>__VERSION__</code> 宏定义判断 GLSL 版本，自行实现更稳定精确的向下兼容，代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__VERSION__</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifdef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GL_EXT_shader_texture_lod</span></span>
<span class="line"><span style="color:#A6ACCD;">  vec4 color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">textureCubeLodEXT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">envmap</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> R</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> roughness</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#else</span></span>
<span class="line"><span style="color:#A6ACCD;">  vec4 color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">textureCube</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">envmap</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> R</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#else</span></span>
<span class="line"><span style="color:#A6ACCD;">  vec4 color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">textureLod</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">envmap</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> R</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> roughness</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><p>Cocos Shader 在编译时会解析所有已经是常量的宏控制流，生成不同版本的 GLSL Shader 代码。</p>`,5),p=[o];function t(c,r,D,F,y,i){return a(),l("div",null,p)}const d=s(e,[["render",t]]);export{C as __pageData,d as default};
