import{_ as s,v as n,b as a,R as o}from"./chunks/framework.5ffcbaff.js";const d=JSON.parse('{"title":"UI 变换组件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/ui-system/components/editor/ui-transform.md","filePath":"zh/manual/ui-system/components/editor/ui-transform.md"}'),l={name:"zh/manual/ui-system/components/editor/ui-transform.md"},p=o(`<h1 id="ui-变换组件" tabindex="-1">UI 变换组件 <a class="header-anchor" href="#ui-变换组件" aria-label="Permalink to &quot;UI 变换组件&quot;">​</a></h1><p>定义了 UI 上的矩形信息，包括矩形的尺寸和锚点位置。开发者可以通过该组件任意地操作矩形的大小、位置。一般用于渲染、点击事件的计算、界面布局以及屏幕适配等。</p><p>点击 <strong>属性检查器</strong> 下面的 <strong>添加组件</strong> 按钮，然后选择 <strong>UI/UITransform</strong> 即可添加 UITransform 组件到节点上。</p><p>UITransform 脚本接口请参考 <a href="./__APIDOC__/zh/class/UITransform.html">UITransform API</a>。</p><h2 id="uitransform-属性介绍" tabindex="-1">UITransform 属性介绍 <a class="header-anchor" href="#uitransform-属性介绍" aria-label="Permalink to &quot;UITransform 属性介绍&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">ContentSize</td><td style="text-align:left;">UI 矩形内容尺寸</td></tr><tr><td style="text-align:left;">AnchorPoint</td><td style="text-align:left;">UI 矩形锚点位置</td></tr></tbody></table><hr><h3 id="通过脚本代码修改节点尺寸和锚点" tabindex="-1">通过脚本代码修改节点尺寸和锚点 <a class="header-anchor" href="#通过脚本代码修改节点尺寸和锚点" aria-label="Permalink to &quot;通过脚本代码修改节点尺寸和锚点&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_decorator</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Node</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">UITransform</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> ccclass</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> property </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _decorator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">ccclass</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Example</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">UITransform</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 方法一</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setContentSize</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">120</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAnchorPoint</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 方法二</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">120</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">anchorX</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uiTransform</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">anchorY</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="priority-属性的弃用说明" tabindex="-1">priority 属性的弃用说明 <a class="header-anchor" href="#priority-属性的弃用说明" aria-label="Permalink to &quot;priority 属性的弃用说明&quot;">​</a></h3><p>我们在 3.1 版本中弃用了 UITransform 组件的 priority 属性，用户可以通过使用 setSiblingIndex 来设置节点树的顺序来进行调整渲染顺序。</p><p>关于 priority 属性的移除及推荐使用的 SiblingIndex 属性的说明： 由于表意不明以及与引擎中其他属性的命名冲突，UITransform 组件上的 priority 属性在 v3.1 已被废弃。priority 属性的设计之初是为用户提供节点树排序的快捷方式，本身并无其他用途，和 priority 所表达的“优先级”也不相关，并且设置之后实际上还是通过更改节点树的顺序来调整渲染顺序。</p><p>在移除了 <code>priority</code> 属性之后，用户可以用 <code>setSiblingIndex</code> 方法来替换使用，<code>setSiblingIndex</code> 方法通过影响节点中的 <code>siblingIndex</code> 属性来调整节点树的顺序。不同之处在于，<code>priority</code> 属性存在默认值，而 node 的 <code>siblingIndex</code> 属性实际上就是这个节点在父节点中的位置，所以在节点树发生变化之后，节点的 <code>siblingIndex</code> 属性数值就会产生变化。这就要求在使用 <code>setSiblingIndex</code> 方法的时候，需要知道节点在父节点中的相对位置并做出控制，才能够获得预期的结果。</p><p>需要注意的是，不能直接将 <code>siblingIndex</code> 属性等同于 <code>priority</code>（已废弃）属性来理解使用，它们的意义是不同的，改变 <code>siblingIndex</code> 属性需要理解并清楚其代表的是在父节点下的位置，且在节点树变化时会发生变化，并且只能通过 <code>setSiblingIndex</code> 方法来修改 <code>siblingIndex</code> 属性。</p><p>考虑到节点快捷排序的需求，我们会在之后的版本中提供更方便快捷的接口供用户排列节点使用。</p>`,15),t=[p];function e(r,c,y,i,F,D){return n(),a("div",null,t)}const A=s(l,[["render",e]]);export{d as __pageData,A as default};
