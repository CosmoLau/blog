import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.uQk9_EO2.js";const g=JSON.parse('{"title":"Surface Shader Overview","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/surface-shader/surface-shader-structure.md","filePath":"en/shader/surface-shader/surface-shader-structure.md","lastUpdated":1712305443000}'),n={name:"en/shader/surface-shader/surface-shader-structure.md"},t=e(`<h1 id="surface-shader-overview" tabindex="-1">Surface Shader Overview <a class="header-anchor" href="#surface-shader-overview" aria-label="Permalink to &quot;Surface Shader Overview&quot;">​</a></h1><p>A typical Surface Shader usually consists of four main parts.</p><ol><li>CCEffect</li><li>Shared UBO</li><li>Macro Remapping</li><li>Surface Functions</li><li>Shader Assembly: Assemble the above four parts with built-in Surface Shader functions.</li></ol><h2 id="_1-cceffect" tabindex="-1">1. CCEffect <a class="header-anchor" href="#_1-cceffect" aria-label="Permalink to &quot;1. CCEffect&quot;">​</a></h2><p>CCEffect is used to describe the techniques, passes, properties, and render states of the Surface Shader. The material will generate default values and display them on the material panel according to the content in CCEffect.</p><p>For more details, please refer to <a href="./../effect-syntax">Cocos Shader Syntax</a>。</p><h2 id="_2-shared-ubo" tabindex="-1">2. Shared UBO <a class="header-anchor" href="#_2-shared-ubo" aria-label="Permalink to &quot;2. Shared UBO&quot;">​</a></h2><p>The shared UBO gathers all the uniforms needed for all passes, simplifying shader writing.</p><p>It is optional, but it is recommended for complex shaders. Here is an example from the built-in Surface Shader.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ubos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uniform Constants {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vec4 titlingOffset;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><blockquote><p><strong>Note</strong>: It doesn&#39;t necessarily have to be called <code>shared-ubos</code> and <code>Constants</code>, as long as it&#39;s easy to be remembered.</p></blockquote><h2 id="_3-macro-remapping" tabindex="-1">3. Macro Remapping <a class="header-anchor" href="#_3-macro-remapping" aria-label="Permalink to &quot;3. Macro Remapping&quot;">​</a></h2><p>Surface Shader provides a large number of built-in macros. These macros are not displayed on the panel by default. If you want these macros to be displayed on the panel, you need to remap them.</p><p>In addition, you can put some macros in this section for easy management. Here is an example of a built-in Surface Shader.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ui displayed macros</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define-meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAS_SECOND_UV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define-meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> USE_TWOSIDE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_USE_SECOND_UV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_SECOND_UV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_SURFACES_USE_TWO_SIDED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USE_TWOSIDE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>For more details, please refer to <a href="./macro-remapping">Macro Definition and Remapping</a>.</p><blockquote><p><strong>Note</strong>: It doesn&#39;t necessarily have to be called <code>macro-remapping</code>, as long as it&#39;s easy to be remembered.</p></blockquote><h2 id="_4-surface-functions" tabindex="-1">4. Surface Functions <a class="header-anchor" href="#_4-surface-functions" aria-label="Permalink to &quot;4. Surface Functions&quot;">​</a></h2><p>Surface Shader unifies the render process while also exposing many functions for users to customize render effects.</p><p>For ease to management, we usually need to declare at least two CCProgram code segments for vs and fs.</p><p>Take the built-in Surface Shader as an example.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vertex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p><code>surface-vertex</code> is used to organize vs related processing functions, while <code>surface-fragment</code> is used for fs.</p><p>In these two segments, you can use macros to replace the internal functions, you can also add your own vs and fs inputs.</p><p>For more details, please refer to <a href="./function-replace">Replacement Function Using Marcos</a>, <a href="./vs-input">Vertex Shader Inputs</a> and <a href="./fs-input">Fragment Shader Inputs</a>。</p><h2 id="_5-shader-assembly" tabindex="-1">5. Shader Assembly <a class="header-anchor" href="#_5-shader-assembly" aria-label="Permalink to &quot;5. Shader Assembly&quot;">​</a></h2><p>In Surface Shader, the last part is the assembly of the shader.</p><p>Let&#39;s take the built-in Surface Shader as an example.</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>It&#39;s worth noting that the code segments of the above three parts(Shared UBO, Marco Remapping and Surface Functions) can have zero or multiple. Finally, the final shader is assembled as needed and referenced in the CCEffect.</p><p>For more details, please refer to <a href="./shader-assembly">Surface Shader Assembly</a>。</p>`,31),l=[t];function h(p,r,k,d,o,c){return i(),a("div",null,l)}const u=s(n,[["render",h]]);export{g as __pageData,u as default};
