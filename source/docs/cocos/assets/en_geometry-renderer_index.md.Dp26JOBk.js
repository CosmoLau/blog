import{_ as t,c as e,o as s,a4 as i}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/geometry-renderer-demo.CkP1hTv1.png",l="/docs/cocos/assets/geometry-renderer-features.CgecVxhI.png",n="/docs/cocos/assets/enable-geometry-renderer.FVFioSCq.png",r="/docs/cocos/assets/result.2-nK1EdT.png",u=JSON.parse('{"title":"Geometry Renderer","description":"","frontmatter":{},"headers":[],"relativePath":"en/geometry-renderer/index.md","filePath":"en/geometry-renderer/index.md","lastUpdated":1712305443000}'),d={name:"en/geometry-renderer/index.md"},h=i('<h1 id="geometry-renderer" tabindex="-1">Geometry Renderer <a class="header-anchor" href="#geometry-renderer" aria-label="Permalink to &quot;Geometry Renderer&quot;">​</a></h1><p>Geometry renderer is a functional interface provided by the engine for batch rendering of various geometries, mainly used for debugging (such as displaying the enclosing boxes of objects) and the gizmo batch display of Cocos Creator.</p><p>The effect of the geometry renderer is shown in the following figure.</p><p><img src="'+a+'" alt="geometry-renderer-demo"></p><p>The features of Geometry Renderer is as follows:</p><p><img src="'+l+'" alt="geometry-renderer-features"></p><p>Where.</p><ul><li>solid: whether to support solid mode, if not, then display wireframe mode</li><li>depth test: whether to support depth test, if support then the blocked part of the translucent display, not blocked part of the opaque display, if not support then all opaque display</li><li>lighting: whether to support simple lighting, if not, use no light mode</li><li>transform: whether support transform, if support, developer can pass in a transform matrix, the transform matrix will act on the geometry of the vertices, convenient to display the geometry of any coordinate space</li></ul><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><ul><li>Typescript: <a href="https://github.com/cocos/cocos-engine/blob/v3.8.0/cocos/core/pipeline/geometry-renderer.ts" target="_blank" rel="noreferrer">geometry-render.ts</a>.</li><li>Native: <a href="https://github.com/cocos/cocos-engine/blob/v3.8.0/native/cocos/renderer/pipeline/GeometryRenderer.h" target="_blank" rel="noreferrer">GeometryRenderer.h</a>.</li></ul><h3 id="supported-geometry-types" tabindex="-1">Supported Geometry Types <a class="header-anchor" href="#supported-geometry-types" aria-label="Permalink to &quot;Supported Geometry Types&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Geometry Type</th><th style="text-align:left;">Interface</th></tr></thead><tbody><tr><td style="text-align:left;">Dashed Line</td><td style="text-align:left;">addDashedLine</td></tr><tr><td style="text-align:left;">Line</td><td style="text-align:left;">addLine</td></tr><tr><td style="text-align:left;">Triangle</td><td style="text-align:left;">addTriangle</td></tr><tr><td style="text-align:left;">Quad</td><td style="text-align:left;">addQuad</td></tr><tr><td style="text-align:left;">BoundingBox</td><td style="text-align:left;">addBoundingBox</td></tr><tr><td style="text-align:left;">Cross</td><td style="text-align:left;">addCross</td></tr><tr><td style="text-align:left;">Frustum</td><td style="text-align:left;">addFrustum</td></tr><tr><td style="text-align:left;">Capsule</td><td style="text-align:left;">addCapsule</td></tr><tr><td style="text-align:left;">Cylinder</td><td style="text-align:left;">addCylinder</td></tr><tr><td style="text-align:left;">Cone</td><td style="text-align:left;">addCone</td></tr><tr><td style="text-align:left;">Circle</td><td style="text-align:left;">addCircle</td></tr><tr><td style="text-align:left;">Arc</td><td style="text-align:left;">addArc</td></tr><tr><td style="text-align:left;">Polygon</td><td style="text-align:left;">addPolygon</td></tr><tr><td style="text-align:left;">Disc</td><td style="text-align:left;">addDisc</td></tr><tr><td style="text-align:left;">Sector</td><td style="text-align:left;">addSector</td></tr><tr><td style="text-align:left;">Sphere</td><td style="text-align:left;">addSphere</td></tr><tr><td style="text-align:left;">Torus</td><td style="text-align:left;">addTorus</td></tr><tr><td style="text-align:left;">Octahedron</td><td style="text-align:left;">addOctahedron</td></tr><tr><td style="text-align:left;">Bezier curves</td><td style="text-align:left;">addBezier</td></tr><tr><td style="text-align:left;">Spline curves with three modes: Folded segments, Multi-segment Bessel curves, Catmull-Rom curves</td><td style="text-align:left;">addSpline</td></tr><tr><td style="text-align:left;">Mesh</td><td style="text-align:left;">addMesh</td></tr><tr><td style="text-align:left;">Index Based Mesh</td><td style="text-align:left;">addIndexedMesh</td></tr></tbody></table><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>Since the vertex cache is cleared after rendering these geometries per frame, it is necessary to add geometries to the geometry renderer object (located in the camera) per frame in functions like update.</p><p>To use this feature you need to enable <strong>Geometry Renderer</strong> in <strong>Project Settings</strong> -&gt; <strong>Feature Cropping</strong>.</p><p><img src="'+n+`" alt="enable geometry renderer"></p><blockquote><p><strong>Note</strong>: Please make sure your project is 3D based.</p></blockquote><p>The code example is as follows:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Camera, Color } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">executeInEditMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Geometry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeInEditMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Geometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Camera)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    mainCamera</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Camera</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {        </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mainCamera?.camera.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initGeometryRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deltaTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mainCamera?.camera?.geometryRenderer?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.worldPosition, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Color.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GREEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The result is as follows:</p><p><img src="`+r+'" alt="result"></p>',21),p=[h];function o(k,g,y,c,E,m){return s(),e("div",null,p)}const x=t(d,[["render",o]]);export{u as __pageData,x as default};
