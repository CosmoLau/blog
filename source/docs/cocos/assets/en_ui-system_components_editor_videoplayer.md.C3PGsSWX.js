import{_ as s,c as t,o as i,a4 as e}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/videoplayer.kCN23jEa.png",n="/docs/cocos/assets/videoplayer-remote.D5XW9dRN.png",l="/docs/cocos/assets/ENABLE_TRANSPARENT_CANVAS.4ASegSeY.png",o="/docs/cocos/assets/videoplayer-stayonbuttom.DnpBYzAG.png",F=JSON.parse('{"title":"VideoPlayer Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/videoplayer.md","filePath":"en/ui-system/components/editor/videoplayer.md","lastUpdated":1712305443000}'),r={name:"en/ui-system/components/editor/videoplayer.md"},p=e('<h1 id="videoplayer-component-reference" tabindex="-1">VideoPlayer Component Reference <a class="header-anchor" href="#videoplayer-component-reference" aria-label="Permalink to &quot;VideoPlayer Component Reference&quot;">​</a></h1><p><strong>VideoPlayer</strong> is a component for playing videos, you could use this component for playing local video and remote videos.</p><p><strong>Playing a local video</strong>:</p><p><img src="'+a+'" alt="videoplayer"></p><p><strong>Playing a remote video</strong>:</p><p><img src="'+n+`" alt="videoplayer-remote"></p><p>Click <strong>Add Component</strong> at the bottom of <strong>Properties</strong> panel and select <strong>VideoPlayer</strong> from <strong>UI Component</strong> to add the <strong>VideoPlayer</strong> component to the node.</p><p>For more information about <strong>VideoPlayer</strong>&#39;s scripting interface, please refer to the <a href="./__APIDOC__/en/class/VideoPlayer">VideoPlayer API</a> documentation.</p><h2 id="videoplayer-properties" tabindex="-1">VideoPlayer Properties <a class="header-anchor" href="#videoplayer-properties" aria-label="Permalink to &quot;VideoPlayer Properties&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Resource Type</strong></td><td style="text-align:left;">The resource type of videoplayer, REMOTE for remote url and LOCAL for local file path.</td></tr><tr><td style="text-align:left;"><strong>Remote URL</strong></td><td style="text-align:left;">Displayed when Resource Type is REMOTE, feed it with a remote video URL.</td></tr><tr><td style="text-align:left;"><strong>Clip</strong></td><td style="text-align:left;">Displayed when Resource Type is LOCAL, feed it with a local video path.</td></tr><tr><td style="text-align:left;"><strong>Play On Awake</strong></td><td style="text-align:left;">Whether the video start playing automatically after loaded?</td></tr><tr><td style="text-align:left;"><strong>Current Time</strong></td><td style="text-align:left;">The current playback time of the now playing item in seconds, you could also change the start playback time.</td></tr><tr><td style="text-align:left;"><strong>Volume</strong></td><td style="text-align:left;">The volume of the video. (0.0 ~ 1.0)</td></tr><tr><td style="text-align:left;"><strong>Mute</strong></td><td style="text-align:left;">Mutes the VideoPlayer. Mute sets the volume=0, Un-Mute restore the original volume.</td></tr><tr><td style="text-align:left;"><strong>Keep Aspect Ratio</strong></td><td style="text-align:left;">Whether keep the aspect ratio of the original video.</td></tr><tr><td style="text-align:left;"><strong>Full Screen On Awake</strong></td><td style="text-align:left;">Whether play video in fullscreen mode.</td></tr><tr><td style="text-align:left;"><strong>Stay On Bottom</strong></td><td style="text-align:left;">Display video below the game view (Only available on web).</td></tr><tr><td style="text-align:left;"><strong>Video Player Event</strong></td><td style="text-align:left;">The video player&#39;s callback, it will be triggered when certain event occurs. Please refer to the <code>VideoPlayer Event</code> section below or <a href="./__APIDOC__/en/class/VideoPlayer?id=videoPlayerEvent">VideoPlayerEvent API</a> for more details.</td></tr></tbody></table><blockquote><p><strong>Note</strong>: in the <strong>Node</strong> of the <strong>Video Player Event</strong> property, you should fill in a Node that hangs the user script component, and in the user script you can use the relevant <strong>VideoPlayer</strong> event according to the user&#39;s needs.</p></blockquote><h2 id="videoplayer-event" tabindex="-1">VideoPlayer Event <a class="header-anchor" href="#videoplayer-event" aria-label="Permalink to &quot;VideoPlayer Event&quot;">​</a></h2><h3 id="videoplayerevent-event" tabindex="-1">VideoPlayerEvent Event <a class="header-anchor" href="#videoplayerevent-event" aria-label="Permalink to &quot;VideoPlayerEvent Event&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>target</strong></td><td style="text-align:left;">Node with the script component.</td></tr><tr><td style="text-align:left;"><strong>component</strong></td><td style="text-align:left;">Script component name.</td></tr><tr><td style="text-align:left;"><strong>handler</strong></td><td style="text-align:left;">Specify a callback, when the video player is about to playing or paused, it will be called. There is a parameter in the callback which indicate the state of played videos.</td></tr><tr><td style="text-align:left;"><strong>customEventData</strong></td><td style="text-align:left;">The user specifies that any string is passed in as the last parameter of the event callback</td></tr></tbody></table><p>For more information, please refer to the <a href="./__APIDOC__/en/class/EventHandler">Component.EventHandler Class</a> documentation.</p><h3 id="parameter-of-videoplayerevent" tabindex="-1">Parameter of VideoPlayerEvent <a class="header-anchor" href="#parameter-of-videoplayerevent" aria-label="Permalink to &quot;Parameter of VideoPlayerEvent&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Function Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>NONE</strong></td><td style="text-align:left;">None</td></tr><tr><td style="text-align:left;"><strong>PLAYING</strong></td><td style="text-align:left;">Video is playing.</td></tr><tr><td style="text-align:left;"><strong>PAUSED</strong></td><td style="text-align:left;">Video is paused.</td></tr><tr><td style="text-align:left;"><strong>STOPPED</strong></td><td style="text-align:left;">Video is stopped.</td></tr><tr><td style="text-align:left;"><strong>COMPLETED</strong></td><td style="text-align:left;">Video is completed.</td></tr><tr><td style="text-align:left;"><strong>META_LOADED</strong></td><td style="text-align:left;">Video&#39;s meta data is loaded.</td></tr><tr><td style="text-align:left;"><strong>READY_TO_PLAY</strong></td><td style="text-align:left;">Video is ready to play.</td></tr><tr><td style="text-align:left;"><strong>ERROR</strong></td><td style="text-align:left;">Video Trigger Error</td></tr><tr><td style="text-align:left;"><strong>CLICKED</strong></td><td style="text-align:left;">Video is clicked by the user. (Only supports Web platform.)</td></tr></tbody></table><blockquote><p><strong>Note</strong>: on iOS, due to the platform limitations, the <strong>CLICKED</strong> event can&#39;t be fired when <strong>VideoPlayer</strong> is in fullscreen mode. If you want to let the Video played in fullscreen and also fire the <strong>CLICKED</strong> event properly, you should use a <strong>Widget</strong> component to hack the <strong>VideoPlayer&#39;s</strong> size.</p></blockquote><p>For more information, please refer to the <a href="./__APIDOC__/en/class/VideoPlayer?id=videoPlayerEvent">VideoPlayer Events</a> documentation or the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/21.video-player" target="_blank" rel="noreferrer">21.video-player example</a> in the <code>test-cases-3d</code> samples bundled with <strong>Cocos Creator</strong>.</p><h2 id="detailed-explanation" tabindex="-1">Detailed Explanation <a class="header-anchor" href="#detailed-explanation" aria-label="Permalink to &quot;Detailed Explanation&quot;">​</a></h2><p>The supported video types is <strong>mp4</strong> format.</p><h3 id="add-a-callback-via-script" tabindex="-1">Add a callback via script <a class="header-anchor" href="#add-a-callback-via-script" aria-label="Permalink to &quot;Add a callback via script&quot;">​</a></h3><h4 id="method-one" tabindex="-1">Method one <a class="header-anchor" href="#method-one" aria-label="Permalink to &quot;Method one&quot;">​</a></h4><p>This method uses the same API that editor uses to add an event callback on Button component. You need to construct a <code>Component.EventHandler</code> object first, and then set the corresponding <code>target</code>, <code>component</code>, <code>handler</code> and <code>customEventData</code> parameters.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, VideoPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    videoPlayer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Component.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTarget;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyComponent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;callback&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.customEventData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.videoplayer.videoPlayerEvent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eventHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // the order of parameters should not change</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">videoplayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // videoplayer is a VideoPlayer component instance</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // eventType is typed as VideoPlayer.EventType</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // customEventData is &quot;foobar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="method-two" tabindex="-1">Method two <a class="header-anchor" href="#method-two" aria-label="Permalink to &quot;Method two&quot;">​</a></h4><p>Add event callback with <code>videoplayer.node.on(VideoPlayer.EventType.READY_TO_PLAY, ...)</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Suppose we add event handling callbacks in the onLoad method of a component and perform event handling in the callback function:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, find, VideoPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;VideoPlayerCtrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VideoPlayerCtrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    videoPlayer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.videoplayer.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer.EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">READY_TO_PLAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">videoplayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The &quot;videoplayer&quot; here represents the VideoPlayer component.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // do whatever you want with videoplayer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // you can&#39;t pass customEventData in this way</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Likewise, it is also posible to register the <code>meta-loaded</code>, <code>clicked</code>, <code>playing</code> events, and the parameters of the callback function for these events are consistent with the <code>ready-to-play</code> parameters.</p><p>Please refer to the <a href="./__APIDOC__/en/class/VideoPlayer">VideoPlayer API</a> documentation for details on <strong>VideoPlayer</strong> events.</p><blockquote><p><strong>Note</strong>: as <strong>VideoPlayer</strong> is a special component, it cannot register <code>touch</code> or <code>mouse</code> events on the node with <strong>VideoPlayer</strong> component.</p></blockquote><h2 id="how-to-display-a-ui-upon-a-video" tabindex="-1">How to display a UI upon a video <a class="header-anchor" href="#how-to-display-a-ui-upon-a-video" aria-label="Permalink to &quot;How to display a UI upon a video&quot;">​</a></h2><p>You can display a UI upon a video in two steps:</p><ol><li><p>Make sure the <strong>ENABLE_TRANSPARENT_CANVAS</strong> checkbox is checked. It can be found in the <strong>Macro Config</strong> page in <strong>Project Settings</strong></p><p><img src="`+l+'" alt="ENABLE_TRANSPARENT_CANVAS"></p></li><li><p>Check the <strong>stayOnBottom</strong> property on the <strong>VideoPlayer</strong> in the <strong>Properties</strong> panel.</p></li></ol><blockquote><p><strong>Notes</strong>:</p><ol><li>This feature is only supported on Web.</li><li>The specific effects are not guaranteed to be consistent, depending on whether each browser supports or restricts.</li><li>After the <strong>stayOnBottom</strong> is enabled, the <code>clicked</code> event in <code>VideoPlayerEvent</code> cannot be listened normally.</li></ol></blockquote><p>For more information, please refer to the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/21.video-player" target="_blank" rel="noreferrer">21.video-player example</a> in the <code>test-cases-3d</code> samples bundled with <strong>Cocos Creator</strong>. Results as shown below:</p><p><img src="'+o+`" alt="videoplayer-stayOnButtom"></p><h2 id="support-platform" tabindex="-1">Support platform <a class="header-anchor" href="#support-platform" aria-label="Permalink to &quot;Support platform&quot;">​</a></h2><p>Because different platforms have different authorization, API and control methods for <strong>VideoPlayer</strong> component. And have not yet formed a unified standard, only <strong>Web</strong>, <strong>iOS</strong>, <strong>Android</strong>, <strong>WeChat Mini Games</strong>, <strong>Facebook Instant Games</strong> and <strong>Google Play Instant</strong> platforms are currently supported.</p><h3 id="questions-about-autoplay" tabindex="-1">Questions about autoplay <a class="header-anchor" href="#questions-about-autoplay" aria-label="Permalink to &quot;Questions about autoplay&quot;">​</a></h3><p>Some mobile browsers or <strong>WebView</strong> do not allow auto-playing of videos and users need to play the video manually in a touch event.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Node, Component, find, VideoPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;VideoPlayerCtrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VideoPlayerCtrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    videoPlayer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Canvas&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Node.EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOUCH_START</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.playVideo, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    playVideo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.videoplayer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,42),h=[p];function d(k,g,y,E,c,u){return i(),t("div",null,h)}const f=s(r,[["render",d]]);export{F as __pageData,f as default};
