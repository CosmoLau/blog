import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.uQk9_EO2.js";const n="/docs/cocos/assets/macro-simple.Cago8MQx.png",t="/docs/cocos/assets/albedo-map.lvL4kegC.png",f=JSON.parse('{"title":"Preprocessor Macro Definition","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/macros.md","filePath":"en/shader/macros.md","lastUpdated":1712305443000}'),l={name:"en/shader/macros.md"},h=e('<h1 id="preprocessor-macro-definition" tabindex="-1">Preprocessor Macro Definition <a class="header-anchor" href="#preprocessor-macro-definition" aria-label="Permalink to &quot;Preprocessor Macro Definition&quot;">​</a></h1><p>Preprocessing macros only take effect when Cocos Effect is compiled. Different combinations of preprocessing macros will generate different codes to better manage the content of Cocos Effect code, and the generated shader code is redundant and efficient.</p><p>Preprocessing macros only take effect when Cocos Effect is compiled, and different combinations of preprocessing macros generate different code to better manage Cocos Effect code content while generating non-redundant and efficient shader code.</p><p>Cocos Creator will collect all macro definitions that appear in Cocos Effect when loading resources, and then display them in the <strong>Inspector</strong> panel, which is convenient for users to make visual adjustments, as shown in the following figure:</p><p><img src="'+n+`" alt="macro-simple"></p><p>Taking the use of the preprocessing macro <code>USE_TEXTURE</code> as an example, the code example is as follows:</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram unlit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  #if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> USE_TEXTURE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>The declaration rules for macro definitions are as follows:</p><ul><li>All macro definitions default to <code>false</code>, so when defining a simple macro definition (such as a macro for a boolean switch), its default value cannot be specified, but can be modified through the <strong>Inspector</strong> panel or code. If there is a mutually exclusive relationship between certain macros in the design (cannot be true at the same time), it can be handled by using the macro declared by tag. For details, please refer to the <strong>Macro Tags</strong> section below.</li><li>All custom macros that appear in Shader will be explicitly defined at runtime (the default value is 0), so <strong>except for GLSL language built-in macros (extensions at the beginning of <code>GL_</code>, etc.)</strong>, please do not use <code>#ifdef</code> or <code>#if defined</code> is used for judgment, otherwise the execution result will always be true;</li><li>Macro definitions can be used not only in <code>CCProgram</code> to control the code logic within the macro definition, but also in <code>CCEffect</code> to associate the display state of editable properties with the macro definition.</li></ul><p>As shown below, <code>mainTexture</code> will only be displayed on the <strong>Inspector</strong> panel when the <code>USE_TEXTURE</code> preprocessor macro is turned on:</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCEffect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    # ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    properties:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainTexture:  { value: white, editor: { parent: USE_TEXTURE } }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        # ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram unlit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        #if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> USE_TEXTURE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Handle mainTexture logic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p><img src="`+t+`" alt="macro-property"></p><h2 id="macro-tags" tabindex="-1">Macro Tags <a class="header-anchor" href="#macro-tags" aria-label="Permalink to &quot;Macro Tags&quot;">​</a></h2><p>Although the effect compiler will try to be smart and collect all pre-processing branches, sometimes there are more complicated cases:</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// macro defined within certain numerical &#39;range&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LAYERS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#elif</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LAYERS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// multiple discrete &#39;options&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metallic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pbrMap, uv).METALLIC_SOURCE;</span></span></code></pre></div><p>For these special usages, you&#39;ll have to explicitly declare the macro, using macro tags:</p><table><thead><tr><th style="text-align:left;">Tag</th><th style="text-align:left;">Description</th><th style="text-align:left;">Default Value</th><th style="text-align:left;">Usage</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>range</strong></td><td style="text-align:left;">A two-element array, specifying minimum and maximum value, both inclusive</td><td style="text-align:left;">[0, 3]</td><td style="text-align:left;">For macros with bounded range. The bound should be as tight as possible</td></tr><tr><td style="text-align:left;"><strong>options</strong></td><td style="text-align:left;">An arbitrary-length array, specifying every possible options</td><td style="text-align:left;">nothing</td><td style="text-align:left;">For macros with discrete, explicit choices</td></tr></tbody></table><p>Declarations for the above case are:</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define-meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LAYERS</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define-meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> METALLIC_SOURCE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>The first line declares a macro named <code>LAYERS</code>, with possible range of [4, 5].</p><p>The second line declares a macro named <code>METALLIC_SOURCE</code>, with four possible options: &#39;r&#39;, &#39;g&#39;, &#39;b&#39;, &#39;a&#39;.</p><blockquote><p><strong>Note</strong>:</p><ol><li>every tag accepts a single parameter, in the syntax of YAML.</li><li>Before v3.5, the syntax for Macro Tags feature is <code>#pragma define</code>, but from v3.5, the syntax will be automatically upgraded to <code>#pragma define-meta</code> during effect migration process, please pay attention to use the right syntax if you are writing new effect or using external effects without meta file.</li></ol></blockquote><h3 id="function-like-macros" tabindex="-1">Function-like Macros <a class="header-anchor" href="#function-like-macros" aria-label="Permalink to &quot;Function-like Macros&quot;">​</a></h3><p>Due to lack of native support in WebGL platform, functional macros are provided as an effect compile-time feature, all references will be expanded in the output shader.</p><p>This is an good match for inlining some simple utility functions, or similar code repeating several times.</p><p>In fact, many built-in utility functions are functional macros:</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CCDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CCVertInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  CCDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_USE_SKINNING</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         \\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CCSkin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                      \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pragma</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // empty pragma trick to get rid of trailing semicolons at effect compile time</span></span></code></pre></div><p>Meanwhile, same as the macro system in C/C++, the mechanism does nothing on checking the <a href="https://en.wikipedia.org/wiki/Hygienic_macro" target="_blank" rel="noreferrer">Hygienic Macro WikiPedia Entry</a>. Any issues will have to be dealt with by developers manually:</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// please do be careful with unhygienic macros like this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INCI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ++</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when invoking</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INCI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // correct, b would be 9 after this</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INCI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // wrong! a would still be 4</span></span></code></pre></div><blockquote><p><strong>Note</strong>: Before v3.5, the standard define in glsl is occupied by Functional Macros, so developers aren&#39;t able to use standard define like <code>#ifdef</code> or <code>#ifndef</code>. But from v3.5, the syntax of Functional Macros is upgraded to <code>#pragma define</code>. All Functional Macros will be automatically upgraded during effect migration process, and developers can directly use standard defines inn the shader. Just need some extra attention to use the right syntax if you are writing new effect or using external effects without meta file.</p></blockquote>`,30),p=[h];function r(k,o,d,c,g,E){return a(),i("div",null,p)}const m=s(l,[["render",r]]);export{f as __pageData,m as default};
