import{_ as i,c as s,o as a,a5 as e}from"./chunks/framework.CqnjdYks.js";const u=JSON.parse('{"title":"兼容性说明","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/audio-system/audioLimit.md","filePath":"zh/manual/audio-system/audioLimit.md"}'),t={name:"zh/manual/audio-system/audioLimit.md"},n=e(`<h1 id="兼容性说明" tabindex="-1">兼容性说明 <a class="header-anchor" href="#兼容性说明" aria-label="Permalink to &quot;兼容性说明&quot;">​</a></h1><h2 id="web-平台音频资源的加载模式" tabindex="-1">Web 平台音频资源的加载模式 <a class="header-anchor" href="#web-平台音频资源的加载模式" aria-label="Permalink to &quot;Web 平台音频资源的加载模式&quot;">​</a></h2><p>Web 平台上的音频资源比较特别，因为 Web 标准支持以两种不同的方式加载音频资源，分别是：</p><ul><li>Web Audio：提供相对更加现代化的声音控制接口，在引擎内是以一个 audio buffer 的形式缓存的。这种方式的优点是兼容性好，问题比较少。</li><li>DOM Audio：通过生成一个标准的 audio 元素来播放音频资源，在引擎内缓存的就是这个 audio 元素。使用标准的 audio 元素播放音频资源时，在某些浏览器上可能会遇到一些兼容性问题，比如 iOS 上的浏览器不支持调整音量大小，所有 volume 相关属性将不会生效。</li></ul><p>目前 Cocos Creator 默认以 Web Audio 的方式加载音频资源，但如果检测到当前浏览器不支持加载 Web Audio，则会切换使用 DOM Audio 的方式加载音频。</p><p>如果项目需要强制通过 DOM Audio 的方式加载音频资源，请使用以下方式动态加载：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assetManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadRemote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://example.com/background.mp3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    audioLoadMode: AudioClip.AudioType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DOM_AUDIO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">clip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AudioClip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,7),l=[n];function p(h,k,d,o,r,E){return a(),s("div",null,l)}const g=i(t,[["render",p]]);export{u as __pageData,g as default};
