import{_ as s,v as a,b as n,R as l}from"./chunks/framework.5ffcbaff.js";const C=JSON.parse('{"title":"使用 JsbBridge 实现 JavaScript 与 Java 通信","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/js-java-bridge.md","filePath":"zh/manual/advanced-topics/js-java-bridge.md"}'),o={name:"zh/manual/advanced-topics/js-java-bridge.md"},p=l(`<h1 id="使用-jsbbridge-实现-javascript-与-java-通信" tabindex="-1">使用 JsbBridge 实现 JavaScript 与 Java 通信 <a class="header-anchor" href="#使用-jsbbridge-实现-javascript-与-java-通信" aria-label="Permalink to &quot;使用 JsbBridge 实现 JavaScript 与 Java 通信&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p><a href="./java-reflection.html">基于反射机制实现 JavaScript 与 Android 系统原生通信</a> 的方法中，我们不仅需要严格声明包名和函数签名，还需要严格校对参数数量以确保正常运行，步骤较为复杂。</p><p>因此我们额外提供了另外一种方法，用于简化脚本层到原生层的调用。这是一种通道，或者说是一个桥梁，我们将其命名为 <code>JsbBridge</code>，意为通过 <code>JSB</code> 绑定作为沟通脚本和原生 APP 的桥梁。</p><blockquote><p><strong>注意</strong>：两种方式都是可以正常使用的，开发者可以根据实际需要选择使用。</p></blockquote><h2 id="调用机制" tabindex="-1">调用机制 <a class="header-anchor" href="#调用机制" aria-label="Permalink to &quot;调用机制&quot;">​</a></h2><h3 id="javascript-接口介绍" tabindex="-1">JavaScript 接口介绍 <a class="header-anchor" href="#javascript-接口介绍" aria-label="Permalink to &quot;JavaScript 接口介绍&quot;">​</a></h3><p>在脚本层只有 <code>sendToNative</code> 和 <code>onNative</code> 两个接口，定义如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bridge</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Send to native with at least one argument.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendToNative</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Save your own callback controller with a JavaScript function,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Use &#39;jsb.bridge.onNative = (arg0: String, arg1: String | null)=&gt;{...}&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#676E95;font-style:italic;"> : received from native</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">onNative</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>见名知义，<code>sendToNative</code> 用于调用原生层的代码，而 <code>onNative</code> 用于响应原生层的调用。</p><p>使用时需要注意以下几点：</p><ul><li>由于现在这个功能还在实验阶段，所以只支持 <code>string</code> 的传输，如果需要传输包含多种参数的对象，请考虑将其转化为 <code>Json</code> 形式进行传输，并在不同层级解析。</li><li><code>onNative</code> 同一时间只会记录一个函数，当再次 <code>set</code> 该属性时会覆盖原先的 <code>onNative</code> 方法。</li><li><code>sendToScript</code> 方法是单向通信，不会关心下层的返回情况，也不会告知 <code>JavaScript</code> 操作成功或者失败。开发者需要自行处理操作情况。</li></ul><h3 id="java-接口介绍" tabindex="-1">Java 接口介绍 <a class="header-anchor" href="#java-接口介绍" aria-label="Permalink to &quot;Java 接口介绍&quot;">​</a></h3><p>在 <code>JAVA</code> 中，也有两对应的接口， <code>sendToScript</code> 和 <code>onScript</code>，定义如下：</p><div class="language-JAVA"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JAVA</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JsbBridge</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ICallback</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * Applies this callback to the given argument.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#676E95;font-style:italic;"> as input</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#676E95;font-style:italic;"> as input</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onScript</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /** Add a callback which you would like to apply</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#676E95;font-style:italic;"> ICallback, the method which will be actually applied. multiple calls will override</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setCallback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ICallback</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Java dispatch Js event, use native c++ code</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#676E95;font-style:italic;"> input values</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sendToScript</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sendToScript</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>其中 <code>sendToScript</code> 用于调用脚本层代码，而 <code>onScript</code> 用于响应脚本层的调用。</p><p>我们需要实现 <code>ICallback</code> 接口，并且使用 <code>setCallback</code> 注册，来响应 <code>onScript</code> 的具体行为。</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><h3 id="javascript-触发-java-的方法" tabindex="-1">JavaScript 触发 Java 的方法 <a class="header-anchor" href="#javascript-触发-java-的方法" aria-label="Permalink to &quot;JavaScript 触发 Java 的方法&quot;">​</a></h3><p>假设我们用 Java 写了一个打开广告的接口，当玩家点击打开广告的按钮时，应该由 JavaScript 调用对应的接口，触发打开广告的操作。</p><p>我们需要先实现一个 ICallback 接口，用于响应操作，并利用 <code>JsbBridge.setCallback</code> 注册，代码如下：</p><div class="language-JAVA"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">JsbBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCallback</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> JsbBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ICallback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onScript</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> arg0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> arg1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TO DO</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arg0</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open_ad</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)){</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//call openAd method.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><blockquote><p>实际项目中，上面的代码一般会在 <code>AppActivity.java</code> 的 <code>onCreated</code> 中直接或者间接被调用，以确保能够响应所有来自脚本层的调用。</p></blockquote><p>在 JavaScript 脚本中，我们就可以像下面一样调用：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">native</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">public static </span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendToNative</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">open_ad</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultAdUrl</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="java-触发-javascript-的方法" tabindex="-1">JAVA 触发 JavaScript 的方法 <a class="header-anchor" href="#java-触发-javascript-的方法" aria-label="Permalink to &quot;JAVA 触发 JavaScript 的方法&quot;">​</a></h3><p>假设我们的广告播放完成后，需要通知 JavaScript 层，可以像下面这样操作。</p><p>首先，需要在 JavaScript 使用 <code>onNative</code> 响应事件：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onNative</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg0</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arg0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ad_close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arg1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">finished</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//ad playback completed.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//ad cancel.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>实际项目中，可以将以面代码写在一个程序启动时就要加载的脚本脚本的 onload 函数中，以确保尽早监听来自原生层的事件。</p></blockquote><p>然后，在 <code>Java</code> 中，用如下代码调用：</p><div class="language-JAVA"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">JsbBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendToScript</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ad_close</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">finished</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>通过上述操作，便可以通知 JavaScript 广告的播放结果了。</p><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><p>JsbBridge 提供了 arg0 和 arg1 两个 string 类型的参数用于传递信息，可以根据不同的需求进行分配。</p><h3 id="_1-arg0-和-arg1-均用于参数" tabindex="-1">1. arg0 和 arg1 均用于参数 <a class="header-anchor" href="#_1-arg0-和-arg1-均用于参数" aria-label="Permalink to &quot;1. arg0 和 arg1 均用于参数&quot;">​</a></h3><p>如果通信需求比较简单，不需要进行分类处理，则可以将 arg0 和 arg1 用作参数传递。</p><h3 id="_2-arg0-用于分类标记-arg1-用于参数" tabindex="-1">2. arg0 用于分类标记, arg1 用于参数 <a class="header-anchor" href="#_2-arg0-用于分类标记-arg1-用于参数" aria-label="Permalink to &quot;2. arg0 用于分类标记, arg1 用于参数&quot;">​</a></h3><p>如果通信需求相对复杂，可以使用 arg0 作为分类标记，根据 arg0 来分类处理， arg1 用于参数传递</p><h3 id="_3-arg0-用于分类标记-arg1-作为-json-字符串" tabindex="-1">3. arg0 用于分类标记，arg1 作为 JSON 字符串 <a class="header-anchor" href="#_3-arg0-用于分类标记-arg1-作为-json-字符串" aria-label="Permalink to &quot;3. arg0 用于分类标记，arg1 作为 JSON 字符串&quot;">​</a></h3><p>对于特别复杂的需求， 单纯的 string 类型参数无法满足，此时可以将需要传递的对象通过 <code>JSON.stringfy</code> 转化为字符串，再通过 arg1 进行传递。 使用时，再利用 <code>JSON.parse</code> 还原为对象，做后续的处理。</p><blockquote><p>由于涉及到 JSON 的序列化和反序列化操作，这种使用方式不建议高频调用。</p></blockquote><h2 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h2><p>注意，如果相关代码涉及到原生 UI 的部分，就需要考虑线程安全问题，详情请参考：<a href="./thread-safety.html">线程安全</a>。</p><h2 id="示例工程-简单的多事件调用" tabindex="-1">示例工程：简单的多事件调用 <a class="header-anchor" href="#示例工程-简单的多事件调用" aria-label="Permalink to &quot;示例工程：简单的多事件调用&quot;">​</a></h2><p>Cocos Creator 提供了 <strong>native-script-bridge</strong>（<a href="https://github.com/cocos-creator/example-3d/tree/v3.7/native-script-bridge" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/example-3d/tree/v3.7/native-script-bridge" target="_blank" rel="noreferrer">Gitee</a>）范例，开发者可根据需要自行下载以参考使用。</p>`,46),t=[p];function e(c,r,i,y,F,D){return a(),n("div",null,t)}const d=s(o,[["render",e]]);export{C as __pageData,d as default};
