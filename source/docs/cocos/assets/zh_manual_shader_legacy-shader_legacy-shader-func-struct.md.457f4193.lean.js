import{_ as s,v as a,b as n,R as l}from"./chunks/framework.5ffcbaff.js";const A=JSON.parse('{"title":"Legacy Shader 主要函数与结构体","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/legacy-shader/legacy-shader-func-struct.md","filePath":"zh/manual/shader/legacy-shader/legacy-shader-func-struct.md"}'),p={name:"zh/manual/shader/legacy-shader/legacy-shader-func-struct.md"},o=l(`<h1 id="legacy-shader-主要函数与结构体" tabindex="-1">Legacy Shader 主要函数与结构体 <a class="header-anchor" href="#legacy-shader-主要函数与结构体" aria-label="Permalink to &quot;Legacy Shader 主要函数与结构体&quot;">​</a></h1><h2 id="ccvertinput-1" tabindex="-1">CCVertInput[^1] <a class="header-anchor" href="#ccvertinput-1" aria-label="Permalink to &quot;CCVertInput[^1]&quot;">​</a></h2><ul><li><p>为对接骨骼动画与数据解压流程，我们提供了 <code>CCVertInput</code> 工具函数，它有 <code>general</code> 和 <code>standard</code> 两个版本，内容如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 位于 ‘input.chunk’ 的通用顶点着色器输入</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CCVertInput</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">position</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">CCDecode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">         \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CC_USE_MORPH</span><span style="color:#A6ACCD;">            \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">applyMorph</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">position</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;     \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">endif</span><span style="color:#A6ACCD;">                      \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CC_USE_SKINNING</span><span style="color:#A6ACCD;">         \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">CCSkin</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">position</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;         \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">endif</span><span style="color:#A6ACCD;">                      \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">pragma</span><span style="color:#676E95;font-style:italic;"> // 空 ‘pragma’ 技巧，在编译时消除尾随分号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 位于 ‘input-standard.chunk’ 的标准顶点着色器输入</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CCVertInput</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">In</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">CCDecode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">In</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">         \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CC_USE_MORPH</span><span style="color:#A6ACCD;">      \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">applyMorph</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">In</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;     \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">endif</span><span style="color:#A6ACCD;">                \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CC_USE_SKINNING</span><span style="color:#A6ACCD;">   \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">CCSkin</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">In</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;         \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">endif</span><span style="color:#A6ACCD;">                \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">pragma</span><span style="color:#676E95;font-style:italic;"> // 空 ‘pragma’ 技巧，在编译时消除尾随分号</span></span></code></pre></div></li><li><p>如果只需要获取 <strong>顶点位置信息</strong>，可以使用 <strong>general</strong> 版本，那么顶点着色器函数开头的代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">legacy/input</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  vec3 position</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">CCVertInput</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">position</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... 对位置信息做自定义操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果还需要法线等信息，可使用 <code>standard</code> 版本，像下面这样写：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">legacy/input-standard</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  StandardVertInput In</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">CCVertInput</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">In</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... 此时 ‘In.position’ 初始化完毕，并且可以在顶点着色器中使用</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><p>上面的示例代码中，<code>StandardVertInput</code> 对象 <code>In</code> 会返回模型空间的顶点位置（<code>position</code>）、法线（<code>normal</code>）和切空间（<code>tangent</code>）信息，并对骨骼动画模型做完蒙皮计算。</p><p><code>StandardVertInput</code> 结构体的定义如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> StandardVertInput </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  highp vec4 position</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  vec3 normal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  vec4 tangent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><blockquote><p><strong>注意</strong>：引用头文件后，不要在 Shader 内重复声明这些 attributes（<code>a_position</code>、<code>a_normal</code>、<code>a_tangent</code> 等）。对于其他顶点数据（如 uv 等）还是需要声明 attributes 后再使用。</p></blockquote><p>如果要对接引擎动态 Mesh 合批和几何体实例化（GPU Instancing），需要包含 <code>cc-local-batch</code> 头文件，通过 <code>CCGetWorldMatrix</code> 工具函数获取世界矩阵，示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">mat4</span><span style="color:#A6ACCD;"> matWorld</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">CCGetWorldMatrix</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matWorld</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">mat4</span><span style="color:#A6ACCD;"> matWorld</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> matWorldIT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">CCGetWorldMatrixFull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matWorld</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> matWorldIT</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>更多细节，请参考 <a href="./uniform.html">Cocos Shader 内置全局 Uniform</a>。</p><h2 id="ccfragoutput" tabindex="-1">CCFragOutput <a class="header-anchor" href="#ccfragoutput" aria-label="Permalink to &quot;CCFragOutput&quot;">​</a></h2><p>Cocos Shader 提供了 <code>CCFragOutput</code> 工具函数用以简化片元着色器的输出，可用于直接返回片元着色器所需要的值，代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">legacy/output</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">frag</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  vec4 o </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... 编写片元着实代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CCFragOutput</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">o</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>CCFragOutput</code> 会根据管线状态来决定是否需要做 <code>ToneMap</code> 转码处理，这样中间的颜色计算就不必区分当前渲染管线是否为 HDR 流程。</p><p>代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CCFragOutput</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vec4 </span><span style="color:#A6ACCD;font-style:italic;">color</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CC_USE_HDR</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">color</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rgb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ACESToneMap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">color</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rgb</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">color</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rgb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">LinearToSRGB</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">color</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rgb</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>特别注意</strong>：</p><p>如果采用 <code>CCFragOutput</code> 作为片元输出，中间的颜色运算必须转到 <code>Linear</code> 空间，因为 <code>CCFragOutput</code> 认为传入的参数是在 <code>Linear</code> 空间的，总是会进行 <code>LinearToSRGB</code> 转码。</p><p><code>CCFragOutput</code> 函数一般不需要自己实现，它只起到与渲染管线对接的作用，且对于这种含有光照计算的输出，因为计算结果已经在 HDR 范围，所以应该包含 <code>output-standard</code> 而非 <code>output</code> 头文件。</p><p>如需包含标准的 PBR 光照计算，可使用 <code>StandardSurface</code> 结构体与函数 <code>CCStandardShadingBase</code> 一起构成 PBR 着色流程。</p><p><code>StandardSurface</code> 结构体内容如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> StandardSurface </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// albedo</span></span>
<span class="line"><span style="color:#F07178;">  vec4 albedo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// these two need to be in the same coordinate system</span></span>
<span class="line"><span style="color:#F07178;">  vec3 position</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  vec3 normal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// emissive</span></span>
<span class="line"><span style="color:#F07178;">  vec3 emissive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// light map</span></span>
<span class="line"><span style="color:#F07178;">  vec3 lightmap</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> lightmap_test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// PBR params</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> roughness</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> metallic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> occlusion</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">legacy/shading-standard-base</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">legacy/output-standard</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">surf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">out StandardSurface </span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// fill in your data here</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">vec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">frag</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  StandardSurface s</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">surf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">s</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  vec4 color </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CCStandardShadingBase</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">s</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CCFragOutput</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>也可以参考 <code>builtin-standard.effect</code> 中，使用 <code>surf</code> 函数与 <code>CC_STANDARD_SURFACE_ENTRY()</code> 宏组合。</p><p><code>CC_STANDARD_SURFACE_ENTRY()</code> 是一个 wrapper，会根据渲染状态，利用 <code>surf</code> 函数构建出一个可用于片元的 <code>main</code> 函数，代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CCProgram shader</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">fs </span><span style="color:#89DDFF;">%{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">legacy/standard-surface-entry</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">surf</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">out StandardSurface s</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// fill in your data here</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">CC_STANDARD_SURFACE_ENTRY</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}%</span></span></code></pre></div><h2 id="standardsurface" tabindex="-1">StandardSurface <a class="header-anchor" href="#standardsurface" aria-label="Permalink to &quot;StandardSurface&quot;">​</a></h2><p>StandardSurface 为 PBR 材质信息结构体，记录了一个像素需要进行光照计算的表面信息。 Lagecy Shader 中的 surf 函数主要用于填充，它会在光照阶段被使用。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct StandardSurface </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// albedo</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec4</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">albedo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// these two need to be in the same coordinate system</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">HIGHP_VALUE_STRUCT_DEFINE</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vec3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">normal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// emissive</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">emissive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// light map</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lightmap</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lightmap_test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// PBR params</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">roughness</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">metallic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">occlusion</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">specularIntensity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CC_RECEIVE_SHADOW</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">vec2</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shadowBias</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">endif</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="toonsurface" tabindex="-1">ToonSurface <a class="header-anchor" href="#toonsurface" aria-label="Permalink to &quot;ToonSurface&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct ToonSurface </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec4</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">baseColor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec4</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">specular</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// these two need to be in the same coordinate system</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">HIGHP_VALUE_STRUCT_DEFINE</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vec3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">normal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// shading params</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shade1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shade2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">emissive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">baseStep</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">baseFeather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shadeStep</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shadeFeather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shadowCover</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CC_RECEIVE_SHADOW</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">vec2</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shadowBias</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">endif</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>和 StandardSurface 一样，ToonSurface 也是用于记录像素表面信息，只是它是卡通材质专用的结构体。</p><p>[^1]: 不包含粒子、Sprite、后期效果等不基于 Mesh 渲染的 Shader。</p>`,34),e=[o];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
