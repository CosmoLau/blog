import{_ as s,v as n,b as a,R as l}from"./chunks/framework.5ffcbaff.js";import{_ as o}from"./chunks/JSB2.0-Architecture.df8756dd.js";const p="/docs/cocos/assets/infrastructure.7d0ca24b.png",e="/docs/cocos/assets/jsb_process.a111c4cc.jpg",_=JSON.parse('{"title":"使用 JSB 手动绑定","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/jsb-manual-binding.md","filePath":"zh/manual/advanced-topics/jsb-manual-binding.md"}'),t={name:"zh/manual/advanced-topics/jsb-manual-binding.md"},c=l('<h1 id="使用-jsb-手动绑定" tabindex="-1">使用 JSB 手动绑定 <a class="header-anchor" href="#使用-jsb-手动绑定" aria-label="Permalink to &quot;使用 JSB 手动绑定&quot;">​</a></h1><blockquote><p>本文转载自 <a href="https://oedx.github.io/2019/05/29/cocos-creator-js-binding-manual/" target="_blank" rel="noreferrer">腾讯在线教育部技术博客</a><br> 作者：晋中望（xepherjin）</p></blockquote><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>一直以来，ABCmouse 项目中的整体 JS/Native 通信调用结构都是基于 <code>callStaticMethod &lt;-&gt; evalString</code> 的方式。通过 <code>callStaticMethod</code> 方法我们可以通过反射机制直接在 JavaScript 中调用 <code>Java/Objective-C</code> 的静态方法。而通过 <code>evalString</code> 方式，则可以执行 JS 代码，这样便可以进行双端通信。</p><p><a href="./jsb/infrastructure.png"><img src="'+p+`" alt=" "></a></p><div style="text-align:center;"><p>新版 ABCmouse 的应用架构：基于 callStaticMethod 与 evalString 进行通信</p></div><p>虽然基于这个方式上层封装接口后，新增业务逻辑会比较方便。但是过度依赖 evalString，往往也会带来一些隐患。举个 Android 侧的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">window.sample.testEval(&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> param </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;,JSON.stringify(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> jsonObj </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>对于常见的参数结构，这样运行是没有问题的，然而基于实际场景的种种情况，我们会发现针对 <strong>引号</strong> 的控制格外重要。如代码所示，为了保证 JS 代码能够被正确执行，我们在拼接字符串时必须明确 <code>&#39;</code> 与 <code>&quot;</code> 的使用，稍有不慎就会出现 <code>evalString</code> 失败的情况。在 Cocos 的官方论坛上，从大量的反馈中我们也能了解这里的确是一个十分容易踩坑的地方。而另一方面，对于我们项目本身而言，过度依赖 <code>evalString</code> 所产生的种种不确定因素也往往很难掌控，我们又不能一味地通过 <code>try/catch</code> 去解决。所幸的是，经过全局业务排查，目前项目中在绝大多数因此，在查阅官方文档后，我们决定绕过 <code>evalString</code>，直接基于 JSB 绑定的方式进行通信。</p><p>这里以下载器的接入为例。在我们的项目中，下载器是在 Android 与 iOS 侧分别各自实现。在改造之前的版本中，下载器的调用与回调基于 <code>callStaticMethod &lt;-&gt; evalString</code> 的方式。</p><p>每次调用下载都需要这样执行：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">NATIVE</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc/env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(NATVE </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">os </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OS</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IOS) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">jsb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reflection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callStaticMethod</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ABCFileDownloader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">downloadFileWithUrl:cookie:savePath:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookies</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">savePath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(NATVE </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">os </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OS</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ANDROID) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">jsb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reflection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callStaticMethod</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com/tencent/abcmouse/downloader/ABCFileDownloader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">downloadFileWithUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookies</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">savePath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>下载成功抑或是失败都需要通过拼接出类似如下的语句执行 JS：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">JS_STRING_ON_DOWNLOAD_FINISH </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> success </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> savePath </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">code </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span></code></pre></div><p>无论是调用抑或是回调都拼接繁琐又容易出错，全部数据不得不转化为字符串 <s>（emmmm也不美观）</s>，而且还要考虑到 <code>evalString</code> 的执行效率问题。如果只是仅有的少数业务场景在使用尚勉强接受，但是当业务日趋复杂庞大，如果都要这样写，同时又没有详细的文档去规范约束，其后期维护成本可想而知。</p><p>而当使用 JSB 改造后，我们调用只需如下寥寥几行代码且无需区分平台，更不必担心上述拼接隐患，相比之下逻辑要清晰许多：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">jsb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileDownloader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">requestDownload</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> savePath</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cookies</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">success</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">savePath</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do whatever you want</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>那么接下来就以一个最简单的下载器的绑定流程为例，我来带大家学习下 JSB 手动绑定的大致流程。<br><strong>（虽然 Cocos Creator 很人性化提供了自动绑定的配置文件，可以通过一些配置直接生成目标文件，减少了很多工作量。但是亲手来完成一次手动绑定的流程会帮助更为全面地了解整个绑定的实现流程，有助于加深理解。另一方面，当存在特殊需要自动绑定无法满足时，手动绑定也往往会更为灵活）</strong></p><h2 id="前置" tabindex="-1">前置 <a class="header-anchor" href="#前置" aria-label="Permalink to &quot;前置&quot;">​</a></h2><p>在开始之前，我们需要需要知道有关 ScriptEngine 抽象层、相关 API 等相关知识，这部分内容如果已从 Cocos Creator 文档了解可跳过，直接进行 <strong>实践</strong> 部分。</p><h3 id="抽象层" tabindex="-1">抽象层 <a class="header-anchor" href="#抽象层" aria-label="Permalink to &quot;抽象层&quot;">​</a></h3><p><img src="`+o+`" alt="JSB2.0-Architecture"></p><p>首先先来看一下上图 Cocos 官方提供的一张抽象层架构，在 1.7 版本中，抽象层被设计为一个与引擎没有关系的独立模块，对 JS 引擎的管理从 <code>ScriptingCore</code> 被移动到了 <code>se::ScriptEngine</code> 类中，<code>ScriptingCore</code> 被保留下来是希望通过它把引擎的一些事件传递给封装层，充当适配器的角色。在这个抽象层提供了对 JavaScriptCore、SpiderMonkey、V8、ChakraCore 等多种可选的 JS 执行引擎的封装。JSB 的大部分工作其实就是设定 JS 相关操作的 C++ 回调，在回调函数中关联 C++ 对象。它其实主要包含如下两种类型：</p><ul><li>注册 JS 函数（包含全局函数，类构造函数、类析构函数、类成员函数，类静态成员函数），绑定一个 C++ 回调</li><li>注册 JS 对象的属性读写访问器，分别绑定读与写的 C++ 回调</li></ul><p>考虑到不同多种 JS 引擎的关键方法的定义各不相同，Cocos 团队使用 <strong>宏</strong> 来抹平这种回调函数定义与参数类型的差异，这里就不展开，详细可阅读文末 Cocos Creator 的相关文档。<br><strong>值得一提的是，ScriptEngine 这层设计之初 Cocos 团队就将其定义为一个独立模块，完全不依赖 Cocos 引擎。</strong> 我们开发者完全可以把 <strong>cocos/bindings/jswrapper</strong> 下的所有抽象层源码移植到其他项目中直接使用。</p><h3 id="se-类型" tabindex="-1">SE 类型 <a class="header-anchor" href="#se-类型" aria-label="Permalink to &quot;SE 类型&quot;">​</a></h3><p>C++ 抽象层所有的类型都在 <code>se</code> 命名空间下，其为 ScriptEngine 的缩写。</p><ul><li><p><strong>se::ScriptEngine</strong></p><p>它是 JS 引擎的管理员，掌管 JS 引擎初始化、销毁、重启、Native 模块注册、加载脚本、强制垃圾回收、JS 异常清理、是否启用调试器。它是一个单例，可通过 <code>se::ScriptEngine::getInstance()</code> 得到对应的实例。</p></li><li><p><strong>se::Value</strong></p><p>可以被理解为 JS 变量在 C++ 层的引用。JS 变量有 <code>object</code>、<code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code> 六种类型，因此 <code>se::Value</code> 使用 union 包含 <code>object</code>、<code>number</code>、<code>string</code>、<code>boolean</code> 4 种有值类型，无值类型: <code>null</code>、<code>undefined</code> 可由私有变量 <code>_type</code> 直接表示。</p><p>如果 <code>se::Value</code> 中保存基础数据类型，比如 <code>number</code>、<code>string</code>、<code>boolean</code>，其内部是直接存储一份值副本。<code>object</code> 的存储比较特殊，是通过 <code>se::Object*</code> 对 JS 对象的弱引用。</p></li><li><p><strong>se::Object</strong></p><p>继承于 <code>se::RefCounter</code> 引用计数管理类，它保存了对 JS 对象的弱引用。我们在绑定回调中如果需要用到当前对象对应的 <code>se::Object</code>，只需要通过 <code>s.thisObject()</code> 即可获取。其中 s 为 <code>se::State</code> 类型。</p></li><li><p><strong>se::Class</strong></p><p>用于暴露 C++ 类到 JS 中，它会在 JS 中创建一个对应名称的构造函数。Class 类型创建后，不需要手动释放内存，它会被封装层自动处理。<code>se::Class</code> 提供了一些 API 用于定义 Class 的创建、静态/动态成员函数、属性读写等等，后面在实践时用到会做介绍。完整内容可查阅 Cocos Creator 文档。</p></li><li><p><strong>se::State</strong></p><p>它是绑定回调中的一个环境，我们通过 <code>se::State</code> 可以取得当前的 C++ 指针、<code>se::Object</code> 对象指针、参数列表、返回值引用。</p></li></ul><h3 id="宏" tabindex="-1">宏 <a class="header-anchor" href="#宏" aria-label="Permalink to &quot;宏&quot;">​</a></h3><p>前面有提到，抽象层使用宏来抹平不同 JS 引擎关键函数定义与参数类型的不同，不管底层是使用什么引擎，开发者统一使用一种函数的定义。</p><p>例如，抽象层所有的 JS 到 C++ 的回调函数的定义为：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">State</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">SE_BIND_FUNC</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // 此处以回调函数的定义为例</span></span></code></pre></div><p>我们在编写完回调函数后，需要记住使用 <code>SE_BIND_XXX</code> 系列的宏对回调函数进行包装。目前全部的 <code>SE_BIND_XXX</code> 宏如下所示：</p><ul><li><code>SE_BIND_PROP_GET</code>：包装一个 JS 对象属性读取的回调函数</li><li><code>SE_BIND_PROP_SET</code>：包装一个 JS 对象属性写入的回调函数</li><li><code>SE_BIND_FUNC</code>：包装一个 JS 函数，可用于全局函数、类成员函数、类静态函数</li><li><code>SE_DECLARE_FUNC</code>：声明一个 JS 函数，一般在 <code>.h</code> 头文件中使用</li><li><code>SE_BIND_CTOR</code>：包装一个 JS 构造函数</li><li><code>SE_BIND_SUB_CLS_CTOR</code>：包装一个 JS 子类的构造函数，此子类可以继承</li><li><code>SE_BIND_FINALIZE_FUNC</code>：包装一个 JS 对象被 GC 回收后的回调函数</li><li><code>SE_DECLARE_FINALIZE_FUNC</code>：声明一个 JS 对象被 GC 回收后的回调函数</li><li><code>_SE</code>：包装回调函数的名称，转义为每个 JS 引擎能够识别的回调函数的定义，注意，第一个字符为下划线，类似 Windows 下用的 _T(&quot;xxx&quot;) 来包装 Unicode 或者 MultiBytes 字符串</li></ul><p>在我们的简化版例子中，只需要用到 <code>SE_DECLARE_FUNC</code>、<code>SE_BIND_FUNC</code> 即可。</p><h3 id="类型转换辅助函数" tabindex="-1">类型转换辅助函数 <a class="header-anchor" href="#类型转换辅助函数" aria-label="Permalink to &quot;类型转换辅助函数&quot;">​</a></h3><p>类型转换辅助函数位于 <strong>cocos/bindings/manual/jsb_conversions.h</strong> 中，包含了 <code>se::Value</code> 与 C++ 类型相互转化的方法。主要是以下两个:</p><ul><li><code>bool sevalue_to_native(const se::Value &amp;from, T *to, se::Object * /*ctx*/)</code>, 从 <code>se::Value</code> 到 C++ 类型</li><li><code>bool nativevalue_to_se(const T &amp;from, se::Value&amp; out, se::Object * /*ctx*/)</code>, 从 C++ 类型到 <code>se::Value</code></li></ul><blockquote><p>第三个参数多数情况可以直接传 <code>nullptr</code>, 目前只有 <code>function</code> 类型对 <code>ctx</code> 又依赖.</p></blockquote><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><p>在开始之前，我们需要明确一下流程。JSB 绑定简单来讲就是在 C++ 层实现一些类库，然后经过一些特定处理可以在 JS 端进行对应方法调用的过程。因为采用 JS 为主要业务编写语言，使得我们在做一些 Native 的功能时会比较受限，例如文件、网络等等相关操作。</p><p>以 Cocos Creator 文档中 <code>spine.SkeletonRenderer</code> 为例，在 JSB 中 如果使用 <code>new</code> 操作符来调用 <code>spine.SkeletonRenderer</code> 的构造函数，实际上在 C++ 层会调用 <code>js_spine_SkeletonRenderer_constructor</code> 函数。在这个 C++ 函数中，会为这个精灵对象分配内存，并把它添加到自动回收池，然后调用 JS 层的 <code>_ctor</code> 函数来完成初始化。在 <code>_ctor</code> 函数中会根据参数类型和数量调用不同的 init 函数，这些 init 函数也是 C++ 函数的绑定：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SE_BIND_CTOR</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">funcName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cls</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">finalizeCb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    void funcName##Registry(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; _v8args) \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    { \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        v8::Isolate* _isolate = _v8args.GetIsolate(); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        v8::HandleScope _hs(_isolate); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        bool ret = true; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        se::ValueArray args; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        se::internal::jsToSeArgs(_v8args, &amp;args); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        se::Object* thisObject = se::Object::_createJSObject(cls, _v8args.This()); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        thisObject-&gt;_setFinalizeCallback(_SE(finalizeCb)); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        se::State state(thisObject, args); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        ret = funcName(state); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (!ret) { \\</span></span>
<span class="line"><span style="color:#A6ACCD;">            SE_LOGE(&quot;[ERROR] Failed to invoke %s, location: %s:%d\\n&quot;, #funcName, __FILE__, __LINE__); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        } \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        se::Value _property; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        bool _found = false; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        _found = thisObject-&gt;getProperty(&quot;_ctor&quot;, &amp;_property); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (_found) _property.toObject()-&gt;call(args, thisObject); \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>三层的方法对应关系如下：</p><table><thead><tr><th style="text-align:left;">Javascript</th><th style="text-align:left;">JSB</th><th style="text-align:left;">Cocos Creator</th></tr></thead><tbody><tr><td style="text-align:left;">jsb.SkeletonRenderer.initWithSkeleton</td><td style="text-align:left;">js_spine_SkeletonRenderer_initWithSkeleton</td><td style="text-align:left;">spine::SkeletonRenderer::initWithSkeleton</td></tr><tr><td style="text-align:left;">jsb.SkeletonRenderer.initWithUUID</td><td style="text-align:left;">js_spine_SkeletonRenderer_initWithUUID</td><td style="text-align:left;">spine::SkeletonRenderer::initWithUUID</td></tr></tbody></table><p>这个调用过程的时序如下：</p><p><a href="./jsb/jsb_process.jpg"><img src="`+e+`" alt=" "></a></p><div style="text-align:center;"><p>调用时序图（引自 Cocos Creator 文档）</p></div><p>和上面的过程类似。首先，我们需要确定接口和字段，我们随便拟定一个最简单的下载器 <code>FileDownloader</code>，它所具备的是 <code>download(url, path, callback)</code> 接口，而在 <code>callback</code> 中我们需要拿到的则是 <code>code</code>，<code>msg</code>。并且为了方便使用，我们将它挂载在 <code>jsb</code> 对象下，这样我们便可以使用如下代码进行简单地调用:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">jsb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileDownloader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">download</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do whatever you want</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>确定接口后，我们可以开始着手码 C++ 部分了。首先来一发 <code>FileDownloader.h</code>，作为公共头文件供 Android/iOS 使用。接着 Android/iOS 分别实现各自的具体下载实现即可（此处略过），<code>reqCtx</code> 则用于存储回调对应关系：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FileDownloader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">function</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> msg</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">)&gt;</span><span style="color:#F07178;"> ResultCallback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FileDownloader</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">destroyInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">download</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">savePath</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ResultCallback</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">onDownloadResult</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        ... ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">protected</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> FileDownloader</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> s_sharedFileDownloader</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">unordered_map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ResultCallback</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> reqCtx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>接下来我们进行最关键的绑定部分。<br> 因为下载器就功能上分类属于 network 模块，我们可以选择将我们的 <code>FileDownloader</code> 的绑定实现在 Cocos 源码中现有的 <code>jsb_cocos_network_auto</code> 中。在 <code>jsb_cocos_network_auto.h</code> 中声明 JS 函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">SE_DECLARE_FUNC</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">js_network_FileDownloader_download</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // 声明成员函数，下载调用</span></span>
<span class="line"><span style="color:#82AAFF;">SE_DECLARE_FUNC</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">js_network_FileDownloader_getInstance</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // 声明静态函数，获取单例</span></span></code></pre></div><p>随后在 <code>jsb_cocos_network_auto.cpp</code> 中来注册 <code>FileDownloader</code> 和新声明的这两个函数到 JS 虚拟机中。首先先写好对应的两个方法实现留空，等注册逻辑完成后再来补全：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">js_network_FileDownloader_download</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">State</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> // 方法名与声明时一致</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // TODO</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">SE_BIND_FUNC</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">js_network_FileDownloader_download</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // 包装该方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">js_network_FileDownloader_getInstance</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">State</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> // 方法名与声明时一致</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // TODO</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">SE_BIND_FUNC</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">js_network_FileDownloader_getInstance</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // 包装该方法</span></span></code></pre></div><p>现在我们开始编写注册逻辑，新增一个注册方法用于收归 <code>FileDownloader</code> 的全部注册逻辑：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">js_register_network_FileDownloader</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Object</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> cls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Class</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FileDownloader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#A6ACCD;">    cls</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">defineFunction</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">download</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_SE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">js_network_FileDownloader_download</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    cls</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">defineStaticFunction</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">getInstance</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_SE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">js_network_FileDownloader_getInstance</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    cls</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">install</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">JSBClassType</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">registerClass</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FileDownloader</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ScriptEngine</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">clearException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>我们来看看这个方法里做了些什么重要的事情：</p><ol><li>调用 <code>se::Class::create(className, obj, parentProto, ctor)</code> 方法，创建了一个名为 <code>FileDownloader</code> 的 Class，注册成功后，在 JS 层中可以通过 <code>let xxx = new FileDownloader();</code>的方式创建实例。</li><li>调用 <code>defineFunction(name, func)</code> 方法，定义了一个成员函数 <code>download</code>，并将其实现绑定到包装后的 <code>js_network_FileDownloader_download</code> 上。</li><li>调用 <code>defineStaticFunction(name, func)</code> 方法，定义了一个静态成员函数 <code>getInstance</code>，并将其实现绑定到包装后的 <code>js_network_FileDownloader_getInstance</code> 上。</li><li>调用 <code>install()</code> 方法，将自己注册到 JS 虚拟机中。</li><li>调用 <code>JSBClassType::registerClass</code> 方法，将生成的 Class 与 C++ 层的类对应起来（内部通过 <code>std::unordered_map&lt;std::string, se::Class*&gt;</code> 实现）。</li></ol><p>通过以上这几步，我们完成了关键的注册部分，当然不要忘记在 <code>network</code> 模块的注册入口添加 <code>js_register_network_FileDownloader</code> 的调用：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register_all_cocos_network</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Object</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Get the ns</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value nsVal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getProperty</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jsb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">nsVal</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">HandleObject </span><span style="color:#82AAFF;">jsobj</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">createPlainObject</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">nsVal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">jsobj</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">setProperty</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jsb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> nsVal</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> ns </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nsVal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    ... ...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将前面生成的 Class 注册 设置为 jsb 的一个属性，这样我们便能通过</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // let downloader = new jsb.FileDownloader();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 获取实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">js_register_network_FileDownloader</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ns</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>完成这一步，我们的 Class 已经成功绑定，现在回来继续完善刚才留空的方法。</p><p>首先是 <code>getInstance()</code>：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">js_network_FileDownloader_getInstance</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">State</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">auto</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> args </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    CC_UNUSED </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> ok </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">argc </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        FileDownloader</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FileDownloader</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> // C++ 单例</span></span>
<span class="line"><span style="color:#F07178;">        ok </span><span style="color:#89DDFF;">&amp;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">nativevalue_to_se</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rval</span><span style="color:#89DDFF;">(),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">SE_PRECONDITION2</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ok</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js_network_FileDownloader_getInstance : Error processing arguments</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">SE_REPORT_ERROR</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrong number of arguments: %d, was expecting %d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>前面提到，我们可以通过 <code>se::State</code> 获取到 C++ 指针、<code>se::Object</code> 对象指针、参数列表、返回值引用。梳理逻辑如下：</p><ol><li><code>args()</code> 获取 JS 带过来的全部参数（<code>se::Value</code> 的 vector）；</li><li>参数个数判断，因为这里的 <code>getInstance()</code> 并不需要额外参数，因此参数为 0；</li><li><code>native_ptr_to_seval()</code> 用于在绑定层根据一个 C++ 对象指针获取一个 <code>se::Value</code>，并赋返回值给 <code>rval()</code> 至 JS 层；</li></ol><p>到这里，<code>getInstance()</code> 的绑定层逻辑已全部完成，我们已经可以通过 <code>let downloader = jsb.FileDownloader.getInstance()</code> 获取实例了。</p><p>接着是 <code>download()</code>：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">js_network_FileDownloader_download</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">State</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    FileDownloader </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">cobj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FileDownloader </span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nativeThisObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">SE_PRECONDITION2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cobj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">                     </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js_network_FileDownloader_download : Invalid Native Object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">args </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    CC_UNUSED </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> ok </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">argc </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string path</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        ok </span><span style="color:#89DDFF;">&amp;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sevalue_to_native</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span><span style="color:#676E95;font-style:italic;"> // 转化为std::string url</span></span>
<span class="line"><span style="color:#F07178;">        ok </span><span style="color:#89DDFF;">&amp;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sevalue_to_native</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span><span style="color:#676E95;font-style:italic;"> // 转化为std::string path</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">function</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> msg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                           </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">)&gt;</span><span style="color:#F07178;"> callback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">isObject</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">toObject</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">isFunction</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value </span><span style="color:#82AAFF;">jsThis</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">thisObject</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 获取 JS 回调</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value </span><span style="color:#82AAFF;">jsFunc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 如果目标类是一个单例则不能用 se::Object::attachObject 去关联</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 必须使用 se::Object::root，无需关心 unroot，unroot 的操作会随着 lambda 的销毁触发 jsFunc 的析构，在 se::Object 的析构函数中进行 unroot 操作。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 如果使用 s.thisObject-&gt;attachObject(jsFunc.toObject);会导致对应的 func 和 target 永远无法被释放，引发内存泄露。</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">jsFunc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toObject</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">();</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> lambda </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[=](</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ScriptEngine</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">clearException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">AutoHandleScope hs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    CC_UNUSED </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> ok </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">ValueArray args</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                    ok </span><span style="color:#89DDFF;">&amp;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">nativevalue_to_se</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#F07178;">                    ok </span><span style="color:#89DDFF;">&amp;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">nativevalue_to_se</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">code</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value rval</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> thisObj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">jsThis</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isObject</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">jsThis</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toObject</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> funcObj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">jsFunc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                    // 执行 JS 方法回调</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> succeed </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">funcObj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">args</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> thisObj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">rval</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">succeed</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#FFCB6B;">se</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ScriptEngine</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">clearException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">                callback </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> lambda</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                callback </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">SE_PRECONDITION2</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ok</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js_network_FileDownloader_download : Error processing arguments</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cobj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">download</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">SE_REPORT_ERROR</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrong number of arguments: %d, was expecting %d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol><li>通过 <code>seval_to_std_string</code> 方法获取转化 C++ 后的 url、path 参数和原始 jsFunc。</li><li>手动构造回调 function，将 msg 和 code 转化为 <code>se::Value</code>。</li><li>通过 <code>funcObj-&gt;call</code> 执行 JS 方法进行回调。</li></ol><p>最后，考虑到内存释放的风险，我们还需要在 <code>Application.cpp</code> 中的 <code>close()</code> 方法中进行相关回收：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">network</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FileDownloader</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">destroyInstance</span><span style="color:#89DDFF;">();</span></span></code></pre></div><p>================================================</p><p>以上就是全部的绑定流程，在分别编译到 Android/iOS 环境后，我们就能够通过 <code>jsb.fileDownloader.download()</code> 进行下载调用了。<br> （PS：一定切记在使用前进行 <code>NATIVE</code> 的宏判断，因为非 JSB 环境下是无法使用的）</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">NATIVE</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc/env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(NATIVE) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// JSB 相关逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我们现在来总结一下手动绑定改造的详细流程。一般而言，常用的 JSB 的改造流程大致如下：</p><ul><li>确定方法接口与 JS/Native 公共字段</li><li>声明头文件，并分别实现 Android JNI 与 OC 具体业务代码</li><li>编写抽象层代码，将必要的类与对应方法注册到 JS 虚拟机中</li><li>将绑定的类挂载在 JS 中的指定对象（类似命名空间）中</li></ul>`,79),r=[c];function F(D,y,i,C,A,d){return n(),a("div",null,r)}const b=s(t,[["render",F]]);export{_ as __pageData,b as default};
