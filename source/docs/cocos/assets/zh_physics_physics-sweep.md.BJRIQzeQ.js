import{_ as s,c as i,o as e,a4 as a}from"./chunks/framework.uQk9_EO2.js";const l="/docs/cocos/assets/sweep.DYNaJZVq.jpg",u=JSON.parse('{"title":"几何投射检测","description":"","frontmatter":{},"headers":[],"relativePath":"zh/physics/physics-sweep.md","filePath":"zh/physics/physics-sweep.md","lastUpdated":1712305443000}'),t={name:"zh/physics/physics-sweep.md"},p=a(`<h1 id="几何投射检测" tabindex="-1">几何投射检测 <a class="header-anchor" href="#几何投射检测" aria-label="Permalink to &quot;几何投射检测&quot;">​</a></h1><p>Cocos Creator 从 v3.8 开始，支持扫掠功能。</p><p>几何投射检测，会沿着指定的射线，发射不同的几何体，就像使用某个几何体沿着射线扫过一个区域，因此又称扫掠。扫掠会对几何体扫过的物理世界区域内的碰撞体进行检查，并返回特定的结果。</p><p>和 <code>rayCast</code> 射线检测发射的射线不同，<code>sweep</code> 允许物理引擎投射不同的几何体，并返回特定的碰撞信息。</p><p>目前引擎提供以下 <strong>盒形</strong>、<strong>球形</strong> 以及 <strong>胶囊体</strong> 扫掠。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><ul><li><p>盒形：</p><ul><li><p><code>sweepBox</code>：沿着给定的射线投射一个盒，并返回所有命中的碰撞体</p></li><li><p><code>sweepBoxClosest</code>：沿着给定的射线投射一个盒，并返回最近命中的碰撞体</p></li><li><p>参数说明：</p><ul><li>worldRay：geometry.Ray：世界空间下的一条射线</li><li>halfExtent：IVec3Like 盒体的一半尺寸，三维矢量的 xyz 各代表盒在每个轴上的大小的一半</li><li>orientation：IQuatLike： 盒体的方向</li><li>mask: number：掩码，默认为 0xffffffff，请参考 <a href="./physics-group-mask">分组和掩码</a> 以及 <a href="./physics-raycast">射线检测</a></li><li>maxDistance: number 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE</li><li>queryTrigger：boolean 默认为 true，是否检测触发器</li></ul></li></ul></li><li><p>球形</p><ul><li><p><code>sweepSphere</code>：沿着给定的射线投射一个球形，并返回所有命中的碰撞体</p></li><li><p><code>sweepSphereClosest</code>：沿着给定的射线投射一个球形，并返回最近命中的碰撞体</p></li><li><p>参数说明：</p><ul><li>worldRay：geometry.Ray：世界空间下的一条射线</li><li>radius：number 球体的半径</li><li>mask：number, 掩码，默认为 0xffffffff，请参考 <a href="./physics-group-mask">分组和掩码</a> 以及 <a href="./physics-raycast">射线检测</a></li><li>maxDistance：number 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE</li><li>queryTrigger：boolean 默认为 true，是否检测触发器</li></ul></li></ul></li><li><p>胶囊体</p><ul><li>sweepCapsule：沿着给定的射线投射一个胶囊体，并返回所有命中的碰撞体</li><li>sweepCapsuleClosest：沿着给定的射线投射一个胶囊体，并返回最近命中的碰撞体</li><li>参数说明： <ul><li>worldRay：geometry.Ray：世界空间下的一条射线</li><li>radius：number：胶囊体的半径</li><li>height：number：胶囊体末端两个半球圆心的距离</li><li>orientation：IQuatLike： 胶囊体的朝向</li><li>mask：number, 掩码，默认为 0xffffffff，请参考 <a href="./physics-group-mask">分组和掩码</a> 以及 <a href="./physics-raycast">射线检测</a></li><li>maxDistance：number 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE</li><li>queryTrigger：boolean 默认为 true，是否检测触发器</li></ul></li></ul></li></ul><p>详细说明请参考 <a href="./__APIDOC__/zh/class/PhysicsSystem">API</a>。</p><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h2><p>函数的返回值为 boolean，用于确定表示是否有检测到碰撞。为保证扫掠的性能，扫掠方法的结果都被存储在 <code>PhysicsSystem</code> 内。使用时请先通过 <code>sweepCastClosestResult/sweepCastResults</code> 获取到检测结果，下次扫掠后，之前的结果可能会被覆盖或失效，因此建议在获取到结果之后，将结果内的内容提取出来使用。</p><ul><li><p><code>sweepBoxClosest</code>、<code>sweepSphereClosest</code> 以及 <code>sweepCapsuleClosest</code> 方法的结果被保存在 <code>PhysicsSystem.instance.sweepCastResults</code> 内，其类型为 <code>PhysicsRayResult</code>，代码示例如下</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem.instance.sweepCastClosestResult;</span></span></code></pre></div></li><li><p><code>sweepBox</code>、<code>sweepSphere</code> 和 <code>sweepCapsule</code> 方法的结果存储在 <code>PhysicsSystem.instance.sweepCastResults</code> 内，其为 <code>PhysicsRayResult</code> 类型的数组。代码示例如下</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem.instance.sweepCastResults;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p><code>PhysicsRayResult</code> 的描述如下：</p><ul><li>hitPoint: vec3 在世界坐标系下的击中点</li><li>distance: number 击中点到射线原点的距离</li><li>collider: Collider 击中的碰撞盒</li><li>hitNormal: vec3 在世界坐标系下击中面的法线</li></ul><p>API 参考 <a href="./__APIDOC__/zh/class/physics.PhysicsRayResult">PhysicsRayResult</a>。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>以盒型扫掠为例，使用方法如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (PhysicsSystem.instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sweepSphereClosest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._ray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._sphereRadius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._scale, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._mask, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._maxDistance, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._queryTrigger)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem.instance.sweepCastClosestResult;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更多示例请参考 <a href="https://github.com/cocos/cocos-example-projects/tree/master/physics-3d" target="_blank" rel="noreferrer">GIT</a>。</p><p>下载示例后，打开 <strong>case-physics-sweep</strong> 场景，运行即可查看扫掠的结果。</p><p><img src="`+l+'" alt="sweep.jpg"></p><p>示例中扫掠的结果标记为 <strong>红色</strong>。</p>',21),h=[p];function n(r,k,o,c,d,y){return e(),i("div",null,h)}const E=s(t,[["render",n]]);export{u as __pageData,E as default};
