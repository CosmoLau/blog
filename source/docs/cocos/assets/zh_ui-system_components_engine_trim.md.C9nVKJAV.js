import{_ as e,c as t,o as r,a4 as o}from"./chunks/framework.uQk9_EO2.js";const c="/docs/cocos/assets/trim_inspector.BITRO7Pw.png",a="/docs/cocos/assets/trim-compare.CKrDZs0r.png",i="/docs/cocos/assets/trim-texturepacker.DFfTtWQd.png",T=JSON.parse('{"title":"图像资源的自动剪裁","description":"","frontmatter":{},"headers":[],"relativePath":"zh/ui-system/components/engine/trim.md","filePath":"zh/ui-system/components/engine/trim.md","lastUpdated":1712305443000}'),s={name:"zh/ui-system/components/engine/trim.md"},d=o('<h1 id="图像资源的自动剪裁" tabindex="-1">图像资源的自动剪裁 <a class="header-anchor" href="#图像资源的自动剪裁" aria-label="Permalink to &quot;图像资源的自动剪裁&quot;">​</a></h1><p>导入图像资源后生成的 SpriteFrame 默认会进行自动剪裁，去除原始图片周围的透明像素区域。这样我们在使用 SpriteFrame 渲染 Sprite 时，将会获得有效图像更精确的大小。当 SpriteFrame 为自动剪裁时，下图中自动剪裁的相关信息为置灰状态，不可修改：</p><p><img src="'+c+'" alt="trim inspector"></p><h2 id="sprite-组件剪裁相关设置详解" tabindex="-1">Sprite 组件剪裁相关设置详解 <a class="header-anchor" href="#sprite-组件剪裁相关设置详解" aria-label="Permalink to &quot;Sprite 组件剪裁相关设置详解&quot;">​</a></h2><p>和图片裁剪相关的 <strong>Sprite</strong> 组件设置有以下两个：</p><ul><li><p><code>Trim</code> 勾选后将在渲染 Sprite 图像时去除图像周围的透明像素，我们将看到刚好能把图像包裹住的约束框。取消勾选，Sprite 节点的约束框会包括透明像素的部分。</p></li><li><p><code>Size Mode</code> 用来将节点的尺寸设置为原图或原图裁剪透明像素后的大小，通常用于在序列帧动画中保证图像显示为正确的尺寸。有以下几种选择：</p><ul><li><p><code>TRIMMED</code> 选择该选项，会将节点的尺寸（size）设置为原始图片裁剪掉透明像素后的大小。</p></li><li><p><code>RAW</code> 选择该选项，会将节点尺寸设置为原始图片包括透明像素的大小。</p></li><li><p><code>CUSTOM</code> 自定义尺寸，用户在使用 <strong>矩形变换工具</strong> 拖拽改变节点的尺寸，或通过修改 <code>Size</code> 属性，或在脚本中修改 <code>width</code> 或 <code>height</code> 后，都会自动将 <code>Size Mode</code> 设为 <code>CUSTOM</code>。表示用户将自己决定节点的尺寸，而不需要考虑原始图片的大小。</p></li></ul></li></ul><p>下图中展示了两种常见组合的渲染效果：</p><p><img src="'+a+'" alt="trim compare"></p><h2 id="自带位置信息的序列帧动画" tabindex="-1">自带位置信息的序列帧动画 <a class="header-anchor" href="#自带位置信息的序列帧动画" aria-label="Permalink to &quot;自带位置信息的序列帧动画&quot;">​</a></h2><p>有很多动画师在绘制序列帧动画时，会使用一张较大的画布，然后将角色在动画中的运动直接通过角色在画布上的位置变化表现出来。在使用这种素材时，我们需要将 <strong>Sprite 组件</strong> 的 <code>Trim</code> 设为 <code>false</code>，将 <code>Size Mode</code> 设为 <code>RAW</code>。这样动画在播放每个序列帧时，都将使用原始图片的尺寸，并保留图像周围透明像素的信息，这样才能正确显示绘制在动画中的角色位移。</p><p>而 <code>Trim</code> 设为 <code>true</code>，则是在位移完全由角色位置属性控制的动画中，更推荐使用的方式。</p><h2 id="texturepacker-设置" tabindex="-1">TexturePacker 设置 <a class="header-anchor" href="#texturepacker-设置" aria-label="Permalink to &quot;TexturePacker 设置&quot;">​</a></h2><p>在制作序列帧动画时，我们通常会使用 <a href="https://www.codeandweb.com/texturepacker" target="_blank" rel="noreferrer">TexturePacker</a> 这样的工具将序列帧打包成图集，并在导入后通过图集资源下的 <code>SpriteFrame</code> 来使用。在 TexturePacker 中输出图集资源时，Sprites 分类下的 <strong>Trim mode</strong> 请选择 <code>Trim</code>，一定不要选择 <code>Crop, flush position</code>，否则透明像素剪裁信息会丢失，您在使用图集里的资源时也就无法获得原始图片未剪裁的尺寸和偏移信息了。目前建议使用 TexturePacker <strong>4.x</strong> 以上版本进行打包，以防止低版本导出数据不一致造成的导入失败。</p><p><img src="'+i+'" alt="trim texturePacker"></p>',14),p=[d];function n(m,l,h,_,u,S){return r(),t("div",null,p)}const x=e(s,[["render",n]]);export{T as __pageData,x as default};
