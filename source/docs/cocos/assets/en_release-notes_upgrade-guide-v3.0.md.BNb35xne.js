import{_ as e,c as s,o as i,a4 as t}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/import-menu.Bj_uqwKy.png",n="/docs/cocos/assets/import-select-project.ozcDkhdq.png",o="/docs/cocos/assets/import-panel.BPhsZ1cy.png",r="/docs/cocos/assets/build-panel.M0pRARTi.png",l="/docs/cocos/assets/build.CNsOMO6Q.png",d="/docs/cocos/assets/preview.DGOdC2Tw.png",p="/docs/cocos/assets/animation.DvPQv2P4.png",c="/docs/cocos/assets/project-setting.CGRtOyXU.png",h="/docs/cocos/assets/texture-compress-setting.BOk1BJqB.png",g="/docs/cocos/assets/extension-plugin.D32Yhnvt.png",k="/docs/cocos/assets/web-v243.CVyAm5pR.png",u="/docs/cocos/assets/web-v3.DwYOejNY.png",y="/docs/cocos/assets/web-cocosjs.BEo1KMIU.png",m="/docs/cocos/assets/wechat-v243.jpUBAg7A.png",f="/docs/cocos/assets/wechat-v3.Bszp5nHP.png",E="/docs/cocos/assets/wechat-cocosjs.B7n-sqdR.png",b="/docs/cocos/assets/v243-windows.BzG2JrtI.png",v="/docs/cocos/assets/v3-windows.B3p8xYD9.png",C="/docs/cocos/assets/engine-common.B6mOaxYy.png",A="/docs/cocos/assets/v3-assets.CdoakdWd.png",F="/docs/cocos/assets/v243-build-template.B7cUrUD0.png",w="/docs/cocos/assets/v3-build-template.CavPej-A.png",x="/docs/cocos/assets/v3-build-native.Bz1aVXTH.png",D="/docs/cocos/assets/update-setting.Frhxng6Q.png",G=JSON.parse('{"title":"Cocos Creator 3.0 Upgrade Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/release-notes/upgrade-guide-v3.0.md","filePath":"en/release-notes/upgrade-guide-v3.0.md","lastUpdated":1712305443000}'),T={name:"en/release-notes/upgrade-guide-v3.0.md"},_=t('<h1 id="cocos-creator-3-0-upgrade-guide" tabindex="-1">Cocos Creator 3.0 Upgrade Guide <a class="header-anchor" href="#cocos-creator-3-0-upgrade-guide" aria-label="Permalink to &quot;Cocos Creator 3.0 Upgrade Guide&quot;">​</a></h1><h2 id="version-introduction" tabindex="-1">Version Introduction <a class="header-anchor" href="#version-introduction" aria-label="Permalink to &quot;Version Introduction&quot;">​</a></h2><p><strong>Cocos Creator 3.0</strong> integrates all the functions of the original <strong>2D</strong> and <strong>3D</strong> products, brings many major updates, and will become the main version of <strong>Cocos Creator</strong>. At the same time, 3.0 also continues <strong>Cocos&#39;s</strong> advantages of light weight and high efficiency in 2D categories, and provides an efficient development experience for 3D heavy games.</p><p>In order to ensure the smooth transition of an existing <strong>Cocos Creator 2.4</strong> project, Cocos Creator 2.4 will be used as the LTS (long-term support) version and provide continuous updates for the next <strong>two years</strong>! In <strong>2021</strong>, v2.4 will continue to be updated to provide bug fixes and new mini-game platform support to ensure the successful launch of your project; in <strong>2022</strong>, we will continue to provide developers with the key to v2.4 bug fixes to ensure the smooth operation of online games! Therefore:</p><ul><li><p><strong>Existing 2.x projects can continue to develop without compulsory upgrade to 3.0</strong>.</p></li><li><p><strong>For new projects, it is recommended to use version 3.0 for development</strong>. We will continue to optimize the development experience and operating efficiency of 3.0 to support the smooth launch of heavy games of different categories such as 2D and 3D.</p></li></ul><p><strong>Cocos Creator 3.0</strong> uses a new future-oriented engine architecture, which will bring high-performance, data-oriented and load-balanced renderers to the engine, and seamlessly support Vulkan &amp; Metal multi-backend rendering. In the future, it will also support mobile VR/AR and some Host platform.</p><p>For a detailed introduction to the <strong>Cocos Creator 3.0</strong>, please visit the <a href="https://cocos.com/creator" target="_blank" rel="noreferrer">Official Website Update Instructions</a>.</p><h2 id="how-to-migrate-cocos-creator-2-x-projects" tabindex="-1">How to migrate Cocos Creator 2.x projects <a class="header-anchor" href="#how-to-migrate-cocos-creator-2-x-projects" aria-label="Permalink to &quot;How to migrate Cocos Creator 2.x projects&quot;">​</a></h2><p>Although <strong>it is not recommended to force projects in development, especially those about to go live, to upgrade to v3.0</strong>, a v2.x resource import tool has been introduced in Cocos Creator 3.0. This tool supports the perfect import of resources from old projects, as well as assistance in migrating code.</p><h3 id="resource-import" tabindex="-1">Resource Import <a class="header-anchor" href="#resource-import" aria-label="Permalink to &quot;Resource Import&quot;">​</a></h3><p>Developers only need to click <strong>File -&gt; Import Cocos Creator 2.x project</strong> in the main menu.</p><p><img src="'+a+'" alt="import-menu"></p><p>Next, select the root directory of the v2.x project in the file browse dialog that pops up.</p><p><img src="'+n+'" alt="import-select-project"></p><blockquote><p><strong>Note</strong>: it is recommended to upgrade to v2.4.3 or above before importing to v3.0 for older projects, otherwise the correctness of the import result cannot be ensured.</p></blockquote><p>All the resources in the v2.x project will be automatically presented in the popup <strong>Import Cocos Creator 2.x Project</strong> panel. Developers can reconfirm the resources to be imported and then click the <strong>Import</strong> button in the bottom right corner of the panel to complete the import. If the developer wants to switch the imported 2.x project, click the search icon button in the image below to reselect the project.</p><p><img src="'+o+`" alt="import-project"></p><p>The <strong>Manual</strong> button in the bottom left corner of the panel will take you to the GitHub repository for the Import Plugin, which can be used to <a href="https://github.com/cocos-creator/plugin-import-2.x/blob/main/README.md" target="_blank" rel="noreferrer">update the Import Plugin</a> or submit feedback.</p><h3 id="code-migration" tabindex="-1">Code Migration <a class="header-anchor" href="#code-migration" aria-label="Permalink to &quot;Code Migration&quot;">​</a></h3><p>When importing a v2.x project developed in JavaScript, the code assisted migration feature of the import plugin will first convert the JavaScript to TypeScript and then perform the code migration.</p><p>For example, the imported v2.x project JavaScript code would look like this:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AudioController.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extends: cc,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    properties: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        audioSource: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: cc.AudioSource,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.audioSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.audioSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Due to the differences in how the code is written in each project and the different levels of complexity, the current import plugin only adds <strong>component type declarations</strong>, <strong>property declarations</strong> and <strong>function declarations</strong> to the code migration, the references to the components in the scene are <strong>preserved</strong> and the code inside the function is migrated as <strong>comments</strong>. <br> In addition, the original code of v2.x is kept intact as a comment at the end of the migrated code, so that developers can refer to it when converting manually.</p><p>The example code above, after the code assisted migration by the import plugin, looks like this:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AudioController.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, AudioSource } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AudioController&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AudioController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> audioSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AudioSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;null&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //this.audioSource.play();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //this.audioSource.pause();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Note: The original script has been commented out, due to the large changes in the script, there may be missing in the conversion, you need to manually convert it yourself</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cc.Class({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     extends: cc.Component,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     properties: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         audioSource: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             type: cc.AudioSource,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             default: null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     play: function () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         this.audioSource.play();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     pause: function () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         this.audioSource.pause();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// });</span></span></code></pre></div><blockquote><p><strong>Notes</strong></p><ol><li>When converting from JavaScript to TypeScript, it is necessary to declare <strong>all properties</strong> in TypeScript and set the default values.</li><li>If the <strong>Inspector</strong> panel data is missing, check if the property type is the same as v2.x.</li><li>If the JavaScript code uses external types, TypeScript prompts: Fix by importing external source files or declarations.</li></ol></blockquote><h2 id="quick-start-for-developers-of-older-versions" tabindex="-1">Quick start for developers of older versions <a class="header-anchor" href="#quick-start-for-developers-of-older-versions" aria-label="Permalink to &quot;Quick start for developers of older versions&quot;">​</a></h2><h3 id="material-upgrade" tabindex="-1">Material Upgrade <a class="header-anchor" href="#material-upgrade" aria-label="Permalink to &quot;Material Upgrade&quot;">​</a></h3><p>In v3.0, there are continued improvements to the design of the material system and the built-in Shader API. When upgrading from v2.x to v3.x, some of the content cannot be upgraded automatically and needs to be adjusted manually by the developer. For details, please refer to the <a href="./../material-system/effect-2.x-to-3.0">Material Upgrade Guide</a> documentation.</p><h3 id="engine-api-upgrade" tabindex="-1">Engine API Upgrade <a class="header-anchor" href="#engine-api-upgrade" aria-label="Permalink to &quot;Engine API Upgrade&quot;">​</a></h3><ul><li><p>The UI-related interface changes on the node are as follows:</p><ul><li><p>The interfaces related to coordinate transformation calculation (e.g.: <code>size</code> or <code>anchor</code>) are as follows:</p><p>Please get the <code>UITransform</code> component on the node first, and then use the corresponding interface, for example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uiTrans</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UITransform)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uiTrans.anchorX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uiTrans.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size);</span></span></code></pre></div></li><li><p>The remaining interfaces are as follows:</p><ul><li><p><code>color</code>: needs to get the renderable component on the node first (e.g.: <code>Sprite</code> component), and then use the corresponding interface.</p></li><li><p><code>opacity</code>: If there is a renderable component on the node, set the <code>color</code> of the renderable component directly. If there is no renderable component, you can set the renderable component&#39;s <code>color</code> by adding the <code>UIOpacity</code> component and setting the related property.</p></li><li><p><code>skew</code>: The interface has been removed.</p></li><li><p><code>group</code>: change to <code>layer</code>.</p></li><li><p><code>zIndex</code>: change to <a href="./__APIDOC__/en/class/UITransform">priority</a> of <code>UITransform</code>.</p><blockquote><p><strong>Note</strong>: the <code>priority</code> property is deprecated as of v3.1, please use the <code>setSiblingIndex</code> function to adjust the order of the node tree.</p></blockquote></li></ul></li></ul></li><li><p><code>CCSpriteFrame</code>:</p><ul><li><p>Remove the interfaces: <code>copyWithZone</code>, <code>copy</code>, <code>clone</code> and <code>ensureLoadTexture</code>.</p></li><li><p>Change the interface:</p></li></ul><p><code>setFlipX</code> and <code>isFlipX</code> -&gt; <code>flipUVX</code></p><p><code>setFlipY</code> and <code>isFlipY</code> -&gt; <code>flipUVY</code></p><p><code>getTexture</code> and <code>setTexture</code> -&gt; <code>texture</code> (where the type is Texture2D/RenderTexture).</p><ul><li>The remaining methods corresponding to <code>get</code> and <code>set</code> (e.g.: <code>getOffset</code>) all correspond directly to properties of the same name (e.g.: <code>offset</code>) in 3.0.</li></ul></li><li><p><code>CCTexture2D</code>:</p><ul><li><p>Change the interface: <code>genMipmaps</code> -&gt; <code>mipmaps</code>, <code>initWithElement</code> -&gt; <code>image</code>.</p></li><li><p><code>initWithData</code>, the whole method is removed, similarly the use is to pass the original <code>ArrayBufferView</code> data to the new <code>ImageAsset</code>, and then <code>ImageAsset</code> to the new <code>Texture2D</code> to get a copy of the image resource.</p></li></ul></li><li><p><code>Action</code>: Remove all related.</p></li><li><p><strong>Physics</strong>:</p><ul><li><p>2D changed components: <code>cc.Collider</code> -&gt; <code>Collider2D</code>, <code>cc.BoxCollider</code> -&gt; <code>BoxCollider2D</code>, <code>cc.RigidBody</code> -&gt; <code>RigidBody2D</code>, etc.</p></li><li><p>3D changed components: <code>cc.Collider3D</code> -&gt; <code>Collider</code>, <code>cc.BoxCollider3D</code> -&gt; <code>BoxCollider</code>, <code>cc.RigidBody3D</code> -&gt; <code>RigidBody</code>, etc.</p></li></ul></li><li><p><strong>tween</strong>:</p><ul><li>Change the interface: <code>cc.repeatForever</code> -&gt; <code>Tween.repeatForever</code>, <code>cc.reverseTime</code> -&gt; <code>Tween.reverseTime</code>, <code>cc.show</code> -&gt; <code>Tween.show</code>, etc.</li></ul></li><li><p><strong>Animation</strong>:</p><ul><li>Change the interface: <code>addClip</code>-&gt; <code>createState</code>, <code>getClips</code>-&gt; <code>clips</code>, <code>playAdditive</code>-&gt; <code>crossFade</code>, <code>getAnimationState</code>-&gt; <code>getState</code>, etc.</li></ul></li><li><p><strong>Camera</strong>:</p><ul><li><p>Remove the interfaces: <code>findCamera</code>, <code>alignWithScreen</code>, <code>main</code>, <code>cameras</code>, <code>zoomRatio</code> and <code>containsNode</code>.</p></li><li><p>Change the interface: <code>backgroundColor</code> -&gt; <code>clearColor</code>, <code>cullingMask</code> -&gt; <code>visibility</code>, <code>depth</code>-&gt;<code>clearDepth</code>, <code>getScreenToWorldPoint</code>-&gt;<code>screenToWorld</code>, <code>getWorldToScreenPoint</code>-&gt;<code>worldToScreen</code>, <code>getRay</code>-&gt;<code>screenPointToRay</code>, etc.</p></li></ul></li><li><p><strong>Audio</strong>:</p><ul><li>Change the interface: <code>getLoop</code> and <code>setLoop</code> -&gt; <code>loop</code>, <code>getVolume</code> and <code>setVolume</code> -&gt; <code>volume</code>, <code>getCurrentTime</code> and <code>setCurrentTime</code> -&gt; <code>currentTime</code>, <code>src</code> -&gt; <code>clip</code>.</li></ul></li><li><p><strong>Materials</strong>:</p><ul><li><p>All relevant changes need to be done by getting a <strong>Material instance</strong> on <strong>MeshRenderer</strong> or its subclasses.</p></li><li><p>Remove the interfaces: <code>setBlend</code>, <code>setDepth</code>, <code>setStencilEnabled</code>, <code>setStencil</code> and <code>setCullMode</code> and call <code>overridePipelineStates</code> to complete the update. <code>define</code> calls <code>recompileShaders</code> to complete the update.</p></li></ul></li><li><p>The platform variable changes under <strong>sys</strong> are as follows:</p></li></ul><table><thead><tr><th style="text-align:left;">Cocos Creator 2.x</th><th style="text-align:left;">Cocos Creator 3.0</th></tr></thead><tbody><tr><td style="text-align:left;"><code>BAIDU_GAME</code></td><td style="text-align:left;"><code>BAIDU_MINI_GAME</code></td></tr><tr><td style="text-align:left;"><code>VIVO_GAME</code></td><td style="text-align:left;"><code>VIVO_MINI_GAME</code></td></tr><tr><td style="text-align:left;"><code>OPPO_GAME</code></td><td style="text-align:left;"><code>OPPO_MINI_GAME</code></td></tr><tr><td style="text-align:left;"><code>HUAWEI_GAME</code></td><td style="text-align:left;"><code>HUAWEI_QUICK_GAME</code></td></tr><tr><td style="text-align:left;"><code>XIAOMI_GAME</code></td><td style="text-align:left;"><code>XIAOMI_QUICK_GAME</code></td></tr><tr><td style="text-align:left;"><code>JKW_GAME</code></td><td style="text-align:left;"><code>COCOSPLAY</code></td></tr><tr><td style="text-align:left;"><code>ALIPAY_GAME</code></td><td style="text-align:left;"><code>ALIPAY_MINI_GAME</code></td></tr><tr><td style="text-align:left;"><code>BYTEDANCE_GAME</code></td><td style="text-align:left;"><code>BYTEDANCE_MINI_GAME</code></td></tr></tbody></table><ul><li>The <strong>global variables</strong> are changed as follows:</li></ul><table><thead><tr><th style="text-align:left;">Cocos Creator 2.x</th><th style="text-align:left;">Cocos Creator 3.0</th></tr></thead><tbody><tr><td style="text-align:left;"><code>CC_BUILD</code></td><td style="text-align:left;"><code>BUILD</code></td></tr><tr><td style="text-align:left;"><code>CC_TEST</code></td><td style="text-align:left;"><code>TEST</code></td></tr><tr><td style="text-align:left;"><code>CC_EDITOR</code></td><td style="text-align:left;"><code>EDITOR</code></td></tr><tr><td style="text-align:left;"><code>CC_PREVIEW</code></td><td style="text-align:left;"><code>PREVIEW</code></td></tr><tr><td style="text-align:left;"><code>CC_DEV</code></td><td style="text-align:left;"><code>DEV</code></td></tr><tr><td style="text-align:left;"><code>CC_DEBUG</code></td><td style="text-align:left;"><code>DEBUG</code></td></tr><tr><td style="text-align:left;"><code>CC_JSB</code></td><td style="text-align:left;"><code>JSB</code></td></tr><tr><td style="text-align:left;"><code>CC_WECHATGAME</code></td><td style="text-align:left;"><code>WECHATGAME</code></td></tr><tr><td style="text-align:left;"><code>CC_RUNTIME</code></td><td style="text-align:left;"><code>RUNTIME_BASED</code></td></tr><tr><td style="text-align:left;"><code>CC_SUPPORT_JIT</code></td><td style="text-align:left;"><code>SUPPORT_JIT</code></td></tr></tbody></table><ul><li><p><strong>Dynamic Loading</strong>:</p><p>When using <code>bundle.load</code> or <code>resources.load</code> to dynamically load a <code>sprite-frame</code> or <code>texture</code> in v3.0, the path needs to be specified to a specific sub-asset:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load texture</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v2.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;background&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cc.Texture2D, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v3.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;background/texture&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Texture2D, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load sprite frame</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v2.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;background&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cc.SpriteFrame, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v3.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;background/spriteFrame&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpriteFrame, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre></div></li></ul><h5 id="jsb-api-relevant" tabindex="-1"><code>JSB</code> API relevant <a class="header-anchor" href="#jsb-api-relevant" aria-label="Permalink to &quot;\`JSB\` API relevant&quot;">​</a></h5><ul><li><code>jsb.FileUtils</code><ul><li><code>getDataFromFile</code>: return type changed from <code>Uint8Array</code> to <code>ArrayBuffer</code></li></ul></li></ul><h3 id="editor-upgrade" tabindex="-1">Editor upgrade <a class="header-anchor" href="#editor-upgrade" aria-label="Permalink to &quot;Editor upgrade&quot;">​</a></h3><h4 id="build-panel" tabindex="-1">Build Panel <a class="header-anchor" href="#build-panel" aria-label="Permalink to &quot;Build Panel&quot;">​</a></h4><p>The builds of all platforms in <strong>v3.0</strong> are built-in plug-ins, so the <strong>Build</strong> panel is also different from <strong>v2.4</strong>. The unique build options of each platform will be placed in a foldable section control separately.</p><p><img src="`+r+'" alt="image"></p><p>After clicking the build button, it will jump to the <strong>Build Tasks</strong> panel, where all built platforms will be displayed. You can modify the build options of the built project in this panel and then rebuild, view the build log, open the project directory, etc. If you need to compile for other platforms, click the <strong>New Build Task</strong> button at the top left of the panel.</p><p><img src="'+l+'" alt="image"></p><p>In addition, it supports the construction of multi-module results with file separation during construction, which facilitates concurrent loading of multiple modules and dynamic loading of modules, and the WeChat engine plug-in supports the selection of different physical engine backends. The <code>settings.js</code> generated after the build is also changed to <code>settings.json</code> and placed under <code>src</code> directory, allowing it to be used as a resource upload server.</p><h4 id="asset-preview-panel" tabindex="-1">Asset Preview Panel <a class="header-anchor" href="#asset-preview-panel" aria-label="Permalink to &quot;Asset Preview Panel&quot;">​</a></h4><p>Select the resource in the <strong>Assets</strong> panel to display resource thumbnails in the <strong>Asset Preview</strong> panel. If the folder where the resource is located is selected, the thumbnails of all resources under the folder can be displayed for easy viewing.</p><p><img src="'+d+'" alt="image"></p><h4 id="animation-panel-upgrade" tabindex="-1">Animation Panel Upgrade <a class="header-anchor" href="#animation-panel-upgrade" aria-label="Permalink to &quot;Animation Panel Upgrade&quot;">​</a></h4><ul><li>Support the search and display filtering of nodes in the node tree panel.</li><li>Support using the system clipboard to copy and paste all animation data (nodes, tracks, and key frames) on nodes.</li><li>Support multi-select nodes to add property tracks in batches.</li><li>Optimize the experience of selecting and deselecting key frames (<strong>Ctrl + mouse click</strong> to select key frames to deselect them).</li><li>Support continuing to edit node properties in the animation editing state, including particle and model material properties, etc.</li></ul><p><img src="'+p+'" alt="image"></p><h4 id="project-setting-panel-update" tabindex="-1">Project Setting Panel Update <a class="header-anchor" href="#project-setting-panel-update" aria-label="Permalink to &quot;Project Setting Panel Update&quot;">​</a></h4><p>It is divided into three parts: <strong>Engine Manager</strong>, <strong>Project Setting</strong>, and <strong>Build</strong>.</p><p>The Physics Collision Group uses the <code>PhysicsSystem.PhysicsGroup</code> type independently, and no longer shares the group configuration with <code>Node.Layers</code>:</p><p><img src="'+c+'" alt="image"></p><p><strong>Texture Compression</strong> is modified to configure the preset in the <strong>Project Setting</strong> panel, then select the image resource in the <strong>Assets</strong> panel, and then select the preset method.<br> After the old project is upgraded, the editor will automatically scan all the compressed texture configurations in the project and sort out several presets. Since it is automatically scanned, the generated name may not be what you want, you can modify it here.</p><p><img src="'+h+'" alt="image"></p><h4 id="editor-extension-system-upgrade" tabindex="-1">Editor Extension System Upgrade <a class="header-anchor" href="#editor-extension-system-upgrade" aria-label="Permalink to &quot;Editor Extension System Upgrade&quot;">​</a></h4><p>Cocos Creator 3.x has a more powerful extension system. Almost all internal modules of the editor are built with extension system. You can quickly create your own extensions in the extended menu to achieve the customizations you want. In addition, v3.0 also provides an <strong>Extension Manager</strong>, which can easily manage the operation and uninstallation of all extensions.</p><p><img src="'+g+'" alt="image"></p><h3 id="build-directory-differences" tabindex="-1">Build Directory Differences <a class="header-anchor" href="#build-directory-differences" aria-label="Permalink to &quot;Build Directory Differences&quot;">​</a></h3><p><strong>Cocos Creator 2.x</strong> and <strong>Cocos Creator 3.0</strong> differ to a certain extent in the directories generated after building on different platforms. Let&#39;s take <strong>v2.4.3</strong> as an example and compare it with <strong>v3.0</strong> on Web, Native and WeChat Mini Game platforms respectively.</p><h4 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h4><p>The directory generated by v2.4.3 after building the <strong>Web Desktop</strong> is as follows:</p><p><img src="'+k+'" alt="image"></p><p>The directory generated by v3.0 after building the <strong>Web Desktop</strong> is as follows:</p><p><img src="'+u+'" alt="image"></p><p>From the above two figures, notice the directory generated after building the Web Desktop, v2.4.3 and v3.0 are mostly the same, except with the following differences:</p><ol><li><p>V3.0 puts all engine related code, such as core modules, physics modules, plugin scripts, etc., into the <code>web-desktop/cocos-js</code> directory, which looks clearer than v2.4.3, which was decentralized in the <code>web-desktop</code> directory.</p><p><img src="'+y+'" alt="image"></p></li><li><p>V2.4.3 has only one startup script <code>main.js</code>, while v3.0 has the following two startup scripts:</p><ul><li><p><code>index.js</code> -- Used to do some pre-processing work.</p></li><li><p><code>application.js</code> -- Used to start the game.</p></li></ul></li><li><p>The <code>src/settings.js</code> used to manage configuration in v2.4.3 is changed to <code>src/settings.json</code> in v3.0.</p></li><li><p>The splash screen <code>splash.png</code> in v2.4.3 is stored in <code>settings.json</code> by default in v3.0.</p></li><li><p>The <code>style-desktop.css</code> and <code>style-mobile.css</code> in v2.4.3 are combined into a single <code>style.css</code> in v3.0.</p></li></ol><h4 id="wechat-mini-game" tabindex="-1">WeChat Mini Game <a class="header-anchor" href="#wechat-mini-game" aria-label="Permalink to &quot;WeChat Mini Game&quot;">​</a></h4><p>The directory generated by v2.4.3 after building the <strong>WeChat Mini Game</strong> is as follows:</p><p><img src="'+m+'" alt="image"></p><p>The directory generated by v3.0 after building the <strong>WeChat Mini Game</strong> is as follows:</p><p><img src="'+f+'" alt="image"></p><p>From the above two figures, notice the directory generated after building the <strong>WeChat Mini Game</strong>, v2.4.3 and v3.0 are mostly the same, except with the following differences:</p><ol><li><p>V3.0 puts all engine related code, such as core modules, physics modules, plugin scripts, etc., into the <code>wechatgame/cocos-js</code> directory. While v2.4.3 scattered part of it in the <code>wechatgame</code> directory and part of it in the <code>wechatgame/cocos</code> directory.</p><p><img src="'+E+'" alt="image"></p></li><li><p>V2.4.3 compiles all the adaptation layer code of mini games into <code>adapter-min.js</code>, while v3.0 stores all the adaptation layer code as loose files in the <code>libs</code> directory, without compilation.</p></li><li><p>The startup script for v2.4.3 is <code>main.js</code>, and for v3.0 it is <code>application.js</code>.</p></li><li><p>V2.4.3 records all references of dynamic code in <code>ccRequire.js</code>. While v3.0 currently does not have this feature.</p></li><li><p>The <code>src/settings.js</code> used to manage configuration in v2.4.3 is changed to <code>src/settings.json</code> in v3.0.</p></li></ol><h4 id="native" tabindex="-1">Native <a class="header-anchor" href="#native" aria-label="Permalink to &quot;Native&quot;">​</a></h4><p>The release package generated by v2.4.3 after building the <strong>Windows</strong> platform is as follows:</p><p><img src="'+b+'" alt="image"></p><p>The release package generated by v3.0 after building the <strong>Windows</strong> platform is as follows:</p><p><img src="'+v+'" alt="image"></p><p>Notice from the above two figures, there is a big difference between v2.4.3 and v3.0 in the release package generated after building the <strong>Windows</strong> platform.</p><ol><li><p>The release package name for v2.4.3 is based on the <strong>Template</strong> in the <strong>Build</strong> panel (e.g.: <code>jsb-link</code>), while v3.0 is based on the <strong>current build of the native platform</strong> (e.g.: <code>windows</code>, <code>Android</code>).</p></li><li><p>Since the underlying C++ code generated after building on each native platform (e.g.: Android, Windows) is completely consistent. V3.0 extracts the underlying C++ code that was stored in the release package <code>jsb-link/frameworks/runtime-src/Classes</code> directory in v2.4.3 and placed it in a shared <code>native/engine/common</code> folder under the project directory. This way, when building the native platform, if the folder is detected to already exist, this part will no longer be processed, to speed up the build.</p><p><img src="'+C+'" alt="image"></p></li><li><p>The files related to the application layer in the v2.4.3 release package directory have been merged into the <code>assets</code> directory in v3.0.</p><p>The application layer files include the following:</p><ul><li><strong>assets</strong> -- Resource directory.</li><li><strong>jsb-adapter</strong> -- Directory, store the adaptation layer code.</li><li><strong>src</strong> -- Directory, store engine related code, plugin scripts, <code>settings.js</code> etc.</li><li>Related configuration files (<code>.cocos-project.json</code>, <code>cocos-project-template.json</code>, <code>project.json</code>).</li><li>The startup script (<code>main.js</code>).</li></ul><p>The <code>assets</code> directory structure of v3.0 is as follows:</p><p><img src="'+A+'" alt="image"></p><p>V3.0 has also made adjustments and changes accordingly during the merging process.</p><ul><li><p>All the engine related code (such as core modules, physics modules, plugin scripts, etc.) that was originally placed in the <code>src</code> file in v2.4.3 is moved to the <code>assets/src/cocos-js</code> directory.</p></li><li><p>The <code>src/settings.js</code> used to manage configuration in v2.4.3 is changed to <code>src/settings.json</code> in v3.0.</p></li></ul></li><li><p>V2.4.3 generates all the native build projects in the <code>frameworks/runtime-src</code> directory of the release package:</p><p><img src="'+F+'" alt="image"></p><p>While v3.0 generates the native build project in the <code>proj</code> directory and only generates the native build project for the current built. As shown below:</p><p><img src="'+w+'" alt="image"></p><p>Also, v3.0 separates the code and configuration, putting part of the code and configuration into the source code management, located in the <code>native/engine/name of the currently built platform</code> folder (e.g.: <code>native/engine/win32</code>, <code>native/engine/android</code>) under the project directory. Developers can integrate SDKs or do secondary development here. Deleting the release package directory generated after the build (e.g.: <code>build/windows</code>) will not affect the already integrated SDKs.</p><p><img src="'+x+'" alt="image"></p></li><li><p>Some assets needed for compilation, such as application icons, application startup scripts, etc., v2.4.3 are stored in the build project, while v3.0 are stored in the <code>native/engine/name of the currently built platform</code> directory (e.g.: <code>native/engine/win32</code>, <code>native/engine/android</code>).</p></li></ol><h2 id="upgrade-faq" tabindex="-1">Upgrade FAQ <a class="header-anchor" href="#upgrade-faq" aria-label="Permalink to &quot;Upgrade FAQ&quot;">​</a></h2><h3 id="after-the-upgrade-the-project-script-shows-errors-when-opening-in-vs-code-with-operations-such-as-binding-component-definitions" tabindex="-1">After the upgrade, the project script shows errors when opening in VS Code with operations such as binding component definitions <a class="header-anchor" href="#after-the-upgrade-the-project-script-shows-errors-when-opening-in-vs-code-with-operations-such-as-binding-component-definitions" aria-label="Permalink to &quot;After the upgrade, the project script shows errors when opening in VS Code with operations such as binding component definitions&quot;">​</a></h3><p>Cocos Creator 3.x enables Strict Mode for TypeScript, which will review the code more strictly and eliminate any problems that may occur due to negligence during the development process.</p><p>To avoid using strict mode, check <strong>Enable loose mode</strong> in <strong>Project -&gt; Project Settings -&gt; Scripting</strong> in the top menu bar of Creator. As a reminder, turning off strict mode is not encouraged as strict null checking can reduce some low-level errors in the code runtime.</p><p>For writing specifications in strict mode, please refer to the <a href="https://github.com/cocos/cocos-tutorial-taxi-game" target="_blank" rel="noreferrer">Taxi Game 3D</a> as a test case.</p><h3 id="action-actions-are-all-disabled" tabindex="-1"><code>Action</code> actions are all disabled <a class="header-anchor" href="#action-actions-are-all-disabled" aria-label="Permalink to &quot;`Action` actions are all disabled&quot;">​</a></h3><p>Cocos Creator 3.x removes the <code>Action</code> system and uses the <code>Tween</code> system instead.</p><h3 id="modifying-size-and-anchor-of-2d-nodes-does-not-work" tabindex="-1">Modifying <code>size</code> and <code>anchor</code> of 2D nodes does not work <a class="header-anchor" href="#modifying-size-and-anchor-of-2d-nodes-does-not-work" aria-label="Permalink to &quot;Modifying `size` and `anchor` of 2D nodes does not work&quot;">​</a></h3><p>Obtain the UITransform component on the node first, and then use the corresponding interface, e.g.:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uiTrans</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UITransform)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uiTrans.anchorX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uiTrans.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size);</span></span></code></pre></div><h3 id="modifying-the-color-of-a-2d-node-does-not-work" tabindex="-1">Modifying the <code>color</code> of a 2D node does not work <a class="header-anchor" href="#modifying-the-color-of-a-2d-node-does-not-work" aria-label="Permalink to &quot;Modifying the `color` of a 2D node does not work&quot;">​</a></h3><p>Obtain the renderable component on the node (e.g. Sprite component) first, and then use the corresponding interface, e.g.:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uiColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sprite)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uiColor.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="modifying-skew-for-2d-nodes-does-not-work" tabindex="-1">Modifying <code>skew</code> for 2D nodes does not work <a class="header-anchor" href="#modifying-skew-for-2d-nodes-does-not-work" aria-label="Permalink to &quot;Modifying `skew` for 2D nodes does not work&quot;">​</a></h3><p>As of v3.0, the <code>skew</code> interface has been removed.</p><h3 id="grouping-is-not-available-but-there-are-still-grouping-settings-layers-in-the-project-settings-panel-of-creator" tabindex="-1">Grouping is not available, but there are still grouping settings (Layers) in the project settings panel of Creator <a class="header-anchor" href="#grouping-is-not-available-but-there-are-still-grouping-settings-layers-in-the-project-settings-panel-of-creator" aria-label="Permalink to &quot;Grouping is not available, but there are still grouping settings (Layers) in the project settings panel of Creator&quot;">​</a></h3><p>The <code>group</code> group management in v2.x has been changed to <code>Layer</code> since v3.0, as shown below. In v2.x the group name is obtained from <code>node.group</code>, while in v3.x the group value is obtained from <code>node.layer</code> as <strong>group value</strong>, and the group value is set in exponential power of 2.</p><p><img src="'+D+`" alt="update-setting"></p><p>The layer value of User Layer 0 is: 2<sup>0</sup> = 1.<br> The layer value of User Layer 1 is: 2<sup>1</sup> = 2.<br> The layer value of User Layer 6 is: 2<sup>6</sup> = 64.</p><h3 id="the-sibling-node-set-by-zindex-is-invalid" tabindex="-1">The sibling node set by <code>zIndex</code> is invalid <a class="header-anchor" href="#the-sibling-node-set-by-zindex-is-invalid" aria-label="Permalink to &quot;The sibling node set by \`zIndex\` is invalid&quot;">​</a></h3><p>As of v3.0, the <code>zIndex</code> interface has been removed. To reorder the node tree please use the <code>setSiblingIndex</code> method instead.</p><h3 id="the-script-mounted-on-the-node-is-not-available-via-getcomponent" tabindex="-1">The script mounted on the node is not available via <code>getComponent()</code> <a class="header-anchor" href="#the-script-mounted-on-the-node-is-not-available-via-getcomponent" aria-label="Permalink to &quot;The script mounted on the node is not available via \`getComponent()\`&quot;">​</a></h3><p>Please look up the class name of the corresponding script, not the script name. v3.x script components are based on the class name defined in the script, not the script name. There are often problems with scripts not being found due to letter cases. Please refer to the <a href="./../scripting/setup">Create Script</a> documentation for more details.</p><h3 id="dynamic-loading-of-images-in-the-resources-folder-is-not-found" tabindex="-1">Dynamic loading of images in the <code>resources</code> folder is not found <a class="header-anchor" href="#dynamic-loading-of-images-in-the-resources-folder-is-not-found" aria-label="Permalink to &quot;Dynamic loading of images in the \`resources\` folder is not found&quot;">​</a></h3><p>When an image is set to <code>sprite-frame</code>, <code>texture</code> or other image type, an asset of the corresponding type will be generated in the <strong>Assets</strong> panel. However, if loading an <code>testAssets/image</code> directly, the type obtained will be <code>ImageAsset</code> and it is necessary to specify the path to the specific child asset.</p><p>For example, if an image of type <code>sprite-frame</code> is set to <code>testAssets/image</code> in the <code>resources</code> folder, then to load <code>SpriteFrame</code> consider the following code:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testAssets/image/spriteFrame&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpriteFrame, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">spriteFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sprite).spriteFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spriteFrame;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>When loading an image of type <code>texture</code>, change <code>spriteFrame</code> to <code>texture</code>.</p><h3 id="the-original-physics-collision-callback-is-gone-after-the-object-generates-a-physics-collision" tabindex="-1">The original physics collision callback is gone after the object generates a physics collision <a class="header-anchor" href="#the-original-physics-collision-callback-is-gone-after-the-object-generates-a-physics-collision" aria-label="Permalink to &quot;The original physics collision callback is gone after the object generates a physics collision&quot;">​</a></h3><p>Starting from v3.0, collision callbacks need to be registered at the beginning, unlike the original v2.x which generated callbacks directly. Therefore, developers need to add registration of the callback function to the physics callback script. For example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collider2D);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (collider) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Called only once when two colliding bodies start to make contact</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Contact2DType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BEGIN_CONTACT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onBeginContact, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Called only once when two colliders end contact</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Contact2DType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">END_CONTACT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onEndContact, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Called each time the collider contact logic is about to be handled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Contact2DType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PRE_SOLVE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onPreSolve, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Called each time the collider contact logic is finished</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Contact2DType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST_SOLVE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onPostSolve, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="after-the-upgrade-the-physics-collision-grouping-is-gone" tabindex="-1">After the upgrade, the physics collision grouping is gone <a class="header-anchor" href="#after-the-upgrade-the-physics-collision-grouping-is-gone" aria-label="Permalink to &quot;After the upgrade, the physics collision grouping is gone&quot;">​</a></h3><p>Currently the import plugin does not support the physics collision matrix, so for now the developer needs to set the collision matrix manually, which can be reset in the main menu <strong>Project -&gt; Project Settings -&gt; Physics</strong> of Creator.</p><h3 id="the-audioengine-interface-for-the-audio-system-is-not-working-and-audio-cannot-be-played" tabindex="-1">The <code>audioEngine</code> interface for the audio system is not working and audio cannot be played <a class="header-anchor" href="#the-audioengine-interface-for-the-audio-system-is-not-working-and-audio-cannot-be-played" aria-label="Permalink to &quot;The \`audioEngine\` interface for the audio system is not working and audio cannot be played&quot;">​</a></h3><p>Starting from v3.0, the <code>audioEngine</code> interface has been removed and the <strong>AudioSource</strong> component is used to control the playback of audio. Please refer to the <a href="./../audio-system/audiosource">AudioSource Component</a> documentation for more details.</p><h3 id="button-button-is-not-clickable" tabindex="-1"><code>Button</code> button is not clickable <a class="header-anchor" href="#button-button-is-not-clickable" aria-label="Permalink to &quot;\`Button\` button is not clickable&quot;">​</a></h3><p>To rule out code and rendering level problems, please check if the value of <code>Z</code> axis in the <code>Scale</code> property of the <strong>Button</strong> node is 0, if so, change it to 1.</p><h3 id="the-editor-is-stuck-when-making-changes-to-the-script-after-upgrade" tabindex="-1">The editor is stuck when making changes to the script after upgrade <a class="header-anchor" href="#the-editor-is-stuck-when-making-changes-to-the-script-after-upgrade" aria-label="Permalink to &quot;The editor is stuck when making changes to the script after upgrade&quot;">​</a></h3><p>Check if the property decorator <code>property</code> of the component type defined in the script after upgrade is undefined, if not, it is caused by the imported plugin being too old, please refer to <a href="https://github.com/cocos-creator/plugin-import-2.x" target="_blank" rel="noreferrer">Plugin Upgrade</a> to update the imported plugin Upgrade. After updating the imported plugins, you need to <strong>re-do the project upgrade</strong>.</p><h3 id="when-modifying-the-position-of-a-node-in-a-script-after-an-upgrade-direct-changes-through-the-node-e-g-node-x-do-not-take-effect" tabindex="-1">When modifying the <code>Position</code> of a node in a script after an upgrade, direct changes through the node (e.g. <code>node.x</code>) do not take effect <a class="header-anchor" href="#when-modifying-the-position-of-a-node-in-a-script-after-an-upgrade-direct-changes-through-the-node-e-g-node-x-do-not-take-effect" aria-label="Permalink to &quot;When modifying the \`Position\` of a node in a script after an upgrade, direct changes through the node (e.g. \`node.x\`) do not take effect&quot;">​</a></h3><p>As of v3.0, direct access to coordinate positions is not allowed on <code>node</code> nodes, it is necessary to access <code>position</code> before accessing coordinate values. And <code>position</code> is a <strong>read-only property</strong> in v3.x. To change it, please use the <code>setPosition</code> method. For example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v2.x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Access the coordinate axes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xAxis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.x;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modify the x-axis coordinates</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v3.x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Access the axes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xAxis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.position.x;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modify the x-axis coordinates</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="typescript-reference-tutorials" tabindex="-1">TypeScript Reference Tutorials <a class="header-anchor" href="#typescript-reference-tutorials" aria-label="Permalink to &quot;TypeScript Reference Tutorials&quot;">​</a></h2><ul><li><a href="https://discuss.cocos2d-x.org/t/tutorial-3-0-typescript-question-answering-and-experience-sharing/52932" target="_blank" rel="noreferrer">Tutorial: v3.0 TypeScript question answering and experience sharing</a></li><li><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript Official Website</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/classes.html" target="_blank" rel="noreferrer">TypeScript - Classes</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">TypeScript - Decorators</a></li><li><a href="http://definitelytyped.org/" target="_blank" rel="noreferrer">TypeScript - DefinitelyTyped</a></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/typescript-cn/" target="_blank" rel="noreferrer">Learn TypeScript in X minutes [cn]</a></li><li><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noreferrer">TypeScript GitHub</a></li><li><a href="https://www.cocos.com/en/the-best-resources-for-learning-typescript-for-game-development" target="_blank" rel="noreferrer">The Best Resources For Learning TypeScript for Game Development</a></li><li><a href="https://betterprogramming.pub/the-bad-reasons-people-avoid-typescript-and-the-better-reasons-why-they-shouldnt-86f8d98534de" target="_blank" rel="noreferrer">3 Excuses Developers Give To Avoid TypeScript — and the Better Reasons They Should Use It</a></li></ul>`,126),B=[_];function S(P,j,q,I,M,U){return i(),s("div",null,B)}const R=e(T,[["render",S]]);export{G as __pageData,R as default};
