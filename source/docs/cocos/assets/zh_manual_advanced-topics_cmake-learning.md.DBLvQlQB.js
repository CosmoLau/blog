import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.CqnjdYks.js";const e="/docs/cocos/assets/folder3.CTZz3JUI.png",l="/docs/cocos/assets/folder4.v8JotJ5T.png",p="/docs/cocos/assets/project.Bu6nqPtf.png",t="/docs/cocos/assets/code1.DYtZ62gS.png",h="/docs/cocos/assets/code2.Bbt4kbWW.png",m=JSON.parse('{"title":"CMake 使用简介","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/cmake-learning.md","filePath":"zh/manual/advanced-topics/cmake-learning.md"}'),k={name:"zh/manual/advanced-topics/cmake-learning.md"},d=n('<h1 id="cmake-使用简介" tabindex="-1">CMake 使用简介 <a class="header-anchor" href="#cmake-使用简介" aria-label="Permalink to &quot;CMake 使用简介&quot;">​</a></h1><p>CMake 是一个跨平台的构建工具，可根据需要输出各种各样的 Makefile 或者 Project 文件。CMake 使用 <code>CMakeLists.txt</code> 来配置工程文件，开发者可以在这里集成 SDK 或者引用用于编译原生平台的库和配置，详情可参考 <a href="./../editor/publish/native-options.html#二次开发">二次开发</a>。</p><p>从 v3.0 开始，Creator 已经集成了 CMake 的输出过程和基础编写，本篇文档主要介绍原生平台上 <code>CMakeLists.txt</code> 的使用规则以及一些简单的示例。</p><h2 id="cmakelists-的生成和使用" tabindex="-1">CMakeLists 的生成和使用 <a class="header-anchor" href="#cmakelists-的生成和使用" aria-label="Permalink to &quot;CMakeLists 的生成和使用&quot;">​</a></h2><h3 id="生成" tabindex="-1">生成 <a class="header-anchor" href="#生成" aria-label="Permalink to &quot;生成&quot;">​</a></h3><p>当选择某个原生平台进行构建时，项目目录 <code>native\\engine</code> 目录下会生成 <code>当前构建的平台名称</code> 文件夹（例如 <code>android</code>），以及 <code>common</code> 文件夹。CMake 在第一次运行时将会在这两个目录下分别生成 <code>CMakeLists.txt</code> 文件，作用各不相同：</p><ul><li><p><code>当前构建的平台名称</code> 文件夹：<code>CMakeLists.txt</code> 主要用于配置对应的构建平台。以 Android 平台为例：</p><p><img src="'+e+'" alt="folder2"></p></li><li><p><code>common</code> 文件夹：<code>CMakeLists.txt</code> 主要用于配置整个项目。</p><p><img src="'+l+`" alt="folder2"></p></li></ul><p><code>CMakeLists.txt</code> 的语法比较简单，由 <strong>命令</strong>、<strong>注释</strong> 和 <strong>空格</strong> 组成。其中命令是不区分大小写的，但命令中的参数和变量则是大小写敏感的。</p><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><p>那如何利用 CMake 将项目编译成动态库提供给其他项目使用呢？简单来说就是先录入编译信息，然后 CMake 命令再根据 <code>CMakeLists.txt</code> 中的配置生成编译所需的 Makefile 文件。</p><p>下面我们以 Android 平台为例，具体看一下如何配置项目目录 <code>native/engine/android</code> 目录下的 <code>CMakeLists.txt</code>。</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置 CMake 所需的最低版本。如果使用的 CMake 版本低于该版本，会提醒用户升级到该版本之后再执行 CMake</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.8)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 声明项目名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(APP_NAME </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project Name&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cmakeTest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 声明项目名称以及支持的编程语言，若不指定则默认支持所有编程语言，包括 C、C++ 和 JAVA 三种，分别用 C、CXX、JAVA 表示。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${APP_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># include 从文件或模块加载和运行 CMake 代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/CMakeLists.txt)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义一个新变量 LIB_NAME 并设置为 “cocos”</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LIB_NAME cocos)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义一个变量 PROJ_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PROJ_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/Game.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/Game.cpp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/jni/main.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果在该路径下不存在 jsb_module_register.cpp，则复制这个路径下的 jsb_module_register.cpp 文件到目标文件夹中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> EXISTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/jsb_module_register.cpp)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(COPY </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${COCOS_X_PATH}/cocos/bindings/manual/jsb_module_register.cpp&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DESTINATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加新 element 到 PROJ_SOURCES 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(APPEND PROJ_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/jsb_module_register.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 动态库 PROJ_SOURCES 生成链接文件到 LIB_NAME 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJ_SOURCES}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将目标文件 LIB_NAME 与库文件 cocos2d_jni 进行链接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-Wl,--whole-archive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cocos2d_jni </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Wl,--no-whole-archive&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cocos2d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将包含目录添加到目标文件夹。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>项目目录 <code>native/engine/common</code> 目录下的 <code>CMakeLists.txt</code> 文件的配置方法也是一致的，但是会多一些基础的配置。例如：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(USE_SPINE                </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Enable Spine&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>构建后生成的发布包目录（例如 <code>build/android</code>）下有一个 <code>proj/cfg.cmake</code> 文件，用于存放当前项目的一些配置。因为 <code>CMakeLists.txt</code> 中有对 <code>cfg.cmake</code> 文件进行引入，所以当 <code>cfg.cmake</code> 文件中的配置做了修改，便会同步到 <code>CMakeLists.txt</code> 中；若是相同的配置，则直接覆盖，以 <code>cfg.cmake</code> 文件中的为准。</p><p>从 3.6.2 开始，开发者可以在 <code>native/engine/common/localCfg.cmake</code> 中覆盖 <code>cfg.cmake</code> 中设置的选项, 而且 <code>localCfg.cmake</code> 会从 GIT 中忽略。</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CMakeLists.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 引入 cfg.cmake</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${RES_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/proj/cfg.CMake)</span></span></code></pre></div><p>例如将编辑器主菜单 <strong>项目 -&gt; 项目设置 -&gt; 功能裁剪</strong> 中的 <strong>Spine 动画</strong> 去掉勾选：</p><p><img src="`+p+'" alt="project"></p><p>则在再次构建时重新生成的 <code>cfg.make</code> 中就会将 <code>USE_SPINE</code> 设置为 <code>OFF</code>：</p><p><img src="'+t+'" alt="code1"></p><p>然后在编译时，CMake 便会根据配置（例如 <code>CMakeLists.txt</code> 以及 <code>CMakeLists.txt</code> 中引入的 <code>cfg.make</code> 等配置文件）生成 <strong>CMakeCache.txt</strong> 文件，该文件中包含了项目构建时 <strong>需要依赖的各种输入参数</strong>。</p><p><img src="'+h+`" alt="code2"></p><h2 id="cmakelists-常用编译指令" tabindex="-1">CMakeLists 常用编译指令 <a class="header-anchor" href="#cmakelists-常用编译指令" aria-label="Permalink to &quot;CMakeLists 常用编译指令&quot;">​</a></h2><h3 id="查找编译头文件" tabindex="-1">查找编译头文件 <a class="header-anchor" href="#查找编译头文件" aria-label="Permalink to &quot;查找编译头文件&quot;">​</a></h3><p>找到编译头文件，CMake 即可指定编译给定目标时要使用的包含目录或目标文件夹：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SYSTEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [BEFORE]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTERFACE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; [items1...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTERFACE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; [items2...] ...])</span></span></code></pre></div><p>一般情况下，通过上述指令引用库路径便可作为外部依赖项引入到 CMake 中。例如：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 Classes 头文件库路径添加到 LIB_NAME 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>更多内容可参考 CMake 官方文档 <a href="https://cmake.org/cmake/help/latest/command/target_include_directories.html" target="_blank" rel="noreferrer">target_include_directories</a>。</p><h3 id="生成-target-执行文件" tabindex="-1">生成 target（执行文件） <a class="header-anchor" href="#生成-target-执行文件" aria-label="Permalink to &quot;生成 target（执行文件）&quot;">​</a></h3><p>上述 <strong>查找编译头文件</strong> 指令中的 <code>target</code> 是通过 <code>add_library</code>、<code>add_executable</code>、<code>add_custom_command</code> 指令生成的执行文件。</p><ul><li><p>通过 <code>add_library</code> 指令生成</p><p><code>add_library</code> 指令将指定的源文件生成链接文件，然后添加到工程中。</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; [STATIC | SHARED | MODULE]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXCLUDE_FROM_ALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [source1] [source2 ...])</span></span></code></pre></div><ul><li><p><code>name</code>：表示添加一个名为 &lt;name&gt; 的目标库，由命令中列出的源文件（source1、source2）构建而成，在项目中是全局唯一的。源文件若是在后续通过 <a href="https://cmake.org/cmake/help/latest/command/target_sources.html?highlight=target_sources" target="_blank" rel="noreferrer">target_sources()</a> 指定，那么这里就可以忽略。</p></li><li><p><code>STATIC</code>（静态库）、<code>SHARED</code>（动态库）、<code>MODULE</code>（模块库）：用于指定要创建的库的类型。STATIC 库是对象文件的档案，用于连接其他目标。共享库是动态链接的，并在运行时加载。MODULE 库是插件，不被链接到其他目标中，但可以在运行时使用类似 dlopen 的功能动态加载。</p></li></ul><p>示例如下：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJ_SOURCES}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>更多内容详情请参考 CMake 官方文档 <a href="https://cmake.org/cmake/help/v3.16/command/add_library.html" target="_blank" rel="noreferrer">add_library</a>。</p></li><li><p>通过 <code>add_executable</code> 指令生成</p><p><code>add_executable</code> 指令通过使用指定的源文件来生成目标可执行文件。</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WIN32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MACOSX_BUNDLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXCLUDE_FROM_ALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               [source1] [source2 ...])</span></span></code></pre></div><ul><li><code>name</code>：可执行目标文件的名称，在一个 CMake 工程中，这个名称必须全局唯一。</li><li><code>WIN32</code>：用于在 <strong>Windows</strong> 中创建一个以 <code>WinMain</code> 为入口的可执行目标文件（通常入口函数为 <code>main</code>），该文件是一个 <strong>GUI 应用程序</strong>，而不是 <strong>控制台应用程序</strong>。在使用 <code>WIN32</code> 时，可执行目标的 <code>WIN32_EXECUTABLE</code> 会被置为 <code>ON</code>。</li><li><code>MACOSX_BUNDLE</code>：用于在 <strong>macOS</strong> 或者 <strong>iOS</strong> 中创建一个 GUI 可执行应用程序。在使用 <code>MACOSX_BUNDLE</code> 时，可执行目标的 <code>MACOSX_BUNDLE</code> 会被置为 <code>ON</code>。</li><li><code>EXCLUDE_FROM_ALL</code>：是否构建指定的可执行目标文件。当使用该项时，可执行目标文件不会被构建。</li><li><code>[source1] [source2 ...]</code>：构建可执行目标文件所需要的源文件。也可以通过 <a href="https://cmake.org/cmake/help/latest/command/target_sources.html?highlight=target_sources" target="_blank" rel="noreferrer">target_sources()</a> 继续为可执行目标文件添加源文件，需要注意的是在调用 <code>target_sources</code> 之前，可执行目标文件必须已经通过 <code>add_executable</code> 或 <code>add_library</code> 定义了。</li></ul><p>示例如下：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-world hello-world.cpp)</span></span></code></pre></div><p>更多内容详情请参考 CMake 官方文档 <a href="https://cmake.org/cmake/help/v3.16/command/add_executable.html?highlight=add_executable" target="_blank" rel="noreferrer">add_executable</a>。</p></li><li><p>通过 <code>add_custom_command</code> 指令生成</p><p><code>add_custom_command</code> 指令用于添加自定义构建规则到生成的构建系统中，适用于以下两种情况：</p><ol><li><p>添加自定义命令以生成输出文件</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OUTPUT output1 [output2 ...]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            COMMAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command1 [ARGS] [args1...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command2 [ARGS] [args2...] ...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [MAIN_DEPENDENCY depend]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEPENDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">depends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [BYPRODUCTS [files...]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [IMPLICIT_DEPENDS &lt;lang1&gt; depend1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                [&lt;lang2&gt; depend2] ...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKING_DIRECTORY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dir]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [DEPFILE depfile]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [JOB_POOL job_pool]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [VERBATIM] [APPEND] [USES_TERMINAL]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [COMMAND_EXPAND_LISTS])</span></span></code></pre></div><p>部分参数含义如下：</p><ul><li><p><code>OUTPUT</code>：指定命令预期产生的输出文件。输出文件名称可以是 <strong>绝对路径</strong> 或者 <strong>相对路径</strong>（相对于当前的构建的源目录路径）。</p></li><li><p><code>COMMAND</code>：指定在构建时执行的命令行。</p></li></ul><p>示例如下：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OUTPUT COPY_RES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_COMMAND}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -E copy_if_different </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${abs}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $&lt;TARGET_FILE_DIR:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${filename}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><blockquote><p><strong>注意</strong>：</p><ol><li><p>只有在相同的 <code>CMakeLists.txt</code> 中指定了所有依赖于其输出的目标时才有效。</p></li><li><p>不要同时在多个相互独立的目标文件中执行上述命令产生相同的文件，主要是为了防止冲突产生。</p></li></ol></blockquote></li><li><p>在某个目标（例如库或者可执行程序）的构建过程中添加额外执行的定制命令</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TARGET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           PRE_BUILD | PRE_LINK | POST_BUILD</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           COMMAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command1 [ARGS] [args1...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command2 [ARGS] [args2...] ...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           [BYPRODUCTS [files...]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKING_DIRECTORY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dir]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           [VERBATIM] [USES_TERMINAL]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           [COMMAND_EXPAND_LISTS])</span></span></code></pre></div><p>部分参数含义如下：</p><ul><li><p><code>TARGET</code>：指定命令运行的目标</p></li><li><p><code>COMMAND</code>：指定在构建时执行的命令行。</p></li></ul></li></ol><p>若需要了解更多关于 <code>add_custom_command</code> 指令的内容，详情请参考 CMake 官方文档 <a href="https://cmake.org/cmake/help/v3.16/command/add_custom_command.html?highlight=add_custom_command" target="_blank" rel="noreferrer">add_custom_command</a>。</p></li></ul><h3 id="链接库文件" tabindex="-1">链接库文件 <a class="header-anchor" href="#链接库文件" aria-label="Permalink to &quot;链接库文件&quot;">​</a></h3><p><code>target_link_libraries</code> 中库文件的顺序符合 <code>gcc</code> 链接顺序的规则，即被依赖的库放在依赖它的库的后面。</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; [item1] [item2] [...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      [[debug|optimized|general] &lt;item&gt;] ...)</span></span></code></pre></div><p><code>item</code> 表示库文件没有后缀的名字。默认情况下，库依赖项是传递的。当这个目标链接到另一个目标时，链接到这个目标的库也会出现在另一个目标的连接线上。例如：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-Wl,--whole-archive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cocos2d_jni </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Wl,--no-whole-archive&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cocos2d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>更多内容可参考 CMake 官方文档 <a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html" target="_blank" rel="noreferrer">target_link_libraries</a>。</p><h3 id="其他命令" tabindex="-1">其他命令 <a class="header-anchor" href="#其他命令" aria-label="Permalink to &quot;其他命令&quot;">​</a></h3><ul><li><p>打印调试日志消息</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(STATUS </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my custom debug info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>操作文件命令</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(COPY </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${COCOS_X_PATH}/cocos/bindings/manual/jsb_module_register.cpp&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DESTINATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/)</span></span></code></pre></div><p><code>COPY</code> 表示复制文件、目录以及符号链接到一个目标文件夹中。输入路径为相对于当前源码目录的路径。目标路径则是相对于当前的构建目录。</p></li><li><p>从文件或模块加载和运行 CMake 代码</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/CMakeLists.txt)</span></span></code></pre></div></li></ul><h2 id="cmakelists-使用示例" tabindex="-1">CMakeLists 使用示例 <a class="header-anchor" href="#cmakelists-使用示例" aria-label="Permalink to &quot;CMakeLists 使用示例&quot;">​</a></h2><p><strong>Android.mk</strong> 是 Android 源码编译系统的 Makefile，用于编译系统中 C++ 的动态库、静态库、可执行文件和 apk 等。接下来通过将 <a href="https://cloud.tencent.com/document/product/607/15216#cocos-creator-.E6.8E.A5.E5.85.A5" target="_blank" rel="noreferrer">腾讯云多媒体引擎 SDK</a> 中的一个 <code>Android.mk</code> 改写成 <code>CMakeLists.txt</code> 做一个简单的示例。</p><p><code>Android.mk</code> 中的代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>LOCAL_PATH := $(call my-dir)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>include $(CLEAR_VARS)</span></span>
<span class="line"><span>LOCAL_MODULE := Pre_GMESDK</span></span>
<span class="line"><span>LOCAL_SRC_FILES := ./$(TARGET_ARCH_ABI)/libgmesdk.so</span></span>
<span class="line"><span>include $(PREBUILT_SHARED_LIBRARY)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>include $(CLEAR_VARS)</span></span>
<span class="line"><span>LOCAL_MODULE := Pre_TRAE</span></span>
<span class="line"><span>LOCAL_SRC_FILES := ./$(TARGET_ARCH_ABI)/libtraeimp.so</span></span>
<span class="line"><span>include $(PREBUILT_SHARED_LIBRARY)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>include $(CLEAR_VARS)</span></span>
<span class="line"><span>LOCAL_MODULE := Pre_PTT</span></span>
<span class="line"><span>LOCAL_SRC_FILES := ./$(TARGET_ARCH_ABI)/libsilk.so</span></span>
<span class="line"><span>include $(PREBUILT_SHARED_LIBRARY)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>include $(CLEAR_VARS)</span></span>
<span class="line"><span>LOCAL_MODULE := Pre_MP3</span></span>
<span class="line"><span>LOCAL_SRC_FILES := ./$(TARGET_ARCH_ABI)/libgmecodec.so</span></span>
<span class="line"><span>include $(PREBUILT_SHARED_LIBRARY)</span></span></code></pre></div><p>其中有一个 <code>LOCAL_PATH</code> 变量，表示源文件在开发树中的位置。构建系统提供的宏函数 <code>my-dir</code> 将返回当前目录（<code>Android.mk</code> 文件本身所在的目录）的路径：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>LOCAL_PATH := $(call my-dir)</span></span></code></pre></div><p>对应在 <code>CMakeLists.txt</code> 则表示为：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LOCAL_PATH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/..)</span></span></code></pre></div><p>在 <code>Android.mk</code> 中以下部分的代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>include $(CLEAR_VARS)</span></span>
<span class="line"><span>LOCAL_MODULE := Pre_GMESDK</span></span>
<span class="line"><span>LOCAL_SRC_FILES := ./$(TARGET_ARCH_ABI)/libgmesdk.so</span></span>
<span class="line"><span>include $(PREBUILT_SHARED_LIBRARY)</span></span></code></pre></div><p>对应在 <code>CMakeLists.txt</code> 中则表示为：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Pre_GMESDK SHARED </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IMPORTED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLObal)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set_target_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Pre_GMESDK PROPERTIES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  IMPORTED_LOCATION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${ANDROID_ABI}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/libgmesdk.so</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>CMake 的指令和用法还有很多，欢迎大家去探寻和学习，本篇文档只是做了简单的示例，开发者可针对自身的实际情况，对自己的工作流进行定制。未来 Cocos Creator 也会将 CMake 更多的功能集成到编辑器的 <strong>构建发布</strong> 面板中，方便使用。</p><p>更多关于 CMake 语法和接口的详细内容，请参考 <a href="https://cmake.org/cmake/help/v3.16/guide/tutorial/index.html" target="_blank" rel="noreferrer">CMake 官方文档</a>。</p>`,56),c=[d];function o(E,r,g,y,C,_){return i(),a("div",null,c)}const u=s(k,[["render",o]]);export{m as __pageData,u as default};
