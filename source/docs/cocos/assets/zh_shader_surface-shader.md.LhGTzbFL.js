import{_ as a,c as e,o as r,a4 as s}from"./chunks/framework.uQk9_EO2.js";const p=JSON.parse('{"title":"表面着色器（Surface Shader）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/shader/surface-shader.md","filePath":"zh/shader/surface-shader.md","lastUpdated":1712305443000}'),h={name:"zh/shader/surface-shader.md"},c=s('<h1 id="表面着色器-surface-shader" tabindex="-1">表面着色器（Surface Shader） <a class="header-anchor" href="#表面着色器-surface-shader" aria-label="Permalink to &quot;表面着色器（Surface Shader）&quot;">​</a></h1><p>Surface Shader 使用高效、统一的渲染流程，让用户以简洁的代码创建表面材质信息，指定用于组合的光照和着色模型。</p><p>相比于 <a href="./legacy-shader/legacy-shader">传统着色器（Legacy Shader）</a> ，它的优点是更易书写和维护，有更好的版本兼容性，也更不容易产生渲染错误。并且可以从统一流程中获取很多公共特性，如统一的全场景光照和渲染调试功能等。</p><p>在 Cocos Creator v3.7.2 中，Surface Shader 已作为默认的 builtin-standard，用户可以在创建菜单查看。原来的 builtin-standard 相关的着色流程，统一归类到了 internal/effects/legacy/ 目录。</p><p>由于基于统一的着色流程，使用 Surface Shader 的代价是无法对光照和着色运算进行大幅度的定制。如有极为特殊的需求，建议使用 Legacy Shader。</p><p>Surface Shader 相关内容列表：</p><ul><li><a href="./surface-shader/builtin-surface-shader">内置 Surface Shader 导读</a></li><li><a href="./surface-shader/surface-shader-structure">Surface Shader 结构概览</a></li><li><a href="./surface-shader/shader-code-flow">Surface Shader 执行流程</a></li><li><a href="./surface-shader/includes">include 机制</a></li><li><a href="./surface-shader/macro-remapping">宏定义与重映射</a></li><li><a href="./surface-shader/function-replace">使用宏定义实现函数替换</a></li><li><a href="./surface-shader/surface-function">可替换的内置函数</a></li><li><a href="./surface-shader/render-usage">渲染用途</a></li><li><a href="./surface-shader/lighting-mode">光照模型</a></li><li><a href="./surface-shader/surface-data-struct">表面材质数据结构</a></li><li><a href="./surface-shader/shader-stage">着色器类别</a></li><li><a href="./surface-shader/shader-assembly">组装器</a></li><li><a href="./surface-shader/vs-input">VS 输入</a></li><li><a href="./surface-shader/fs-input">FS 输入</a></li><li><a href="./surface-shader/customize-surface-shader">自定义 Surface Shader</a></li><li><a href="./surface-shader/rendering-debug-view">渲染调试功能</a></li></ul>',7),d=[c];function f(i,u,l,t,n,o){return r(),e("div",null,d)}const _=a(h,[["render",f]]);export{p as __pageData,_ as default};
