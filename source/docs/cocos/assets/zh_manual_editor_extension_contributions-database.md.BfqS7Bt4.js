import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.CqnjdYks.js";const n="/docs/cocos/assets/extension-database.2qQRwCpN.png",y=JSON.parse('{"title":"自定义资源数据库","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/extension/contributions-database.md","filePath":"zh/manual/editor/extension/contributions-database.md"}'),e={name:"zh/manual/editor/extension/contributions-database.md"},p=t(`<h1 id="自定义资源数据库" tabindex="-1">自定义资源数据库 <a class="header-anchor" href="#自定义资源数据库" aria-label="Permalink to &quot;自定义资源数据库&quot;">​</a></h1><p>所有项目内的资源文件都是通过资源数据库进行管理，其中项目内的 <code>assets</code> 目录存放的是当前项目的资源，引擎仓库里 <code>editor/assets</code> 里存放的是引擎内置的资源（如：常见的图片、脚本等）。</p><p>当我们在扩展内使用了资源时，需要将扩展内的资源文件夹注册到资源数据库里，并在扩展发布时将资源随着扩展一起发布。</p><p>通过本文我们将学会如何注册一个资源文件夹，并在脚本里使用资源。</p><h2 id="注册配置" tabindex="-1">注册配置 <a class="header-anchor" href="#注册配置" aria-label="Permalink to &quot;注册配置&quot;">​</a></h2><p>资源注册需要在 <code>contributions</code> 中使用 <code>asset-db</code> 字段进行配置，如下所示：</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;contributions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;asset-db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;mount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;readonly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的示例中，我们把扩展 <code>test-package</code> 根目录下的 <code>assets</code> 文件夹注册到了资源数据库中。</p><h2 id="脚本资源" tabindex="-1">脚本资源 <a class="header-anchor" href="#脚本资源" aria-label="Permalink to &quot;脚本资源&quot;">​</a></h2><p>在 <code>test-package/assets/</code> 目录下创建一个脚本 <code>foo.ts</code>，内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// foo.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Node } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了使用 cc 的定义，我们需要拷贝 <code>{项目目录}\\temp\\declarations</code> 的定义文件到扩展根目录下。</p><p>由于 <code>foo.ts</code> 只是作资源使用，不属于扩展源码，所以我们需要在 <code>tsconfig.json</code> 中加入 <code>exclude</code> 配置进行排除，否则会出现编译错误。</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>注意</strong>：扩展中的脚本资源可以在 Cocos Creator 工程中编写并测试完成后，再复制到扩展的 <code>assets</code> 目录。</p></blockquote><h2 id="其他资源" tabindex="-1">其他资源 <a class="header-anchor" href="#其他资源" aria-label="Permalink to &quot;其他资源&quot;">​</a></h2><p>图片、文本、字体等资源直接放入 <code>assets</code> 目录下即可。</p><h2 id="使用扩展中的资源" tabindex="-1">使用扩展中的资源 <a class="header-anchor" href="#使用扩展中的资源" aria-label="Permalink to &quot;使用扩展中的资源&quot;">​</a></h2><p>刷新扩展，可以在 Cocos Creator 编辑器的 <strong>资源管理器</strong> 窗口中看到新增了一个 <code>test-package</code> 资源包，如下图所示：</p><p><img src="`+n+`" alt="extension-database"></p><h2 id="拖拽引用" tabindex="-1">拖拽引用 <a class="header-anchor" href="#拖拽引用" aria-label="Permalink to &quot;拖拽引用&quot;">​</a></h2><p>若要以拖拽到组件方式引用包内的资源，使用方式与 <code>assets</code> 和 <code>internal</code> 中的资源一致。</p><h2 id="import-脚本" tabindex="-1">import 脚本 <a class="header-anchor" href="#import-脚本" aria-label="Permalink to &quot;import 脚本&quot;">​</a></h2><p>若要在项目中引用脚本，只需要从资源目录库引用即可，如下所示：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// bar.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Foo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;db://test-package/foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>可以不用刻意关注某个类是否来自某个扩展包，TypeScript 开发环境的自动补齐功能会提示 <strong>import</strong> 目录的，无需担心。</p><blockquote><p><strong>注意</strong>：扩展资源包中的类名应当保持全局唯一，否则会造成冲突，实际开发中尽量添加一个适合的前缀（如 <code>test-package</code> 可简称为 <code>TP</code>，资源包中所有类统一加上 <code>TP</code> 前缀，变成 <code>TPFoo</code> ）。</p></blockquote>`,27),l=[p];function h(k,o,d,r,c,E){return a(),i("div",null,l)}const u=s(e,[["render",h]]);export{y as __pageData,u as default};
