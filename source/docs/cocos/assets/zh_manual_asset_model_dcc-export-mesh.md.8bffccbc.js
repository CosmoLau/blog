import{_ as e,v as a,b as r,R as o}from"./chunks/framework.5ffcbaff.js";const t="/docs/cocos/assets/blender_model.bfc5a5b1.png",s="/docs/cocos/assets/blender_export_fbx_1.02f8a001.png",l="/docs/cocos/assets/blender_model_c3d.73df0640.png",n="/docs/cocos/assets/blender_export_bake.f28b22ed.png",c="/docs/cocos/assets/blender_model_bake_c3d.1b7c7c41.png",d="/docs/cocos/assets/blender_export_gltf.fdc77343.png",p="/docs/cocos/assets/relative_path.d1eaa2e2.png",k=JSON.parse('{"title":"导入从 DCC 工具导出的模型","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/asset/model/dcc-export-mesh.md","filePath":"zh/manual/asset/model/dcc-export-mesh.md"}'),i={name:"zh/manual/asset/model/dcc-export-mesh.md"},h=o('<h1 id="导入从-dcc-工具导出的模型" tabindex="-1">导入从 DCC 工具导出的模型 <a class="header-anchor" href="#导入从-dcc-工具导出的模型" aria-label="Permalink to &quot;导入从 DCC 工具导出的模型&quot;">​</a></h1><p>目前大多数数字内容制作（Digital Content Creation, DCC）工具（<a href="./max-export-fbx.html">3ds Max</a>、<a href="./maya-export-fbx.html">Maya</a>、Blender）都能导出 <strong>FBX</strong> 和 <strong>glTF</strong> 这两种格式的模型文件，所以这些工具导出的内容都能在 Cocos Creator 中得到良好的展示。</p><h2 id="导出-fbx" tabindex="-1">导出 FBX <a class="header-anchor" href="#导出-fbx" aria-label="Permalink to &quot;导出 FBX&quot;">​</a></h2><p>因为 DCC 工具的坐标系和游戏引擎的坐标系可能不一致，所以在导出模型时需要进行一些变换才能在引擎中得到想要的结果。例如：Blender 的坐标系为 X 轴朝右，Y 轴朝里，Z 轴朝上，而 Cocos Creator 3.x 的坐标系为 X 轴朝右，Y 轴朝上，Z 轴朝外，所以需要调整旋转才能使得轴向一致。</p><p>以下以 Blender 2.8 作为例子，介绍模型的导入流程，首先我们在 Blender 中创建一个模型。</p><p><img src="'+t+'" alt="blender model"></p><p>在 <a href="https://docs.blender.org/manual/zh-hans/2.80/addons/io_scene_fbx.html" target="_blank" rel="noreferrer">Blender 的 FBX 导出选项</a> 中，我们选择 Up 为 Y Up，Forward 为 -Z Forward。</p><p><img src="'+s+'" alt="blender export"></p><p>导入到 Cocos Creator 中，可以看到节点在 X 轴做了 -90 的旋转，以便将轴和 Creator 的对齐。</p><p><img src="'+l+'" alt="blender export c3d"></p><p>如果不想要这个旋转值，Blender 的 FBX 导出插件提供了一个实验性功能（Apply Transform），可以将旋转数据直接变换到模型的顶点数据中。</p><p><img src="'+n+'" alt="blender export bake"></p><p>返回编辑器，在 <strong>属性检查器</strong> 中可以看到旋转数据没有了：</p><p><img src="'+c+'" alt="blender export bake c3d"></p><h2 id="导出-gltf" tabindex="-1">导出 glTF <a class="header-anchor" href="#导出-gltf" aria-label="Permalink to &quot;导出 glTF&quot;">​</a></h2><p><a href="https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#coordinate-system-and-units" target="_blank" rel="noreferrer">glTF 使用的也是右手坐标系</a>，Blender 的 <a href="https://docs.blender.org/manual/zh-hans/2.80/addons/io_scene_gltf2.html" target="_blank" rel="noreferrer">导出 glTF 的选项</a> 比较简单，只要把 +Y Up 选项勾上就可以了，导出的数据中也没有旋转值。</p><p><img src="'+d+'" alt="blender export glTF"></p><h2 id="朝向问题" tabindex="-1">朝向问题 <a class="header-anchor" href="#朝向问题" aria-label="Permalink to &quot;朝向问题&quot;">​</a></h2><p>游戏开发过程中可能会需要用到模型的朝向，例如想要一些物体面向玩家（使用了 LookAt 方法），这时就需要考虑模型的初始朝向，这里提供两种方法来调整模型的初始朝向。</p><ol><li>Cocos Creator 3.x 是以 -Z 轴做为正前方的朝向，而在 Blender 中正前方朝向为 +Y 轴，所以在制作模型时需要以 Y 轴正方向做为物体的朝向，经过导出的变换后，在 Creator 中就会是以 -Z 轴做为正前方的朝向。</li><li>如果不想在 DCC 工具中改变朝向，可以在场景中尝试为导入的模型增加一个父节点，然后旋转模型以使得模型的初始朝向为 -Z 轴，之后的各种旋转相关的操作都以父节点为操作对象。</li></ol><h2 id="美术制作规范说明" tabindex="-1">美术制作规范说明 <a class="header-anchor" href="#美术制作规范说明" aria-label="Permalink to &quot;美术制作规范说明&quot;">​</a></h2><ol><li><p>合理制定模型资源下的子资源命名（例如：网格、材质），每修改一次子资源命名就会导致项目内关联该子资源的地方出现丢失。</p></li><li><p>当模型有一部分需要透明，一部分不需要透明时，应该分两个材质导出。如果是一个材质导出容易出现模型穿透现象，需要手动调整材质。</p></li><li><p>外部资源引用，导出的时候使用相对路径。否则，在多人合作下，会识别不到原资源路径，导致模型内置材质无法正确获取到贴图而呈现黄色。3ds Max 导出本地路径修改方式如下：</p><p><img src="'+p+'" alt="relative path"></p></li></ol>',22),m=[h];function _(b,g,f,x,C,u){return a(),r("div",null,m)}const B=e(i,[["render",_]]);export{k as __pageData,B as default};
