import{_ as o,c as a,o as r,a4 as e}from"./chunks/framework.uQk9_EO2.js";const t="/docs/cocos/assets/build-options-android.BmSRWjIF.png",n="/docs/cocos/assets/modify_abi.LQZoyzTa.png",s="/docs/cocos/assets/sdk-android-instant.BwYJN4yN.png",A=JSON.parse('{"title":"Android 平台构建选项","description":"","frontmatter":{},"headers":[],"relativePath":"zh/editor/publish/android/build-options-android.md","filePath":"zh/editor/publish/android/build-options-android.md","lastUpdated":1712305443000}'),i={name:"zh/editor/publish/android/build-options-android.md"},l=e('<h1 id="android-平台构建选项" tabindex="-1">Android 平台构建选项 <a class="header-anchor" href="#android-平台构建选项" aria-label="Permalink to &quot;Android 平台构建选项&quot;">​</a></h1><p>Android 平台的构建选项如下：</p><p><img src="'+t+'" alt="build-options-android.png"></p><h2 id="平滑帧率" tabindex="-1">平滑帧率 <a class="header-anchor" href="#平滑帧率" aria-label="Permalink to &quot;平滑帧率&quot;">​</a></h2><p><strong>平滑帧率（Enable Swappy）</strong>：是否启用引擎里集成的 Swappy 功能。目前支持 GLES 和 Vulkan。</p><p>该选项会主动配合屏幕刷新率调整渲染时间，以达到稳定帧率和减少无效绘制。构建参数为 swappy。</p><p>更多信息可参考官网 <a href="https://source.android.com/devices/graphics/frame-pacing" target="_blank" rel="noreferrer">Frame Pacing Library Overview</a>。</p><h2 id="渲染后端" tabindex="-1">渲染后端 <a class="header-anchor" href="#渲染后端" aria-label="Permalink to &quot;渲染后端&quot;">​</a></h2><p>目前支持 <a href="https://www.vulkan.org/" target="_blank" rel="noreferrer">VULKAN</a>、<a href="https://www.khronos.org/registry/OpenGL-Refpages/es3/" target="_blank" rel="noreferrer">GLES3</a> 和 <a href="https://www.khronos.org/registry/OpenGL-Refpages/es2.0/" target="_blank" rel="noreferrer">GLES2</a> 三种，要求至少勾选一项，默认使用 <strong>GLES3</strong>。</p><p>若选择 <strong>GLES 2/3</strong>，则默认必须勾选 <strong>GLES3</strong>，不允许单独选择 <strong>GLES2</strong>。</p><p>在同时勾选多个的情况下，运行时将会根据设备实际支持情况选择使用的渲染后端。</p><h2 id="应用-id-名称" tabindex="-1">应用 ID 名称 <a class="header-anchor" href="#应用-id-名称" aria-label="Permalink to &quot;应用 ID 名称&quot;">​</a></h2><p><strong>应用 ID 名称</strong>（Game Package Name）通常以产品网站 URL 倒序排列，如 <code>com.mycompany.myproduct</code>。</p><blockquote><p><strong>注意</strong>：包名中只能包含数字、字母和下划线，此外包名最后一部分必须以字母开头，不能以下划线或数字开头。</p></blockquote><h2 id="target-api-level" tabindex="-1">Target API Level <a class="header-anchor" href="#target-api-level" aria-label="Permalink to &quot;Target API Level&quot;">​</a></h2><p>设置编译 Android 平台时所需的 Target API Level。点击旁边的 <strong>Set Android SDK</strong> 按钮即可快速跳转到配置页，具体配置规则请参考 <a href="./build-setup-evn-android">Android 原生发布环境配置</a>。</p><h2 id="app-abi" tabindex="-1">APP ABI <a class="header-anchor" href="#app-abi" aria-label="Permalink to &quot;APP ABI&quot;">​</a></h2><p>设置 Android 需要支持的 CPU 类型，可以选择一个或多个选项，目前包括 <strong>armeabi-v7a</strong>、<strong>arm64-v8a</strong>、<strong>x86</strong> 和 <strong>x86_64</strong> 四种类型。</p><blockquote><p><strong>注意</strong>：</p><ol><li><p>当你选择一个 ABI 构建完成之后，在不 Clean 的情况下，构建另外一个 ABI，此时两个 ABI 的 so 都会被打包到 apk 中，这个是 Android Studio 默认的行为。若用 Android Studio 导入工程，选择一个 ABI 构建完成之后，先执行一下 <strong>Build -&gt; Clean Project</strong> 再构建另外一个 ABI，此时只有后面那个 ABI 会被打包到 apk 中。</p></li><li><p>项目工程用 Android Studio 导入后，是一个独立的存在，不依赖于构建发布面板。如果需要修改 ABI，直接修改 <strong>gradle.properties</strong> 文件中的 <strong>PROP_APP_ABI</strong> 属性即可。</p><p><img src="'+n+'" alt="modify abi"></p></li></ol></blockquote><h2 id="使用调试密钥库" tabindex="-1">使用调试密钥库 <a class="header-anchor" href="#使用调试密钥库" aria-label="Permalink to &quot;使用调试密钥库&quot;">​</a></h2><p>Android 要求所有 APK 必须先使用证书进行数字签署，然后才能安装。Cocos Creator 提供了默认的密钥库，勾选 <strong>使用调试密钥库</strong> 就是使用默认密钥库。若开发者需要自定义密钥库可去掉 <strong>使用调试密钥库</strong> 勾选，详情请参考 <a href="https://developer.android.google.cn/studio/publish/app-signing?hl=zh-cn" target="_blank" rel="noreferrer">官方文档</a>。</p><h2 id="屏幕方向" tabindex="-1">屏幕方向 <a class="header-anchor" href="#屏幕方向" aria-label="Permalink to &quot;屏幕方向&quot;">​</a></h2><p>屏幕方向目前包括 <strong>Portrait</strong>、<strong>Landscape Left</strong>、<strong>Landscape Right</strong> 三种。</p><ul><li><strong>Portrait</strong>：屏幕直立，Home 键在下</li><li><strong>Landscape Left</strong>：屏幕横置，Home 键在屏幕左侧</li><li><strong>Landscape Right</strong>：屏幕横置，Home 键在屏幕右侧</li></ul><h2 id="google-play-instant" tabindex="-1">Google Play Instant <a class="header-anchor" href="#google-play-instant" aria-label="Permalink to &quot;Google Play Instant&quot;">​</a></h2><p>勾选该项即可将游戏打包发布到 Google Play Instant。Google Play Instant 依赖于 Google Play，并不是一个新的分发渠道，而是更接近一种游戏微端方案。它能够实现游戏的免安装即开即玩，有利于游戏的试玩、分享和转化。</p><blockquote><p><strong>使用时需要注意以下几点</strong>：</p><ol><li><p>Android Studio 的版本要在 4.0 及以上</p></li><li><p>Android Phone 6.0 及以上。Android SDK 版本在 6.0 到 7.0 之间的设备需要安装 Google 服务框架，SDK 版本在 8.0 以上的则不需要，可直接安装使用。</p></li><li><p>首次编译的话需要用 Android Studio 打开构建后的工程以下载 <strong>Google Play Instant Development SDK（windows）</strong> 或 <strong>Instant Apps Development SDK（Mac）</strong> 支持包。如果下载不成功的话建议设置一下 Android Studio 的 HTTP 代理。</p><p><img src="'+s+'" alt="Google Play Instant"></p></li></ol></blockquote><h2 id="生成-app-bundle-google-play" tabindex="-1">生成 App Bundle（Google Play） <a class="header-anchor" href="#生成-app-bundle-google-play" aria-label="Permalink to &quot;生成 App Bundle（Google Play）&quot;">​</a></h2><p>勾选该项即可将游戏打包成 App Bundle 格式用于上传到 Google Play 商店。具体请参考 <a href="https://developer.android.google.cn/guide/app-bundle/" target="_blank" rel="noreferrer">官方文档</a>。</p>',29),d=[l];function p(g,h,c,u,b,m){return r(),a("div",null,d)}const _=o(i,[["render",p]]);export{A as __pageData,_ as default};
