import{_ as t,c as e,o as l,a4 as a}from"./chunks/framework.uQk9_EO2.js";const d="/docs/cocos/assets/compress-texture.WKTOlRnz.png",s="/docs/cocos/assets/meta.BzhKfyDh.png",r="/docs/cocos/assets/compress-1.Y98TcCX8.png",o="/docs/cocos/assets/compress-2.DKGnS5Xo.png",T=JSON.parse('{"title":"压缩纹理","description":"","frontmatter":{},"headers":[],"relativePath":"zh/asset/compress-texture.md","filePath":"zh/asset/compress-texture.md","lastUpdated":1712305443000}'),n={name:"zh/asset/compress-texture.md"},i=a('<h1 id="压缩纹理" tabindex="-1">压缩纹理 <a class="header-anchor" href="#压缩纹理" aria-label="Permalink to &quot;压缩纹理&quot;">​</a></h1><p>Cocos Creator 可以直接在编辑器中设置纹理需要的压缩方式，然后在项目发布时自动对纹理进行压缩。支持同一平台同时导出多种图片格式，引擎将根据不同的设备支持情况自动下载合适的格式。</p><h2 id="配置压缩纹理" tabindex="-1">配置压缩纹理 <a class="header-anchor" href="#配置压缩纹理" aria-label="Permalink to &quot;配置压缩纹理&quot;">​</a></h2><p>Cocos Creator 支持导入多种格式的图片（具体见下表），但是在实际游戏运行中，我们不建议使用原始图片作为资源来加载。比如在手机平台上可能只需要原图 80% 或者更少的画质，又或者是没有使用到透明通道的 <code>.png</code> 可以将其转换成 <code>.jpg</code>，这样可以减少很大一部分图片的存储空间。</p><table><thead><tr><th style="text-align:left;">图片格式</th><th style="text-align:left;">Android</th><th style="text-align:left;">iOS</th><th style="text-align:left;">Mini Game</th><th style="text-align:left;">Web</th></tr></thead><tbody><tr><td style="text-align:left;">PNG</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">JPG</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">WEBP</td><td style="text-align:left;">Android 4.0 以上原生支持，其他版本可以使用 <a href="https://github.com/alexey-pelykh/webp-android-backport" target="_blank" rel="noreferrer">解析库</a></td><td style="text-align:left;">可以使用 <a href="https://github.com/carsonmcdonald/WebP-iOS-example" target="_blank" rel="noreferrer">解析库</a></td><td style="text-align:left;">支持</td><td style="text-align:left;"><a href="https://caniuse.com/#feat=webp" target="_blank" rel="noreferrer">部分支持</a></td></tr><tr><td style="text-align:left;">PVR</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持 iOS 设备</td><td style="text-align:left;">支持 iOS 设备</td></tr><tr><td style="text-align:left;">ETC1</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持 Android 设备</td><td style="text-align:left;">支持 Android 设备</td></tr><tr><td style="text-align:left;">ETC2</td><td style="text-align:left;">部分支持，取决于手机硬件</td><td style="text-align:left;">不支持</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持部分 Android 设备</td></tr><tr><td style="text-align:left;">ASTC</td><td style="text-align:left;">部分支持</td><td style="text-align:left;">部分支持</td><td style="text-align:left;">不支持（iOS 版微信小游戏 v8.0.3 以上支持）</td><td style="text-align:left;">部分支持</td></tr></tbody></table><p>默认情况下 Creator 在构建的时候输出的是原始图片，如果在构建时需要对某一张图片或者自动图集进行压缩，可以在 <strong>资源管理器</strong> 中选中这张图片或图集，然后在 <strong>属性检查器</strong> 中勾选 <code>useCompressTexture</code>，再在 <code>presetId</code> 中选择图片的纹理压缩预设，设置完成后点击右上角的绿色打钩按钮，即可应用。</p><p><img src="'+d+'" alt="compress-texture"></p><p><code>presetId</code> 中默认使用的是编辑器提供的压缩纹理预设，这里显示的图片压缩格式仅作为展示使用，不支持编辑。若需要添加更多预设或者对预设进行编辑，点击旁边的 <strong>编辑预设</strong> 按钮即可前往 <a href="./../editor/project/">项目设置 -&gt; 压缩纹理</a> 面板进行设置。</p><blockquote><p><strong>注意</strong>：配置了压缩纹理后，只有对应格式的图片会在构建时生成，若有些图片格式在部分设备上不支持就会导致显示异常。为避免该问题，在添加纹理压缩预设时，请额外选择一些通用图片格式（例如 PNG、JPG）作为默认图。</p></blockquote><p>图片资源上的压缩纹理选项将会存储在资源 meta 文件内，其中 <code>presetId</code> 是选择的压缩纹理预设的 ID。</p><p><img src="'+s+'" alt="meta"></p><h2 id="压缩纹理详解" tabindex="-1">压缩纹理详解 <a class="header-anchor" href="#压缩纹理详解" aria-label="Permalink to &quot;压缩纹理详解&quot;">​</a></h2><p>Cocos Creator 3.0 在构建图片的时候，会查找当前图片是否进行了压缩纹理的配置，如果没有，则最后按原图输出。</p><p>如果查找到了压缩纹理的配置，那么会按照找到的配置对图片进行纹理压缩。项目设置里压缩纹理配置是按照平台大类划分的，具体到实际平台的支持程度会有一些差异。构建将会根据 <strong>实际构建平台</strong> 以及当前 <strong>图片纹理的透明通道</strong> 情况来对配置的纹理格式做一定的剔除和优先级选择，关于这块规则可以参考下文的示例来理解。</p><p>这些生成的图片不会都被加载到引擎中，引擎会根据 <a href="./__APIDOC__/zh/interface/Macro?id=SUPPORT_TEXTURE_FORMATS">macro.SUPPORT_TEXTURE_FORMATS</a> 中的配置来选择加载合适格式的图片。<code>macro.SUPPORT_TEXTURE_FORMATS</code> 列举了当前平台支持的所有图片格式，引擎加载图片时会从生成的图片中找到在这个列表中 <strong>优先级靠前</strong>（即排列靠前）的格式来加载。</p><p>开发者可以通过修改 <code>macro.SUPPORT_TEXTURE_FORMATS</code> 来自定义平台的图片资源支持情况以及加载顺序的优先级。</p><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><p><img src="'+r+'" alt="1"></p><p><strong>示例 (一)</strong>：如上图所示，对于 MiniGame 平台的压缩纹理预设，假如 <strong>构建的是华为快游戏这类仅在安卓设备上运行的，构建时将不会打包出 PVR 的纹理格式</strong>。更多的平台剔除细则可以参考文末的 <a href="##构建平台的压缩纹理支持情况">构建平台的压缩纹理支持情况</a>。</p><p><img src="'+o+'" alt="2"></p><p><strong>示例 (二)</strong>：在上面的示例图中，ETC1 和 PVR 类型都 <strong>同时配置了 RGB 和 RGBA 两种类型的纹理格式，这种情况下构建将会根据当前图片的是否带有透明通道来优先选择其中一种格式</strong>。示例图中的图片是带透明通道的，则此时构建将只会打包出带有 REGA 类型的压缩纹理格式。当然这种剔除只有同时存在时才会，假如配置里只有 RGB 的图片格式，即便当前图片是带透明通道的也会正常打包出来。</p><h2 id="构建平台的压缩纹理支持细节" tabindex="-1">构建平台的压缩纹理支持细节 <a class="header-anchor" href="#构建平台的压缩纹理支持细节" aria-label="Permalink to &quot;构建平台的压缩纹理支持细节&quot;">​</a></h2><p>除全平台支持的 <code>JPG</code> 和 <code>PNG</code> 外，其他纹理压缩格式的支持情况如下：</p><table><thead><tr><th style="text-align:left;">平台名称</th><th style="text-align:left;">支持的压缩格式</th></tr></thead><tbody><tr><td style="text-align:left;">Web Desktop</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">Web Mobile</td><td style="text-align:left;">ASTC / ETC2 / ETC1 / PVR / WEBP</td></tr><tr><td style="text-align:left;">WeChat Mini Game</td><td style="text-align:left;">ASTC / ETC1 / PVR</td></tr><tr><td style="text-align:left;">AliPay Mini Game</td><td style="text-align:left;">ETC1 / PVR</td></tr><tr><td style="text-align:left;">Baidu Mini Game</td><td style="text-align:left;">ETC1 / PVR</td></tr><tr><td style="text-align:left;">OPPO Mini Game</td><td style="text-align:left;">ETC1</td></tr><tr><td style="text-align:left;">vivo Mini Game</td><td style="text-align:left;">ETC1</td></tr><tr><td style="text-align:left;">Huawei Quick Game</td><td style="text-align:left;">ETC1</td></tr><tr><td style="text-align:left;">Cocos Play</td><td style="text-align:left;">ETC1</td></tr><tr><td style="text-align:left;">Xiaomi Quick Game</td><td style="text-align:left;">ETC1</td></tr><tr><td style="text-align:left;">iOS</td><td style="text-align:left;">ASTC / PVR / WEBP / ETC1 / ETC2</td></tr><tr><td style="text-align:left;">Android / Huawei AGC</td><td style="text-align:left;">ASTC / ETC2 / ETC1 / WEBP</td></tr></tbody></table><h2 id="自定义构建纹理压缩处理" tabindex="-1">自定义构建纹理压缩处理 <a class="header-anchor" href="#自定义构建纹理压缩处理" aria-label="Permalink to &quot;自定义构建纹理压缩处理&quot;">​</a></h2><p>纹理压缩目前是在构建后生效，编辑器自带了一套处理工具。若需要自定义压缩工具，请参考 <a href="./../editor/publish/custom-build-plugin#自定义纹理压缩处理">自定义纹理压缩</a>。</p>',26),g=[i];function c(f,x,p,h,y,m){return l(),e("div",null,g)}const P=t(n,[["render",c]]);export{T as __pageData,P as default};
