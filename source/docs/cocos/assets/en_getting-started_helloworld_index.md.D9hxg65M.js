import{_ as e,c as s,o as t,a4 as n}from"./chunks/framework.uQk9_EO2.js";const i="/docs/cocos/assets/new-empty.CoTPVewr.png",a="/docs/cocos/assets/editor-panel.BnJjEe_o.png",o="/docs/cocos/assets/create-scene.DT8Bg9F6.png",r="/docs/cocos/assets/scene.Bn5rqcrc.png",l="/docs/cocos/assets/create-cube.CG7tb1mL.png",p="/docs/cocos/assets/cube.BEOkptGW.png",c="/docs/cocos/assets/create-typescript.Cz7GgkzU.png",h="/docs/cocos/assets/script.7T5fE589.png",d="/docs/cocos/assets/preview.CiWTe8eB.png",g="/docs/cocos/assets/console.DEajMyGW.png",k="/docs/cocos/assets/camera.BkQWqvD7.png",m="/docs/cocos/assets/camera-position.DbrGRRNh.png",u="/docs/cocos/assets/preview1.CFqWGbJz.png",j=JSON.parse('{"title":"Hello World Project","description":"","frontmatter":{},"headers":[],"relativePath":"en/getting-started/helloworld/index.md","filePath":"en/getting-started/helloworld/index.md","lastUpdated":1712305443000}'),y={name:"en/getting-started/helloworld/index.md"},b=n('<h1 id="hello-world-project" tabindex="-1">Hello World Project <a class="header-anchor" href="#hello-world-project" aria-label="Permalink to &quot;Hello World Project&quot;">​</a></h1><p>It&#39;s time to create and open the <strong>Hello World</strong> project.</p><p>Before we starts, please make sure you have read the <a href="./../install/">Install and Launch</a>, installed the Cocos Dashboard, and the newest Cocos Creator editor.</p><h2 id="creating-a-new-project" tabindex="-1">Creating a new project <a class="header-anchor" href="#creating-a-new-project" aria-label="Permalink to &quot;Creating a new project&quot;">​</a></h2><p>In the <strong>Project</strong> tab of Cocos Dashboard, click the <strong>New</strong> button in the bottom right corner to enter the <strong>New Project</strong> page. Select the <strong>empty</strong> project template, set the project name and project path</p><p><img src="'+i+'" alt="empty"></p><p>Then click the <strong>Create and open</strong> button at the bottom right to automatically create a project with an empty project template and open.</p><p><img src="'+a+'" alt="editor"></p><ul><li><strong>Assets</strong>: shows all the assets in the project&#39;s assets folder (<code>assets</code>).</li><li><strong>Scene</strong>: working area for displaying and editing the visual content in the scene.</li><li><strong>Hierarchy</strong>: shows all nodes in the scene and their hierarchical relationships in a tree list, all content seen in the <strong>Scene</strong> panel can be found in the <strong>Hierarchy</strong> panel with corresponding node entries</li><li><strong>Inspector</strong>: working area for viewing and editing the properties of the currently selected node and its components</li><li><strong>Assets Preview</strong>: Selecting an asset in the <strong>Assets</strong> panel displays a thumbnail of the asset in the <strong>Assets Preview</strong> panel. If the folder where the asset is located is selected, the thumbnails of all assets under the folder can be displayed for easy viewing.</li><li><strong>Animation</strong>: used to create some less complex animations that need to be linked with logic, such as UI animations.</li><li><strong>Console</strong>: used to display error reports, warnings or other log messages generated by the editor and engine.</li></ul><p>For more information about the various editor panels, please refer to <a href="./../../editor/">Editor Panels</a>.</p><h2 id="new-scene-creation" tabindex="-1">New Scene Creation <a class="header-anchor" href="#new-scene-creation" aria-label="Permalink to &quot;New Scene Creation&quot;">​</a></h2><p>Right-click in the <strong>Assets</strong> panel at the bottom left and select <strong>Create -&gt; Scene</strong>.</p><p><img src="'+o+'" alt="scene"></p><p>Alternatively, you can create a new scene in the <code>asset</code> directory in the <strong>Assets</strong> panel by clicking the <strong>+</strong> button in the upper left corner and selecting <strong>Scene</strong>.</p><p><img src="'+r+'" alt="scene"></p><h2 id="creating-objects" tabindex="-1">Creating Objects <a class="header-anchor" href="#creating-objects" aria-label="Permalink to &quot;Creating Objects&quot;">​</a></h2><p>In the <strong>Hierarchy</strong> panel on the top left, right-click and select <strong>Create -&gt; 3D Object -&gt; Cube</strong>. Or you can just click the <strong>+</strong> button in the top left corner and select <strong>3D Object -&gt; Cube Cube</strong>.</p><p><img src="'+l+'" alt="create-cube"></p><p>A cube will be created and displayed in the <strong>Scene</strong> panel:</p><p><img src="'+p+'" alt="cube"></p><h2 id="adding-scripts" tabindex="-1">Adding Scripts <a class="header-anchor" href="#adding-scripts" aria-label="Permalink to &quot;Adding Scripts&quot;">​</a></h2><ul><li><p>Create a new script</p><p>Right click in the <strong>Assets</strong> panel, select <strong>Create -&gt; TypeScript</strong>, and name it &quot;HelloWorld&quot; to create a new script in the <code>asset</code> directory of <strong>Assets</strong> panel.</p><p><img src="'+c+`" alt="create-typescript"></p></li><li><p>Adding code</p><p>Double-click the new script and it will be automatically opened in the script editor, provided that you specify the script editor in the editor menu bar under <strong>Cocos Creator/File -&gt; Preferences -&gt; Program Manager -&gt; Default Script Editor</strong>.</p><p>Then add the <code>start()</code> function to the script. The <code>start()</code> function will be called when the component is activated for the first time and will output &quot;Hello world&quot;.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Node } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HelloWorld&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* class member could be defined like this */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // dummy = &#39;&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* use \`property\` decorator if you want the member to be serializable */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // @property</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // serializableDummy = 0;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Your initialization goes here.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // update (deltaTime: number) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // // Your update function goes here.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Binding Scripts</p><p>Select the created Cube node in the <strong>Hierarchy</strong> panel and click <strong>Add Component -&gt; Custom Script -&gt; HelloWorld</strong> at the bottom of the <strong>Inspector</strong> panel to mount the script to the Cube node. Alternatively, you can drag and drop the script directly into the <strong>Inspector</strong> panel.</p><p><img src="`+h+'" alt="script"></p><blockquote><p><strong>Note</strong>: remember to save the scene after setting it up.</p></blockquote></li></ul><h2 id="previewing-the-scene" tabindex="-1">Previewing the Scene <a class="header-anchor" href="#previewing-the-scene" aria-label="Permalink to &quot;Previewing the Scene&quot;">​</a></h2><p>Once the simple scene setup is done, you can click the <strong>Play on Device</strong> button on top of the editor to preview the game. Currently, previewing is supported using <strong>Browser/Simulator</strong>.</p><p><img src="'+d+'" alt="preview"></p><p>Using the <strong>Browser</strong> preview as an example, Cocos Creator will run the current game scene with your default browser, as shown in the following image.</p><p><img src="'+g+'" alt="console"></p><p>Notice the output &quot;Hello World&quot; in the log message in the developer tools of the browser.</p><h2 id="modifying-the-camera-in-the-scene" tabindex="-1">Modifying the Camera in the Scene <a class="header-anchor" href="#modifying-the-camera-in-the-scene" aria-label="Permalink to &quot;Modifying the Camera in the Scene&quot;">​</a></h2><p>In the preview we can see that the cube seems a bit too small, so we can adjust the area of the scene by adjusting the Camera in the scene, which represents the player&#39;s perspective in the game.</p><ul><li><p>First, select the <strong>Main Camera</strong> node in the <strong>Hierarchy</strong> panel, and the <strong>Scene</strong> panel will display the transformation tool Gizmo and a small window with the player&#39;s perspective.</p><p><img src="'+k+'" alt="camera"></p></li><li><p>Then drag the Gizmo in the <strong>Scene</strong> panel or modify the <strong>Position</strong> property in the <strong>Inspector</strong> panel to make the cube in the player&#39;s view window more visible.</p><p><img src="'+m+'" alt="camera-position"></p></li><li><p>Then preview it again in the browser and you can see that the cube in the scene is now obvious.</p><p><img src="'+u+'" alt="preview"></p></li></ul>',31),w=[b];function E(f,_,C,A,v,D){return t(),s("div",null,w)}const S=e(y,[["render",E]]);export{j as __pageData,S as default};
