import{_ as a,c as s,o as e,a5 as i}from"./chunks/framework.CqnjdYks.js";const o="/docs/cocos/assets/project-build-menu.B494Me6i.png",t="/docs/cocos/assets/build-panel-mac.BXSZluEF.png",c="/docs/cocos/assets/build-open-path-mac.B6qeFqzU.png",r="/docs/cocos/assets/xcode-folder-mac.DyScgaOm.png",l="/docs/cocos/assets/xcode-showcase-mac.CKTdIVfB.png",n="/docs/cocos/assets/run-mac.B6RNKN1q.png",p="/docs/cocos/assets/run-mac-800to400.DGA8f5MU.png",x=JSON.parse('{"title":"macOS 构建示例","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/publish/mac/build-example-mac.md","filePath":"zh/manual/editor/publish/mac/build-example-mac.md"}'),h={name:"zh/manual/editor/publish/mac/build-example-mac.md"},d=i('<h1 id="macos-构建示例" tabindex="-1">macOS 构建示例 <a class="header-anchor" href="#macos-构建示例" aria-label="Permalink to &quot;macOS 构建示例&quot;">​</a></h1><p>本文将演示 Cocos Creator 项目发布为 macOS 应用程序的流程，需要以下准备工作：</p><ul><li>一台 安装了 XCode 的 MacOS 设备</li><li>一个苹果开发者账号</li></ul><h2 id="发布流程" tabindex="-1">发布流程 <a class="header-anchor" href="#发布流程" aria-label="Permalink to &quot;发布流程&quot;">​</a></h2><h3 id="注册开发者账号" tabindex="-1">注册开发者账号 <a class="header-anchor" href="#注册开发者账号" aria-label="Permalink to &quot;注册开发者账号&quot;">​</a></h3><p>首先，需要拥有一个苹果开发者账号，如果没有，请先前往 <a href="https://appleid.apple.com/account" target="_blank" rel="noreferrer">注册页面</a> 进行注册。</p><h3 id="确认-macos-系统-和-xcode-版本" tabindex="-1">确认 macOS 系统 和 Xcode 版本 <a class="header-anchor" href="#确认-macos-系统-和-xcode-版本" aria-label="Permalink to &quot;确认 macOS 系统 和 Xcode 版本&quot;">​</a></h3><p>Cocos Creator 打包环境要求：</p><ul><li>Xcode 版本为 <strong>11.5</strong> 及以上。</li><li>macOS 版本为 <strong>10.14</strong> 及以上。</li></ul><blockquote><p><strong>注意</strong>：默认情况下 AppStore 中对应的 Xcode 与系统匹配，如果要使用特定版本的 Xcode，可前往 <a href="https://developer.apple.com/xcode/download/" target="_blank" rel="noreferrer">Xcode 下载页</a> 下载。</p></blockquote><h3 id="准备测试项目" tabindex="-1">准备测试项目 <a class="header-anchor" href="#准备测试项目" aria-label="Permalink to &quot;准备测试项目&quot;">​</a></h3><p>打开一个已有的项目，或者新建一个测试项目</p><h3 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h3><p><img src="'+o+'" alt="project-build-menu"></p><p>如上图所示，在 Cocos Creator 顶部菜单中选择 <strong>项目(Project)</strong> -&gt; <strong>构建(Build)</strong>，可打开下面的构建面板。</p><p><img src="'+t+'" alt="build-panel-mac"></p><h4 id="配置通用选项" tabindex="-1">配置通用选项 <a class="header-anchor" href="#配置通用选项" aria-label="Permalink to &quot;配置通用选项&quot;">​</a></h4><p>上图中，左边部分为 Cocos Creator 支持的所有平台都需要配置的公共参数，可以前往 <a href="./../build-options.html">通用发布配置</a> 查看详情。</p><h4 id="配置-macos-专有选项" tabindex="-1">配置 macOS 专有选项 <a class="header-anchor" href="#配置-macos-专有选项" aria-label="Permalink to &quot;配置 macOS 专有选项&quot;">​</a></h4><p>平台（Platform）选择为 <strong>Mac</strong>，面板向下滑动，可以看到如右图所示的原生（Native）平台和 macOS 平台特有的配置，详情请查看 <a href="./../native-options.html">原生平台通用构建选项</a> 和 <a href="./build-options-mac.html">macOS 发布选项</a>。</p><h4 id="填写包名" tabindex="-1">填写包名 <a class="header-anchor" href="#填写包名" aria-label="Permalink to &quot;填写包名&quot;">​</a></h4><p>包名（Bundle Identifier）是必须配置的选项，一般使用 <code>com.mycompany.myproduct</code> 组合，比如，本示例用的是 com.cocos.mac。</p><h4 id="执行构建" tabindex="-1">执行构建 <a class="header-anchor" href="#执行构建" aria-label="Permalink to &quot;执行构建&quot;">​</a></h4><p>配置完成后，点击 <strong>构建发布（Build）</strong> 按钮，即可生成 Xcode 项目。</p><p>构建成功后，可以点击如下所示的打开文件按钮，打开生成的项目路径。</p><p><img src="'+c+'" alt="build-open-path-mac"></p><p>如果未更改过生成路径，可在同目录下找到 build/mac/proj 目录，内容如下所示：</p><p><img src="'+r+'" alt="xcode-folder-mac"></p><h3 id="在-xcode-中编译运行" tabindex="-1">在 Xcode 中编译运行 <a class="header-anchor" href="#在-xcode-中编译运行" aria-label="Permalink to &quot;在 Xcode 中编译运行&quot;">​</a></h3><p>双击 <code>build/mac/proj/项目名称.xcodeproj</code>，即可用 Xcode 打开项目。</p><p><img src="'+l+'" alt="xcode-showcase-mac"></p><p>选择如图所示的 <strong>项目名称-desktop</strong> 作为编译目标，点击编译并运行按钮，即可启动项目。</p><p><img src="'+n+`" alt="run-mac"></p><h3 id="修改分辨率" tabindex="-1">修改分辨率 <a class="header-anchor" href="#修改分辨率" aria-label="Permalink to &quot;修改分辨率&quot;">​</a></h3><p>可以通过 <code>native/engine/common/classes/Game.cpp</code> 中的 <code>_windowInfo</code> 进行修改：</p><p>默认分辨率为 800 x 600，我们以把分辨率改为 800 x 400 为例。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Game</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _windowInfo.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GAME_NAME;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // configure window size</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _windowInfo.width  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _windowInfo.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>修改完成后，在 Xcode 中再次编译运行，效果如下图所示：</p><p><img src="`+p+'" alt="run-mac-800to400"></p><h2 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h2><h3 id="脚本与原生通信" tabindex="-1">脚本与原生通信 <a class="header-anchor" href="#脚本与原生通信" aria-label="Permalink to &quot;脚本与原生通信&quot;">​</a></h3><p>有时候项目需要从脚本层调用一些 iOS 的系统功能，或者当集成了某个第三方的 iOS SDK 后，调要通过脚本代码调用其 API，此时就需要用到脚本层与原生层的通信机制。</p><p>完整的通信机制请参考：</p><ul><li><a href="./../../../advanced-topics/oc-reflection.html">基于反射机制实现 JavaScript 与 iOS/macOS 系统原生通信</a>。</li><li><a href="./../../../advanced-topics/js-oc-bridge.html">使用 JsbBridge 实现 JavaScript 与 Objective-C 通信</a></li></ul><h3 id="在原生环境调试代码" tabindex="-1">在原生环境调试代码 <a class="header-anchor" href="#在原生环境调试代码" aria-label="Permalink to &quot;在原生环境调试代码&quot;">​</a></h3><p>有一些问题，只有在特定设备上才会出现，如果能够在对应设备上调试代码，就能快速定位问题，找到解决方案。</p><p>Cocos Creator 提供了原生调试机制，可以很方便地在设备上调试游戏代码，请参考：<a href="./../debug-jsb.html">原生平台 JavaScript 调试</a></p><h2 id="特性与系统版本" tabindex="-1">特性与系统版本 <a class="header-anchor" href="#特性与系统版本" aria-label="Permalink to &quot;特性与系统版本&quot;">​</a></h2><p>不同的特性会依赖特定的系统版本，请往 <a href="./../../../advanced-topics/supported-versions.html">特性与系统版本</a>查看详情。</p>',49),m=[d];function u(k,g,b,_,f,E){return e(),s("div",null,m)}const S=a(h,[["render",u]]);export{x as __pageData,S as default};
