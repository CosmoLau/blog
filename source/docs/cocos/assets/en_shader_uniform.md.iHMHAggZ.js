import{_ as t,c as e,o as l,a4 as a}from"./chunks/framework.uQk9_EO2.js";const g=JSON.parse('{"title":"Built-in Shader Uniforms","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/uniform.md","filePath":"en/shader/uniform.md","lastUpdated":1712305443000}'),d={name:"en/shader/uniform.md"},c=a('<h1 id="built-in-shader-uniforms" tabindex="-1">Built-in Shader Uniforms <a class="header-anchor" href="#built-in-shader-uniforms" aria-label="Permalink to &quot;Built-in Shader Uniforms&quot;">​</a></h1><p>To use built-in shader variables, you need to include the corresponding chunks first. All currently available built-in uniforms, grouped by the chunks they are located:</p><h2 id="cc-local-chunk" tabindex="-1"><code>cc-local.chunk</code> <a class="header-anchor" href="#cc-local-chunk" aria-label="Permalink to &quot;`cc-local.chunk`&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Info</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cc_matWorld</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">model to world transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_matWorldIT</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">inverse-transpose of model to world transform matrix</td></tr></tbody></table><h2 id="cc-global-chunk" tabindex="-1"><code>cc-global.chunk</code> <a class="header-anchor" href="#cc-global-chunk" aria-label="Permalink to &quot;`cc-global.chunk`&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Info</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cc_time</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">x: seconds since engine started</td></tr><tr><td style="text-align:left;"><code>cc_screenSize</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xy: shading screen size<br>zw: reciprocal of shading screen size</td></tr><tr><td style="text-align:left;"><code>cc_screenScale</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xy: screen scale<br>zw: reciprocal of screen scale</td></tr><tr><td style="text-align:left;"><code>cc_nativeSize</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xy: canvas size<br>zw: reciprocal of canvas size</td></tr><tr><td style="text-align:left;"><code>cc_matView</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">view transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_matViewInv</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">inverse view matrix</td></tr><tr><td style="text-align:left;"><code>cc_matProj</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">projection transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_matProjInv</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">inverse projection transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_matViewProj</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">view-projection transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_matViewProjInv</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">inverse view-projection transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_cameraPos</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: camera position</td></tr><tr><td style="text-align:left;"><code>cc_exposure</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">x: camera exposure<br>y: reciprocal of camera exposure<br>z: is HDR enabled w: HDR-LDR scaling factor</td></tr><tr><td style="text-align:left;"><code>cc_mainLitDir</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: direction of the main directional light</td></tr><tr><td style="text-align:left;"><code>cc_mainLitColor</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: color of the main directional light<br>w: intensity</td></tr><tr><td style="text-align:left;"><code>cc_ambientSky</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: ambient sky color<br>w: intensity</td></tr><tr><td style="text-align:left;"><code>cc_ambientGround</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: ambient ground color</td></tr></tbody></table><h2 id="cc-environment-chunk" tabindex="-1"><code>cc-environment.chunk</code> <a class="header-anchor" href="#cc-environment-chunk" aria-label="Permalink to &quot;`cc-environment.chunk`&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Info</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cc_environment</code></td><td style="text-align:left;">samplerCube</td><td style="text-align:left;">IBL environment map</td></tr></tbody></table><h2 id="cc-forward-light-chunk" tabindex="-1"><code>cc-forward-light.chunk</code> <a class="header-anchor" href="#cc-forward-light-chunk" aria-label="Permalink to &quot;`cc-forward-light.chunk`&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Info</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cc_sphereLitPos[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: position of spherical lights</td></tr><tr><td style="text-align:left;"><code>cc_sphereLitSizeRange[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">x: size of spherical lights<br>y: range of spherical lights</td></tr><tr><td style="text-align:left;"><code>cc_sphereLitColor[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: color of spherical lights<br>w: intensity</td></tr><tr><td style="text-align:left;"><code>cc_spotLitPos[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: position of spotlights</td></tr><tr><td style="text-align:left;"><code>cc_spotLitSizeRangeAngle[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">x: size of spotlights<br>y: range of spotlights<br>z: angle of spotlights</td></tr><tr><td style="text-align:left;"><code>cc_spotLitDir[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: direction of spotlights</td></tr><tr><td style="text-align:left;"><code>cc_spotLitColor[MAX_LIGHTS]</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">xyz: color of spotlights<br>w: intensity</td></tr></tbody></table><h2 id="cc-shadow-chunk" tabindex="-1"><code>cc-shadow.chunk</code> <a class="header-anchor" href="#cc-shadow-chunk" aria-label="Permalink to &quot;`cc-shadow.chunk`&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Info</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cc_matLightPlaneProj</code></td><td style="text-align:left;">mat4</td><td style="text-align:left;">planar shadow transform matrix</td></tr><tr><td style="text-align:left;"><code>cc_shadowColor</code></td><td style="text-align:left;">vec4</td><td style="text-align:left;">shadow color</td></tr></tbody></table>',12),i=[c];function n(o,r,s,f,h,y){return l(),e("div",null,i)}const m=t(d,[["render",n]]);export{g as __pageData,m as default};
