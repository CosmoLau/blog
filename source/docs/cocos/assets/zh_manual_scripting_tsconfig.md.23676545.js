import{_ as s,v as o,b as n,R as a}from"./chunks/framework.5ffcbaff.js";const F=JSON.parse('{"title":"tsconfig","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/scripting/tsconfig.md","filePath":"zh/manual/scripting/tsconfig.md"}'),p={name:"zh/manual/scripting/tsconfig.md"},e=a(`<h1 id="tsconfig" tabindex="-1">tsconfig <a class="header-anchor" href="#tsconfig" aria-label="Permalink to &quot;tsconfig&quot;">​</a></h1><p>项目中 <code>tsconfig.json</code> 的 <strong>绝大多数</strong> 编译选项并不影响 Cocos Creator 对 TypeScript 的编译。因此，你需要小心配置其中的某些选项，以使得 IDE 的检查功能和 Cocos Creator 的编译行为一致。</p><hr><p>以下选项不应当显式修改：</p><ul><li><code>compilerOptions.target</code></li><li><code>compilerOptions.module</code></li></ul><p>例如，若将 <code>tsconfig.json</code> 设置为：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">es5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cjs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>那么以下脚本代码在（使用 <code>tsc</code> 作为检查器的）IDE 中不会引起错误，因为 <code>compilerOptions.module</code> 设置为了 <code>cjs</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path-to-module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>然而 Cocos Creator 隐含的 <code>compilerOptions.module</code> 是 <code>es2015</code>，因此在运行时可能会提示 &quot;require 未定义&quot; 等错误。</p><p>以下脚本代码对于 Cocos Creator 来说是合法的，但 IDE 可能会报告错误。因为 <code>compilerOptions.target</code> 设置为了 <code>es5</code>，而 <code>Set</code> 是 ES6 才引入的。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mySet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><hr><p>对于其他选项，你可以自由修改。</p><p>例如，当你希望禁止你项目中所有 TypeScript 脚本对隐式 <code>any</code> 的使用，就可以在 <code>tsconfig.json</code> 中将 <code>compilerOptions.noImplicitAny</code> 设为 <code>true</code>。如此当你用 Visual Studio Code 等 IDE 检查该文件时就会收到相应的错误提示。</p><hr><p>对于大多数项目而言，<code>tsconfig.json</code> 的某些选项是固定的。例如 <code>compilerOptions.target</code>、<code>compilerOptions.module</code> 以及 Cocos Creator 的类型声明文件位置等。</p><p>由于 <code>tsc</code> 的良好设计，<code>extends</code> 选项使得 <code>tsconfig.json</code> 可以是级联的。Cocos Creator 意识到了这一点，因此固定的 <code>tsconfig</code> 选项被放置在 <code>{项目路径}/tmp/tsconfig.cocos.json</code> 下，并由 Cocos Creator 管理。</p><p>于是，项目根路径下的 <code>tsconfig</code> 可以如下配置以共享这些固定选项：</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./tmp/tsconfig.cocos.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">/* 自定义的 tsconfig 选项 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>所幸，当你创建新项目时，Creator 将会自动生成这样的 <code>tsconfig</code>。</p>`,21),l=[e];function c(t,r,i,D,d,y){return o(),n("div",null,l)}const u=s(p,[["render",c]]);export{F as __pageData,u as default};
