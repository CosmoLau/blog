import{_ as t,c as e,o as a,a4 as r}from"./chunks/framework.uQk9_EO2.js";const s="/docs/cocos/assets/material.DZhtFOkm.png",u=JSON.parse('{"title":"材质系统类图","description":"","frontmatter":{},"headers":[],"relativePath":"zh/material-system/material-structure.md","filePath":"zh/material-system/material-structure.md","lastUpdated":1712305443000}'),o={name:"zh/material-system/material-structure.md"},i=r('<h1 id="材质系统类图" tabindex="-1">材质系统类图 <a class="header-anchor" href="#材质系统类图" aria-label="Permalink to &quot;材质系统类图&quot;">​</a></h1><p>材质系统控制着每个模型最终的着色流程与顺序，在引擎内相关类间结构如下：</p><p><a href="./material.dot"><img src="'+s+'" alt="Assets" title="Click to view diagram source"></a></p><p>上述图中的 <strong>Material</strong>（<a href="./../asset/material">材质</a>）和 <strong>EffectAsset</strong>（<a href="./../shader/">着色器资源</a>）都属于资源。</p><ul><li><p><strong>Material</strong> 负责 EffectAsset 声明的 <code>Uniform</code>、宏数据存储以及 Shader 使用和管理，这些信息都会以材质资源的可视化属性的形式展示在 <strong>属性检查器</strong> 面板中。Material 通常是被渲染器组件使用，所有继承自 RenderableComponent 的组件都是渲染器组件，例如 MeshRenderer、Sprite 等。更多内容请参考 <a href="./../asset/material">材质资源</a>。</p></li><li><p><strong>EffectAsset</strong> 负责提供属性、宏、Shader 列表定义。每个 EffectAsset 最终都会被编译成引擎内使用的格式，引擎再根据格式进行解析和应用。所有解析后的 EffectAsset 信息都会被注册到引擎内的 ProgramLib 库里，方便用户直接通过代码获取实际引擎所使用的 EffectAsset 资源。更多内容请参考 <a href="./../shader/">着色器</a>。</p></li></ul>',5),c=[i];function l(n,m,d,_,f,p){return a(),e("div",null,c)}const g=t(o,[["render",l]]);export{u as __pageData,g as default};
