import{_ as e,c as s,o as i,a4 as n}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"Customize the Main Menu","description":"","frontmatter":{},"headers":[],"relativePath":"en/editor/extension/contributions-menu.md","filePath":"en/editor/extension/contributions-menu.md","lastUpdated":1712305443000}'),a={name:"en/editor/extension/contributions-menu.md"},t=n(`<h1 id="customize-the-main-menu" tabindex="-1">Customize the Main Menu <a class="header-anchor" href="#customize-the-main-menu" aria-label="Permalink to &quot;Customize the Main Menu&quot;">​</a></h1><p>There is a main menu bar at the top of the editor, and it is easy to add your own menu in this menu bar within the extension.</p><h2 id="registering-menus" tabindex="-1">Registering menus <a class="header-anchor" href="#registering-menus" aria-label="Permalink to &quot;Registering menus&quot;">​</a></h2><p>When an extension needs to add a menu, just fill in the <code>contributions.menu</code> object. For example, if we add a menu item to the &quot;Extensions&quot; menu, we can modify <code>package.json</code> with the following code example:</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // package.json</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;contributions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;open-panel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openPanel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;menu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i18n:menu.extension&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;label&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Open Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./static/icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;open-panel&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The above configuration information will add a new &quot;Open Hello World&quot; menu in the &quot;Extensions&quot; menu of the editor. Clicking this menu will send an <code>open-panel</code> message to the current extension according to the message configuration, which will be triggered if the current extension is configured to listen to this message and the corresponding <code>openPanel</code> handler.</p><p>For the definition of messages, please refer to the documentation <a href="./contributions-messages">Customized Messages</a>.</p><p>Let&#39;s look at the meaning of the fields in the <code>menu</code> object.</p><h3 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h3><p>type {string} required</p><p>The format is: [top existing menu path][/path1][/path2], and the following is reasonable.</p><ul><li><code>i18n:menu.extension</code> - with the extension menu as the parent menu</li><li><code>i18n:menu.extension/Hello World</code> - adds a <code>Hello World</code> menu item to the extension menu as a parent menu</li><li><code>MyMenu</code> - Adds a <code>MyMenu</code> menu to the top menu bar as a parent menu</li><li><code>MyMenu/Hello World</code> - adds a <code>MyMenu</code> to the top menu bar and adds a <code>Hello World</code> menu item as a parent</li></ul><p>In the top menu bar, the pre-defined menus are</p><ul><li>i18n:menu.project - the &quot;Project&quot; menu</li><li>i18n:menu.node - the &quot;Node&quot; menu</li><li>i18n:menu.panel - &quot;Panel&quot; menu</li><li>i18n:menu.extension - &quot;Extensions&quot; menu</li><li>i18n:menu.develop - &quot;Developers&quot; menu</li></ul><h3 id="label" tabindex="-1">label <a class="header-anchor" href="#label" aria-label="Permalink to &quot;label&quot;">​</a></h3><p>Type {string} Required</p><p>The name of the menu item, supports i18n:key syntax.</p><h3 id="icon" tabindex="-1">icon <a class="header-anchor" href="#icon" aria-label="Permalink to &quot;icon&quot;">​</a></h3><p>Type {string} Optional</p><p>Relative path to the icon of the menu, the material used by the extension is usually placed under a folder named <code>static</code>, if it doesn&#39;t exist, create a new one.</p><h3 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h3><p>Type {string} Optional</p><p>The message that will be triggered when the menu is clicked, this message needs to be defined in <code>contributions.messsages</code> first.</p>`,23),o=[t];function l(h,p,d,r,u,k){return i(),s("div",null,o)}const m=e(a,[["render",l]]);export{E as __pageData,m as default};
