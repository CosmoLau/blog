import{_ as s}from"./chunks/enable-contact.CQ8gbFuJ.js";import{_ as i,c as a,o as t,a4 as n}from"./chunks/framework.uQk9_EO2.js";const l="/docs/cocos/assets/add-rigid.BLbQvHFD.png",e="/docs/cocos/assets/rigidbody-2d.C8lNm_zh.png",h="/docs/cocos/assets/fix-rotation.CzNcVOhb.png",p="/docs/cocos/assets/rigidbody-type.DF-2A6Em.png",A=JSON.parse('{"title":"2D 刚体","description":"","frontmatter":{},"headers":[],"relativePath":"zh/physics-2d/physics-2d-rigid-body.md","filePath":"zh/physics-2d/physics-2d-rigid-body.md","lastUpdated":1712305443000}'),d={name:"zh/physics-2d/physics-2d-rigid-body.md"},k=n('<h1 id="_2d-刚体" tabindex="-1">2D 刚体 <a class="header-anchor" href="#_2d-刚体" aria-label="Permalink to &quot;2D 刚体&quot;">​</a></h1><p>刚体是组成物理世界的基本对象，可以将刚体想象成一个你不能看到（绘制）也不能摸到（碰撞）的且不能变形的物体。</p><p>由于 Builtin 2D 物理系统只带有碰撞检测的功能，所以刚体对于 Builtin 2D 物理系统是不生效的，本篇设置只对 Box 2D 物理系统产生作用。</p><h2 id="添加刚体" tabindex="-1">添加刚体 <a class="header-anchor" href="#添加刚体" aria-label="Permalink to &quot;添加刚体&quot;">​</a></h2><p>点击 <strong>属性检查器</strong> 的 <strong>添加组件</strong> 按钮，输入 Rigidbody2D 即可以添加 2D 刚体组件。</p><p><img src="'+l+'" alt="add-rigid"></p><h2 id="属性说明" tabindex="-1">属性说明 <a class="header-anchor" href="#属性说明" aria-label="Permalink to &quot;属性说明&quot;">​</a></h2><p><img src="'+e+`" alt="rigidbody-2d"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Group</strong></td><td style="text-align:left;">刚体的分组。通过 <a href="./../editor/project/physics-configs">碰撞矩阵</a> 可设置不同分组间碰撞的可能性</td></tr><tr><td style="text-align:left;"><strong>EnabledContactListener</strong></td><td style="text-align:left;">开启监听<a href="./physics-2d-contact-callback">碰撞回调</a></td></tr><tr><td style="text-align:left;"><strong>Bullet</strong></td><td style="text-align:left;">这个刚体是否是一个快速移动的刚体，并且需要禁止穿过其他快速移动的刚体 <br>请参考 <a href="./__APIDOC__/zh/class/RigidBody2D">Rigidbody2D API</a> 获取更多信息</td></tr><tr><td style="text-align:left;"><strong>Type</strong></td><td style="text-align:left;">刚体类型，详情请参考下方 <strong>刚体类型</strong></td></tr><tr><td style="text-align:left;"><strong>AllowSleep</strong></td><td style="text-align:left;">是否允许刚体休眠 <br> <a href="./../editor/project/physics-configs">物理配置</a> 中可调整休眠的临界值</td></tr><tr><td style="text-align:left;"><strong>GravityScale</strong></td><td style="text-align:left;">重力缩放比例 <br> 仅对 <strong>Dynamic</strong> 类型的刚体生效</td></tr><tr><td style="text-align:left;"><strong>LinearDamping</strong></td><td style="text-align:left;">移动速度衰减系数</td></tr><tr><td style="text-align:left;"><strong>AngularDamping</strong></td><td style="text-align:left;">旋转速度衰减系数</td></tr><tr><td style="text-align:left;"><strong>LinearVelocity</strong></td><td style="text-align:left;">移动速度 <br> 仅对 <strong>Dynamic</strong> 和 <strong>Kinematic</strong> 类型的刚体生效</td></tr><tr><td style="text-align:left;"><strong>AngularVelocity</strong></td><td style="text-align:left;">旋转速度 <br> 仅对 <strong>Dynamic</strong> 和 <strong>Kinematic</strong> 类型的刚体生效</td></tr><tr><td style="text-align:left;"><strong>FixedRotation</strong></td><td style="text-align:left;">是否固定旋转</td></tr><tr><td style="text-align:left;"><strong>AwakeOnLoad</strong></td><td style="text-align:left;">加载完成后立刻唤醒刚体</td></tr></tbody></table><p>刚体组件接口请参考 <a href="./__APIDOC__/zh/class/RigidBody2D">Rigidbody2D API</a>。</p><h2 id="刚体属性" tabindex="-1">刚体属性 <a class="header-anchor" href="#刚体属性" aria-label="Permalink to &quot;刚体属性&quot;">​</a></h2><h3 id="质量" tabindex="-1">质量 <a class="header-anchor" href="#质量" aria-label="Permalink to &quot;质量&quot;">​</a></h3><p>刚体的质量是通过 <a href="./physics-2d-collider">碰撞组件</a> 的 <strong>密度</strong> 与 <strong>大小</strong> 自动计算得到的。若需要计算物体应该受到多大的力，可能需要使用到这个属性。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取刚体质量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="移动速度" tabindex="-1">移动速度 <a class="header-anchor" href="#移动速度" aria-label="Permalink to &quot;移动速度&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取移动速度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> velocity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.linearVelocity;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置移动速度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.linearVelocity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> velocity;</span></span></code></pre></div><p>移动速度衰减系数，值越大物体移动越慢，可以用来模拟空气摩擦力等效果。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取移动速度衰减系数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> damping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.linearDamping;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置移动速度衰减系数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.linearDamping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> damping;</span></span></code></pre></div><p>如果要获取刚体上某个点的移动速度，可以通过 <code>getLinearVelocityFromWorldPoint</code> 来获取。比如一个盒子旋转着往前飞，碰到了墙，这时候可能会希望获取盒子在发生碰撞的点的速度。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> velocity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLinearVelocityFromWorldPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldPoint);</span></span></code></pre></div><p>或者传入一个 <code>Vec2</code> 对象作为第二个参数来接收返回值，这样你可以使用你的缓存对象来接收这个值，避免创建过多的对象来提高效率。</p><p><strong>刚体的 get 方法都提供了 out 参数来接收函数返回值。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> velocity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLinearVelocityFromWorldPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldPoint, velocity);</span></span></code></pre></div><h3 id="旋转速度" tabindex="-1">旋转速度 <a class="header-anchor" href="#旋转速度" aria-label="Permalink to &quot;旋转速度&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取旋转速度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> velocity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.angularVelocity;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置旋转速度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.angularVelocity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> velocity;</span></span></code></pre></div><p>旋转速度衰减系数，与移动衰减系数相同。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取旋转速度衰减系数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> damping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.angularDamping;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置旋转速度衰减系数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.angularDamping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> damping;</span></span></code></pre></div><h3 id="旋转、位移与缩放" tabindex="-1">旋转、位移与缩放 <a class="header-anchor" href="#旋转、位移与缩放" aria-label="Permalink to &quot;旋转、位移与缩放&quot;">​</a></h3><p>旋转、位移与缩放是游戏开发中最常用的功能，几乎每个节点都会对这些属性进行设置。而在物理系统中，系统会自动将节点的这些属性与 Box2D 中对应属性进行同步。</p><blockquote><p><strong>注意</strong>：</p><ol><li>Box2D 中只有旋转和位移，并没有缩放，所以如果设置节点的缩放属性时，会重新构建这个刚体依赖的全部碰撞体。一个有效避免这种情况发生的方式是将渲染的节点作为刚体节点的子节点，只对这个渲染节点作缩放，尽量避免对刚体节点进行直接缩放。</li><li>在物理系统每次迭代（物理系统是在 postUpdate 进行迭代的）的最后会把所有刚体信息同步到对应节点上去，而出于性能考虑，只有当开发者对刚体所在节点的相关属性进行显示设置时，节点的信息才会同步到刚体上，并且刚体只会监视他所在的节点，也就是说，如果修改了节点的父节点的旋转位移，是不会同步这些信息的。</li></ol></blockquote><h3 id="固定旋转" tabindex="-1">固定旋转 <a class="header-anchor" href="#固定旋转" aria-label="Permalink to &quot;固定旋转&quot;">​</a></h3><p><img src="`+h+'" alt="fix ratation"></p><p>做平台跳跃游戏时通常都不会希望主角的旋转属性也被加入到物理模拟中，因为这样会导致主角在移动过程中东倒西歪，这时可以设置刚体的 <code>fixedRotation</code> 为 true，固定旋转，代码示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.fixedRotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="开启碰撞监听" tabindex="-1">开启碰撞监听 <a class="header-anchor" href="#开启碰撞监听" aria-label="Permalink to &quot;开启碰撞监听&quot;">​</a></h3><p><img src="'+s+'" alt="contact"></p><p>只有开启了刚体的碰撞监听，刚体发生碰撞时才会回调到对应的组件上。代码示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.enabledContactListener </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="刚体类型" tabindex="-1">刚体类型 <a class="header-anchor" href="#刚体类型" aria-label="Permalink to &quot;刚体类型&quot;">​</a></h2><p><img src="'+p+`" alt="type"></p><p>Box2D 原本的刚体类型是三种：<strong>Static</strong>、<strong>Dynamic</strong>、<strong>Kinematic</strong>。在 Cocos Creator 中多添加了一个类型：<strong>Animated</strong>。</p><p>Animated 是从 Kinematic 类型衍生出来的，一般的刚体类型修改 <strong>旋转</strong> 或 <strong>位移</strong> 属性时，都是直接设置的属性，而 Animated 会根据当前旋转或位移属性，与目标旋转或位移属性计算出所需的速度，并且赋值到对应的移动或旋转速度上。</p><p>添加 Animated 类型主要是防止对刚体做动画时可能出现的奇怪现象，例如穿透。</p><table><thead><tr><th style="text-align:left;">刚体类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Static</strong></td><td style="text-align:left;">静态刚体，零质量，零速度，即不会受到重力或速度影响，但是可以设置他的位置来进行移动。该类型通常用于制作场景</td></tr><tr><td style="text-align:left;"><strong>Dynamic</strong></td><td style="text-align:left;">动态刚体，有质量，可以设置速度，会受到重力影响。 <br> 唯一可以通过 <code>applyForce</code> 和 <code>applyTorque</code> 等方法改版受力的刚体类型</td></tr><tr><td style="text-align:left;"><strong>Kinematic</strong></td><td style="text-align:left;">运动刚体，零质量，可以设置速度，不会受到重力的影响，但是可以设置速度来进行移动</td></tr><tr><td style="text-align:left;"><strong>Animated</strong></td><td style="text-align:left;">动画刚体，在上面已经提到过，从 Kinematic 衍生的类型，主要用于刚体与动画编辑结合使用</td></tr></tbody></table><p>通过代码可以获取或修改刚体的类型，代码示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RigidBody2D, ERigidBody2DType } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rigibodyType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rigidbody2D.type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rigidbody2D.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ERigidBody2DType.Animated</span></span></code></pre></div><p>2D 刚体的类型定义在枚举 <code>ERigidBody2DType</code> 内，请注意和 3D 物理的 <code>ERigidBodyType</code> 区分。</p><h3 id="碰撞响应" tabindex="-1">碰撞响应 <a class="header-anchor" href="#碰撞响应" aria-label="Permalink to &quot;碰撞响应&quot;">​</a></h3><p>不同类型的刚体之间，并非都可进行碰撞，其结果整理如下：</p><table><thead><tr><th style="text-align:left;">--</th><th style="text-align:left;">Static</th><th style="text-align:left;">Dynamic</th><th style="text-align:left;">Kinematic</th><th style="text-align:left;">Animated</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Static</strong></td><td style="text-align:left;"></td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;"><strong>Dynamic</strong></td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;"><strong>Kinematic</strong></td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;"><strong>Animated</strong></td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr></tbody></table><h2 id="刚体方法" tabindex="-1">刚体方法 <a class="header-anchor" href="#刚体方法" aria-label="Permalink to &quot;刚体方法&quot;">​</a></h2><h3 id="获取或转换旋转位移属性" tabindex="-1">获取或转换旋转位移属性 <a class="header-anchor" href="#获取或转换旋转位移属性" aria-label="Permalink to &quot;获取或转换旋转位移属性&quot;">​</a></h3><p>使用这些 API 来获取世界坐标系下的旋转和位移会比通过节点来获取更快，因为节点中还需要通过矩阵运算得到结果，而使用 API 是直接得到结果的。</p><h4 id="本地坐标与世界坐标转换" tabindex="-1">本地坐标与世界坐标转换 <a class="header-anchor" href="#本地坐标与世界坐标转换" aria-label="Permalink to &quot;本地坐标与世界坐标转换&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 世界坐标转换到本地坐标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> localPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldPoint);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldPoint, localPoint);</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地坐标转换到世界坐标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worldPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorldPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localPoint);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worldPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localPoint, worldPoint);</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地向量转换为世界向量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worldVector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorldVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localVector);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worldVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorldVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localVector, worldVector);</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 世界向量转换为本地向量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> localVector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldVector);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldVector, localVector);</span></span></code></pre></div><h3 id="获取刚体质心" tabindex="-1">获取刚体质心 <a class="header-anchor" href="#获取刚体质心" aria-label="Permalink to &quot;获取刚体质心&quot;">​</a></h3><p>当对一个刚体施加力的时候，一般会选择刚体的质心作为施加力的作用点，这样能保证力不会影响到旋转值。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取本地坐标系下刚体的质心</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> localCenter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalCenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者通过参数来接收返回值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localCenter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalCenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localCenter);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取世界坐标系下的刚体质心</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worldCenter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorldCenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者通过参数来接收返回值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worldCenter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorldCenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldCenter);</span></span></code></pre></div><h3 id="力与冲量" tabindex="-1">力与冲量 <a class="header-anchor" href="#力与冲量" aria-label="Permalink to &quot;力与冲量&quot;">​</a></h3><p>移动一个物体有两种方式：</p><ol><li>可以施加一个力或者冲量到这个物体上。力会随着时间慢慢修改物体的速度，而冲量会立即修改物体的速度。</li><li>直接修改物体的位置，只是这看起来不像真实的物理，你应该尽量去使用力或者冲量来移动刚体，这会减少可能带来的奇怪问题。</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 施加一个力到刚体上指定的点，这个点是世界坐标系下的一个点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyForce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(force, point);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者直接施加力到刚体的质心上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyForceToCenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(force);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 施加一个冲量到刚体上指定的点，这个点是世界坐标系下的一个点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyLinearImpulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(impulse, point);</span></span></code></pre></div><p>力与冲量也可以只对旋转轴产生影响，这样的力叫做扭矩。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 施加扭矩到刚体上，因为只影响旋转轴，所以不再需要指定一个点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyTorque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(torque);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 施加旋转轴上的冲量到刚体上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyAngularImpulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(impulse);</span></span></code></pre></div><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>如果要获取刚体在某一点上的速度时，可以通过 <code>getLinearVelocityFromWorldPoint</code> 来获取，比如当物体碰撞到一个平台时，需要根据物体碰撞点的速度来判断物体相对于平台是从上方碰撞的还是下方碰撞的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rigidbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLinearVelocityFromWorldPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(worldPoint);</span></span></code></pre></div><p>更多刚体的方法可以参考 <a href="./__APIDOC__/zh/class/RigidBody2D">Rigidbody2D API</a></p>`,71),r=[k];function o(g,c,y,E,b,F){return t(),a("div",null,r)}const C=i(d,[["render",o]]);export{A as __pageData,C as default};
