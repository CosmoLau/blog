import{_ as o,c as e,o as t,a4 as i}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/layout-node.K6Y2paW4.png",c="/docs/cocos/assets/horizontal-no-align.D_SxdZf-.png",r="/docs/cocos/assets/horizontal-resizemode.BCFFqDmu.png",d="/docs/cocos/assets/grid-layout.jY4GWfap.png",O=JSON.parse('{"title":"自动布局容器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/ui-system/components/engine/auto-layout.md","filePath":"zh/ui-system/components/engine/auto-layout.md","lastUpdated":1712305443000}'),n={name:"zh/ui-system/components/engine/auto-layout.md"},l=i('<h1 id="自动布局容器" tabindex="-1">自动布局容器 <a class="header-anchor" href="#自动布局容器" aria-label="Permalink to &quot;自动布局容器&quot;">​</a></h1><p>Layout（自动布局）组件可以挂载在任何节点上，将节点变成一个有自动布局功能的容器。所谓自动布局容器，就是能够自动将子节点按照一定规律排列，并可以根据节点内容的约束框总和调整自身尺寸的容器型节点。</p><p>接下来说到的布局类型，节点结构都如下图：</p><p><img src="'+a+'" alt="layout-node"></p><h2 id="布局类型" tabindex="-1">布局类型 <a class="header-anchor" href="#布局类型" aria-label="Permalink to &quot;布局类型&quot;">​</a></h2><p>自动布局组件有几种基本的布局模式，可以通过 <code>Type</code> 属性进行设置，包括以下几种。</p><h3 id="水平布局-horizontal" tabindex="-1">水平布局（Horizontal) <a class="header-anchor" href="#水平布局-horizontal" aria-label="Permalink to &quot;水平布局（Horizontal)&quot;">​</a></h3><p><img src="'+c+'" alt="horizontal-no-align"></p><p>Layout <code>Type</code> 设为 <code>Horizontal</code> 时，所有子节点都会自动横向排列，组件默认会修改节点在 y 轴上的位置或高度，如果子节点需要放置在 Layout 节点的约束框高度范围之外，可以取消勾选 <code>AutoAlignment</code>（如上图）。</p><p>水平排序下容易出现内容超出容器的情况，可以根据需要采取如下措施：</p><ul><li><p>如果容器要自适应上内容的尺寸，可以通过设置 <code>ResizeMode</code> 为 <code>Container</code>，该模式会根据子节点的宽度（<code>Width</code>）总和设置 Layout 节点的宽度（下图左）。</p></li><li><p>如果内容对象始终要保持在容器内，可以通过设置 <code>ResizeMode</code> 为 <code>Children</code>，该模式会将内容对象的尺寸限制在容器内（下图右）。</p></li><li><p>如果需要子节点在 y 轴向上对齐，可以在子节点上添加 Widget 组件，并开启 Top 或 Bottom 的对齐模式。</p></li></ul><p><img src="'+r+'" alt="horizontal-resizemode"></p><h4 id="水平排列方向-horizontal-direction" tabindex="-1">水平排列方向（Horizontal Direction） <a class="header-anchor" href="#水平排列方向-horizontal-direction" aria-label="Permalink to &quot;水平排列方向（Horizontal Direction）&quot;">​</a></h4><p>在水平布局下，可以通过 <code>HorizontalDirection</code> 设置水平朝向。朝向分为 <code>LEFT_TO_RIGHT</code> 和 <code>RIGHT_TO_LEFT</code> 两种，前者会按照节点在 <strong>层级管理器</strong> 中显示顺序从左到右排列；后者会按照节点显示从右到左排列。</p><h3 id="垂直布局-vertical" tabindex="-1">垂直布局（Vertical） <a class="header-anchor" href="#垂直布局-vertical" aria-label="Permalink to &quot;垂直布局（Vertical）&quot;">​</a></h3><p>垂直布局的布局方式和排列方向跟 <strong>水平布局</strong> 几乎一致，只是方向上的不同，这里就不再赘述。</p><h3 id="网格布局-grid" tabindex="-1">网格布局（Grid） <a class="header-anchor" href="#网格布局-grid" aria-label="Permalink to &quot;网格布局（Grid）&quot;">​</a></h3><p>Layout <code>Type</code> 设为 <code>GRID</code> 会开始网格布局。网格布局会在固定容器大小内，根据 <code>HorizontalDirection</code> 和 <code>VerticalDirection</code> 组合决定布局起点，根据 <code>StartAxis</code> 属性决定布局方向。</p><h4 id="网格排列方向-grid-direction" tabindex="-1">网格排列方向（Grid Direction） <a class="header-anchor" href="#网格排列方向-grid-direction" aria-label="Permalink to &quot;网格排列方向（Grid Direction）&quot;">​</a></h4><p>Layout 排列子节点时，是以子节点在 <strong>层级管理器</strong> 中显示顺序为基准，加上开始点和 <code>StartAxis</code> 属性设置的排列方向来排列的。</p><ul><li>开始轴向（Start Axis） <ul><li>可以设置 <code>HORIZONTAL</code> 或 <code>VERTICAL</code> 两种方向。前者会进行横向排列，后者是纵向排列。</li></ul></li><li>开始点 <ul><li>开始点是通过 <code>HorizontalDirection</code> 和 <code>VerticalDirection</code> 组合而成。</li><li>假设 HorizontalDirection 为 <code>LEFT_TO_RIGHT</code>，VerticalDirection 为 <code>TOP_TO_BOTTOM</code>，则开始点是 <strong>左上角</strong></li><li>假设 HorizontalDirection 为 <code>RIGHT_TO_LEFT</code>，VerticalDirection 为 <code>BOTTOM_TO_TOP</code>，则开始点是 <strong>右下角</strong></li></ul></li></ul><p>结合排列方向，举两个例子说明：</p><ul><li><p>如果当前设置的 HorizontalDirection 为 <code>LEFT_TO_RIGHT</code>，VerticalDirection 为 <code>TOP_TO_BOTTOM</code>，StartAxis 为 <code>HORIZONTAL</code>，则是告知组件要的排序方式是从容器的 <strong>左上角</strong> 开始按水平方向排列（下图左）。</p></li><li><p>如果当前设置的 HorizontalDirection 为 <code>RIGHT_TO_LEFT</code>，VerticalDirection 为 <code>BOTTOM_TO_TOP</code>，StartAxis 为 <code>VERTICAL</code>，则是告知组件要的排序方式是从容器的 <strong>右下角</strong> 开始按垂直方向排列（下图右）。</p><p><img src="'+d+'" alt="grid-layout"></p></li></ul><p>Grid 排序也有可能出现内容超出容器的情况，可以参考上文中的 <strong>水平布局</strong>，通过调整 <code>ResizeMode</code> 属性解决。</p><p>关于 Layout 组件的属性的详细说明，请参考 <a href="./../editor/layout">Layout 组件</a> 文档。</p>',25),s=[l];function p(_,h,u,T,g,m){return t(),e("div",null,s)}const y=o(n,[["render",p]]);export{O as __pageData,y as default};
