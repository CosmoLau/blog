import{_ as s,c as a,o as i,a5 as e}from"./chunks/framework.CqnjdYks.js";const t="/docs/cocos/assets/remote-bundle.hDiRYqGt.png",n="/docs/cocos/assets/details.Di39Oya6.png",u=JSON.parse('{"title":"缓存管理器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/asset/cache-manager.md","filePath":"zh/manual/asset/cache-manager.md"}'),l={name:"zh/manual/asset/cache-manager.md"},h=e('<h1 id="缓存管理器" tabindex="-1">缓存管理器 <a class="header-anchor" href="#缓存管理器" aria-label="Permalink to &quot;缓存管理器&quot;">​</a></h1><blockquote><p>文：Santy-Wang、Xunyi</p></blockquote><p>在 Web 平台，资源下载完成之后，缓存是由浏览器进行管理，而不是引擎。<br> 而在某些非 Web 平台，比如微信小游戏，这类平台具备文件系统，可以利用文件系统对一些远程资源进行缓存，但并没有实现资源的缓存机制。此时需要由引擎实现一套缓存机制用于管理从网络上下载下来的资源，包括缓存资源、清除缓存资源、查询缓存资源等功能。</p><p>从 v2.4 开始，Creator 在所有存在文件系统的平台上都提供了缓存管理器，以便对缓存进行增删改查操作，开发者可以通过 <code>assetManager.cacheManager</code> 进行访问。</p><h2 id="资源的下载、缓存及版本管理" tabindex="-1">资源的下载、缓存及版本管理 <a class="header-anchor" href="#资源的下载、缓存及版本管理" aria-label="Permalink to &quot;资源的下载、缓存及版本管理&quot;">​</a></h2><p>引擎下载资源的逻辑如下：</p><ol><li><p>判断资源是否在游戏包内，如果在则直接使用；</p></li><li><p>如果不在则查询资源是否在本地缓存中，如果在则直接使用；</p></li><li><p>如果不在则查询资源是否在临时目录中，如果在则直接使用（原生平台没有临时目录，跳过该步骤）；</p></li><li><p>如果不在就从远程服务器下载资源，资源下载到临时目录后直接使用（原生平台是将资源下载到缓存目录）；</p></li><li><p>后台缓慢地将临时目录中的资源保存到本地缓存目录中，以便再次访问时使用（原生平台跳过该步骤）；</p></li><li><p>当缓存空间占满后资源会保存失败，此时会使用 LRU 算法删除比较久远的资源（原生平台的缓存空间没有大小限制，跳过该步骤，开发者可以手动调用清理）。</p></li></ol><p>对小游戏平台来说，一旦缓存空间占满，所有需要下载的资源都无法保存，只能使用下载保存在临时目录中的资源。而当退出小游戏时，所有的临时目录都会被清理，再次运行游戏时，这些资源又会被再次下载，如此循环往复。</p><blockquote><p><strong>注意</strong>：缓存空间超出限制导致文件保存失败的问题不会在微信小游戏的 <strong>微信开发者工具</strong> 上出现，因为微信开发者工具没有限制缓存大小，所以测试缓存时需要在真实的微信环境中进行测试。</p></blockquote><p>当开启引擎的 <strong>md5Cache</strong> 功能后，文件的 URL 会随着文件内容的改变而改变，这样当游戏发布新版本后，旧版本的资源在缓存中就自然失效了，只能从服务器请求新的资源，也就达到了版本控制的效果。</p><h3 id="上传资源到远程服务器" tabindex="-1">上传资源到远程服务器 <a class="header-anchor" href="#上传资源到远程服务器" aria-label="Permalink to &quot;上传资源到远程服务器&quot;">​</a></h3><p>当包体过大时，需要将资源上传到远程服务器，请将资源所在的 Asset Bundle 配置为远程包。接下来我们以微信小游戏为例，来看一下具体的操作步骤：</p><ol><li><p>合理分配资源，将需要模块化管理的资源文件夹（例如 <code>resources</code> 文件夹）配置为 Asset Bundle，并勾选 <strong>配置为远程包</strong>，具体可参考文档 <a href="./bundle.html#配置方法">配置 Asset Bundle</a>。</p><p><img src="'+t+'" alt="bundle_is_remote"></p></li><li><p>如果主包需要配置为远程包，请在 <strong>构建发布</strong> 面板中勾选 <strong>配置主包为远程包</strong>。</p></li><li><p>在 <strong>构建发布</strong> 面板中勾选 <strong>MD5 Cache</strong>，设置 <strong>资源服务器地址</strong>，然后点击 <strong>构建</strong>。</p></li><li><p>构建完成后将发布包目录下的 <code>remote</code> 文件夹完整地上传到上一步填写的服务器上。</p></li><li><p>删除本地发布包目录下的 <code>remote</code> 文件夹。</p></li></ol><blockquote><p><strong>注意</strong>：微信小游戏在测试阶段时，开发者可能无法将项目部署到正式服务器，那就需要在本地服务器测试，请在微信开发者工具的菜单栏中打开 <strong>工具 -&gt; 详情 -&gt; 本地设置</strong> 页面，勾选 <strong>不校验安全域名、web-view（业务域名）、TLS 版本以及 HTTPS 证书</strong> 选项。</p><p><img src="'+n+`" alt="details"></p></blockquote><h3 id="查询缓存文件" tabindex="-1">查询缓存文件 <a class="header-anchor" href="#查询缓存文件" aria-label="Permalink to &quot;查询缓存文件&quot;">​</a></h3><p>缓存管理器提供了 <code>getCache</code> 接口以查询所有的缓存资源，开发者可以通过传入资源的原路径来查询缓存路径。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images/background/texture&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Texture2D, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cachePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assetManager.cacheManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texture.nativeUrl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cachePath);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="查询临时文件" tabindex="-1">查询临时文件 <a class="header-anchor" href="#查询临时文件" aria-label="Permalink to &quot;查询临时文件&quot;">​</a></h3><p>当资源下载到本地后，可能会以临时文件的形式存储在临时目录中。缓存管理器提供了 <code>tempFiles</code> 接口以查询所有下载到临时目录中的资源，开发者可以通过传入资源的原路径进行查询。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assetManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadRemote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://example.com/background.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tempPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assetManager.cacheManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTemp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texture.nativeUrl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tempPath);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="缓存资源" tabindex="-1">缓存资源 <a class="header-anchor" href="#缓存资源" aria-label="Permalink to &quot;缓存资源&quot;">​</a></h2><p>缓存管理器中提供了一些参数用于控制资源的缓存：</p><ul><li><p><code>cacheManager.cacheDir</code> —— 控制缓存资源的存储目录。</p></li><li><p><code>cacheManager.cacheInterval</code> —— 控制缓存单个资源的周期，默认 500ms 缓存一次。</p></li><li><p><code>cacheManager.cacheEnabled</code> —— 控制是否要缓存资源，默认为缓存。另外，开发者也可以通过指定可选参数 <code>cacheEnabled</code> 来覆盖全局设置，例如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assetManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadRemote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://example.com/background.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {cacheEnabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, callback);</span></span></code></pre></div></li></ul><h3 id="清除缓存资源" tabindex="-1">清除缓存资源 <a class="header-anchor" href="#清除缓存资源" aria-label="Permalink to &quot;清除缓存资源&quot;">​</a></h3><p>如果缓存资源超出限制，开发者需要手动清除资源，可以使用缓存管理器 <code>assetManager.cacheManager</code> 提供的 <code>removeCache</code>, <code>clearCache</code>, <code>clearLRU</code> 来清除缓存资源。</p><ul><li><p><code>clearCache</code> —— 清除缓存目录下的所有缓存资源，请慎重使用。</p></li><li><p><code>clearLRU</code> —— 清除缓存目录下比较久远的资源。小游戏平台会在缓存空间满了后自动调用 <code>clearLRU</code>。</p></li><li><p><code>removeCache</code> —— 清除单个缓存资源，使用时需要提供资源的原路径，例如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assetManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadRemote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://example.com/background.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assetManager.cacheManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texture.nativeUrl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><p>当开发者升级引擎版本后，留在本地的缓存资源还是之前旧版本引擎对应的资源，并不会自动清空。这可能会导致资源加载出错或渲染错误等问题。解决方案有以下两种：</p><ol><li>构建时在 <strong>构建发布</strong> 面板勾选 <strong>MD5 Cache</strong> 选项，这将确保使用最新版本的资源。</li><li>手动清空之前缓存的资源。 <ul><li>在 <strong>真机</strong> 上通过 <code>assetManager.cacheManager.clearCache()</code> 清空缓存。</li><li>微信小游戏在 <strong>微信开发者工具</strong> 中点击菜单栏的 <strong>工具 -&gt; 清除缓存 -&gt; 全部清除</strong> 来清空缓存。</li></ul></li></ol>`,28),p=[h];function r(k,o,c,d,g,E){return i(),a("div",null,p)}const m=s(l,[["render",r]]);export{u as __pageData,m as default};
