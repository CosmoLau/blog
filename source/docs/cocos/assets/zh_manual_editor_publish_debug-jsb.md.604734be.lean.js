import{_ as a,v as e,b as o,R as t}from"./chunks/framework.5ffcbaff.js";const s="/docs/cocos/assets/v8-android-debug.a0b15504.png",l="/docs/cocos/assets/v8-win32-debug.ebd7b02b.png",n="/docs/cocos/assets/xcode-brk-point-action.087f00ef.png",d="/docs/cocos/assets/xcode-brk-point-lldb.f20417b9.png",r="/docs/cocos/assets/as-brk-point-action.9de6002a.png",f=JSON.parse('{"title":"原生平台 JavaScript 调试","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/publish/debug-jsb.md","filePath":"zh/manual/editor/publish/debug-jsb.md"}'),i={name:"zh/manual/editor/publish/debug-jsb.md"},c=t('<h1 id="原生平台-javascript-调试" tabindex="-1">原生平台 JavaScript 调试 <a class="header-anchor" href="#原生平台-javascript-调试" aria-label="Permalink to &quot;原生平台 JavaScript 调试&quot;">​</a></h1><p>游戏发布到原生平台后，由于运行环境不同，可能会出现在浏览器预览时无法重现的 Bug，这时我们就必须直接在原生平台下进行调试。Cocos Creator 可以很方便地对原生平台中的 JavaScript 进行远程调试。</p><h2 id="ios-和-android-真机调试" tabindex="-1">iOS 和 Android 真机调试 <a class="header-anchor" href="#ios-和-android-真机调试" aria-label="Permalink to &quot;iOS 和 Android 真机调试&quot;">​</a></h2><p>如果游戏只有在真机上才能运行，那就必须用真机对打包后的游戏进行调试。调试步骤如下：</p><ul><li><p>确保 Android/iOS 设备与 Windows 或者 Mac 在同一个局域网中。注意在调试过程中请勿开启代理，否则可能导致无法正常调试。</p></li><li><p>在 Creator 的 <strong>构建发布</strong> 面板选择 Android/iOS 平台、Debug 模式，构建编译运行工程（iOS 平台建议通过 Xcode 连接真机进行编译运行）。</p></li><li><p>用 Chrome 浏览器打开地址：<code>devtools://devtools/bundled/js_app.html?v8only=true&amp;ws=设备的本地 IP:6086/00010002-0003-4004-8005-000600070008</code> 即可进行调试。</p><p><img src="'+s+'" alt="v8-android-debug"></p></li></ul><h2 id="windows-平台及-mac-平台调试" tabindex="-1">Windows 平台及 Mac 平台调试 <a class="header-anchor" href="#windows-平台及-mac-平台调试" aria-label="Permalink to &quot;Windows 平台及 Mac 平台调试&quot;">​</a></h2><p>在 Windows 平台及 Mac 平台下调试游戏，步骤与真机调试类似，将工程用 IDE 编译运行之后，此时便可进行调试。步骤如下：</p><ul><li><p>用 IDE 将打包好的工程编译并运行（Windows 平台请使用 Visual Studio，Mac 平台请使用 Xcode）</p></li><li><p>在游戏运行时打开 Chrome 浏览器，输入地址：<code>devtools://devtools/bundled/js_app.html?v8only=true&amp;ws=127.0.0.1:6086/00010002-0003-4004-8005-000600070008</code> 即可进行调试。</p><p><img src="'+l+'" alt=""></p></li></ul><h2 id="使用-lldb-查看当前的-js-调用栈" tabindex="-1">使用 <code>lldb</code> 查看当前的 JS 调用栈 <a class="header-anchor" href="#使用-lldb-查看当前的-js-调用栈" aria-label="Permalink to &quot;使用 `lldb` 查看当前的 JS 调用栈&quot;">​</a></h2><p>通过在 C++ 中断点我们能很便捷地看到 C++ 的调用栈，但并不能同时看到 JS 的调用栈，这个割裂的过程常常会破坏调试的体验。而 <code>lldb</code> 提供的功能支持在调试过程中进行很多的操作，包括查看调用栈。</p><p><strong>Xcode</strong> 和 <strong>Android Studio</strong> 都默认使用 <code>lldb</code> 作为调试器。详情可参考文档 <a href="https://lldb.llvm.org/use/tutorial.html" target="_blank" rel="noreferrer">LLDB 指南</a>。</p><h3 id="lldb-的全局配置" tabindex="-1"><code>lldb</code> 的全局配置 <a class="header-anchor" href="#lldb-的全局配置" aria-label="Permalink to &quot;`lldb` 的全局配置&quot;">​</a></h3><p><code>lldb</code> 在启动的时候会加载 <code>~/.lldbinit</code>，例如下面的配置：</p><p><code>~ % cat ~/.lldbinit</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">target stop-hook add </span></span>\n<span class="line"><span style="color:#A6ACCD;">po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span>\n<span class="line"><span style="color:#A6ACCD;">DONE</span></span></code></pre></div><p>设置了 <strong>每次断点</strong> 后的行为，执行以下代码输出 JS 调用栈的信息：</p><div class="language-lldb"><button title="Copy Code" class="copy"></button><span class="lang">lldb</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span></code></pre></div><p>关于 <code>target stop-hook</code> 的用法，详情可参考文档：<a href="https://lldb.llvm.org/use/map.html#examining-variables" target="_blank" rel="noreferrer">https://lldb.llvm.org/use/map.html#examining-variables</a></p><p>但这种方法也存在着明显的缺陷：会对 <strong>所有项目</strong> 生效，若其他项目不存在相应符号，就会导致出现报错。</p><h3 id="在-xcode-配置-lldb" tabindex="-1">在 Xcode 配置 <code>lldb</code> <a class="header-anchor" href="#在-xcode-配置-lldb" aria-label="Permalink to &quot;在 Xcode 配置 `lldb`&quot;">​</a></h3><h4 id="xcode-在断点中编辑-action-只对具体的断点触发" tabindex="-1">Xcode 在断点中编辑 action（只对具体的断点触发） <a class="header-anchor" href="#xcode-在断点中编辑-action-只对具体的断点触发" aria-label="Permalink to &quot;Xcode 在断点中编辑 action（只对具体的断点触发）&quot;">​</a></h4><p><img src="'+n+'" alt="xcode-brk-point-action"></p><p>在 <strong>Debugger Command</strong> 中输入命令：</p><div class="language-lldb"><button title="Copy Code" class="copy"></button><span class="lang">lldb</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span></code></pre></div><p>关于 <code>target stop-hook</code> 的用法，详情可参考文档：<a href="https://lldb.llvm.org/use/map.html#evaluating-expressions" target="_blank" rel="noreferrer">https://lldb.llvm.org/use/map.html#evaluating-expressions</a></p><h4 id="设置-stop-hook" tabindex="-1">设置 stop hook <a class="header-anchor" href="#设置-stop-hook" aria-label="Permalink to &quot;设置 stop hook&quot;">​</a></h4><p>断点触发后，需要在 lldb console 中增加回调。可以针对具体的断点进行更多的调用：</p><p><img src="'+d+'" alt="xcode-brk-point-lldb"></p><p>同上，也可以执行以下代码查看调用栈：</p><div class="language-lldb"><button title="Copy Code" class="copy"></button><span class="lang">lldb</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">po se::ScriptEngine::getInstance()-&gt;getCurrentStackTrace()</span></span></code></pre></div><h3 id="在-android-studio-配置-lldb" tabindex="-1">在 Android Studio 配置 <code>lldb</code> <a class="header-anchor" href="#在-android-studio-配置-lldb" aria-label="Permalink to &quot;在 Android Studio 配置 `lldb`&quot;">​</a></h3><p>在 <strong>Android Studio</strong> 的 <strong>Run -&gt; Debug Configuration -&gt; Debugger</strong> 界面进行类似的配置：</p><p><img src="'+r+'" alt="as-brk-point-action"></p><p>Android Studio 也提供了和 Xcode 类似的 <code>lldb console</code>。</p><h2 id="进阶调试指南" tabindex="-1">进阶调试指南 <a class="header-anchor" href="#进阶调试指南" aria-label="Permalink to &quot;进阶调试指南&quot;">​</a></h2><p>如果需要在 Release 模式下调试，或者需要调试定制后的原生引擎，可参考更详细的 <a href="./../../advanced-topics/JSB2.0-learning.html">JSB 2.0 使用指南：远程调试与 Profile</a>。</p>',36),p=[c];function b(h,g,u,m,v,k){return e(),o("div",null,p)}const S=a(i,[["render",b]]);export{f as __pageData,S as default};
