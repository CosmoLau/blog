import{_ as s,c as i,o as e,a4 as a}from"./chunks/framework.uQk9_EO2.js";const t="/docs/cocos/assets/pageview-inspector.Dv2OKHWO.png",n="/docs/cocos/assets/pageview-event.AUL282r3.png",m=JSON.parse('{"title":"PageView Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/pageview.md","filePath":"en/ui-system/components/editor/pageview.md","lastUpdated":1712305443000}'),h={name:"en/ui-system/components/editor/pageview.md"},l=a('<h1 id="pageview-component-reference" tabindex="-1">PageView Component Reference <a class="header-anchor" href="#pageview-component-reference" aria-label="Permalink to &quot;PageView Component Reference&quot;">​</a></h1><p>The <strong>PageView</strong> component is derived from <strong>ScrollView</strong>, the difference is that when scrolls it automatically snaps to next page of content.</p><p><img src="'+t+'" alt="pageview-inspector"></p><p>Click the <strong>Add Component</strong> button at the bottom of the <strong>Inspector</strong> panel and select <strong>UI/PageView</strong> to add the <strong>PageView</strong> component to the node.</p><p>To use <code>PageView</code>, please refer to the <a href="./__APIDOC__/en/class/PageView">PageView API</a> documentation and the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/15.pageview" target="_blank" rel="noreferrer">PageView</a> scene of the test-cases-3d project.</p><h2 id="pageview-properties" tabindex="-1">PageView Properties <a class="header-anchor" href="#pageview-properties" aria-label="Permalink to &quot;PageView Properties&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Function Description</th></tr></thead><tbody><tr><td><em>AutoPageTurningThreshold</em></td><td>Auto page turning velocity threshold. When users swipe the <strong>PageView</strong> quickly, it will calculate a velocity based on the scroll distance and time, if the calculated velocity is larger than the threshold, then it will trigger page turning</td></tr><tr><td><em>Bounce Duration</em></td><td>The elapse time of bouncing back. The value range is 0 ~ 10, and when the value is 0, it will bounce back immediately</td></tr><tr><td><em>Brake</em></td><td>It determines how quickly the content stop moving. A value of 1 will stop the movement immediately. A value of 0 will never stop the movement until it reaches to the boundary of page view</td></tr><tr><td><em>Content</em></td><td>It is a node reference that is used to contain the contents of the page view</td></tr><tr><td><em>Direction</em></td><td>The page view direction</td></tr><tr><td><em>Elastic</em></td><td>When elastic is set, the content will be bounce back when move out of boundary</td></tr><tr><td><em>Indicator</em></td><td>The Page View Indicator, please refer to <strong>PageViewIndicator Setting</strong> below for details</td></tr><tr><td><em>Inertia</em></td><td>When inertia is set, the content will continue to move for a little while when touch ended</td></tr><tr><td><em>PageEvents</em></td><td>A list of the page view&#39;s events callback</td></tr><tr><td><em>PageTurningEventTiming</em></td><td>Change the timing for sending the <strong>PAGE_TURNING</strong> event</td></tr><tr><td><em>CancelInnerEvents</em></td><td>If it&#39;s set to true, the scroll behavior will cancel touch events on inner content nodes. It&#39;s set to true by default</td></tr><tr><td><em>ScrollThreshold</em></td><td>This value will be multiplied by the distance between two pages, to get the threshold distance. If user scroll distance is larger than this threshold distance, the page will turn immediately</td></tr><tr><td><em>SizeMode</em></td><td>Specify the size type of each page in PageView, including <strong>Unified</strong> and <strong>Free</strong></td></tr></tbody></table><h3 id="pageviewindicator-setting" tabindex="-1">PageViewIndicator Setting <a class="header-anchor" href="#pageviewindicator-setting" aria-label="Permalink to &quot;PageViewIndicator Setting&quot;">​</a></h3><p><strong>PageViewIndicator</strong> is optional, the component is used to display the number of pages and mark the current page.</p><p>The association can be done by dragging a node with a <strong>PageViewIndicator</strong> component into the <strong>Indicator</strong> property of the <strong>PageView</strong> component in the <strong>Hierarchy</strong> panel.</p><h3 id="pageview-event" tabindex="-1">PageView Event <a class="header-anchor" href="#pageview-event" aria-label="Permalink to &quot;PageView Event&quot;">​</a></h3><p><img src="'+n+`" alt="pageview-event"></p><table><thead><tr><th>Property</th><th>Function Description</th></tr></thead><tbody><tr><td><em>Target</em></td><td>Node with script component</td></tr><tr><td><em>Component</em></td><td>Script component name</td></tr><tr><td><em>Handler</em></td><td>Specifies a callback function that will be called when the <strong>PageView</strong> event occurs</td></tr><tr><td><em>CustomEventData</em></td><td>The user specifies an arbitrary string as the last parameter of the event callback</td></tr></tbody></table><p>The <strong>PageView</strong> event callback has two parameters, the first parameter is the <strong>PageView</strong> itself, the second parameter is the event type of the <strong>PageView</strong>.</p><h2 id="detailed-explanation" tabindex="-1">Detailed Explanation <a class="header-anchor" href="#detailed-explanation" aria-label="Permalink to &quot;Detailed Explanation&quot;">​</a></h2><p>The <strong>PageView</strong> component must have the specified content node to work. Each child node in content is a separate page, and the size of each page is the size of the <strong>PageView</strong> node. If the node size is larger than the content size, it may result in an incomplete scroll. Under the <strong>PageView</strong> component there is a node object, which combines with <code>ScrollThreshold</code> to determine whether the current sliding distance is such that the page can be turned. The operation effect is divided into two kinds:</p><ul><li><strong>Slow sliding</strong> - by dragging the page in the view to reach the specified <code>ScrollThreshold</code> value (the value is the percentage of page size), after the release will automatically slide to the next page.</li><li><strong>Fast sliding</strong> - quickly drag in one direction, automatically slide to the next page. Only slide up to one page at a time.</li></ul><h2 id="add-callback-via-script-code" tabindex="-1">Add callback via script code <a class="header-anchor" href="#add-callback-via-script-code" aria-label="Permalink to &quot;Add callback via script code&quot;">​</a></h2><h3 id="method-one" tabindex="-1">Method one <a class="header-anchor" href="#method-one" aria-label="Permalink to &quot;Method one&quot;">​</a></h3><p>The event callback added by this method is the same as the event callback added by the editor, all added by code. First you need to construct a <code>EventHandler</code> object, and then set the corresponding <code>target</code>, <code>component</code>, <code>handler</code> and <code>customEventData</code> parameters.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Event, Node, PageView, EventHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pageChangedEventHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This Node is the node to which your event processing code component belongs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageChangedEventHandler.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the script class name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageChangedEventHandler.component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageChangedEventHandler.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageChangedEventHandler.customEventData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foobar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PageView);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page.clickEvents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pageChangedEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The event here is a Touch Event object, and you can get the send node of the event by event.target</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pageview</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PageView);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customEventData); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="method-two" tabindex="-1">Method two <a class="header-anchor" href="#method-two" aria-label="Permalink to &quot;Method two&quot;">​</a></h3><p>By <code>pageView.node.on(&#39;page-turning&#39;, ...)</code> way to add.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Suppose we add event handling callbacks to the onLoad method of a component and perform event handling in the callback function:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Event, Node, PageView } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pageView.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;page-turning&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pageView</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The parameter of the callback is the PageView component. Note that events registered this way cannot pass customEventData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,24),p=[l];function r(o,d,k,c,g,E){return e(),i("div",null,p)}const F=s(h,[["render",r]]);export{m as __pageData,F as default};
