import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.uQk9_EO2.js";const n="/docs/cocos/assets/videoplayer.kCN23jEa.png",e="/docs/cocos/assets/videoplayer-remote.D5XW9dRN.png",l="/docs/cocos/assets/ENABLE_TRANSPARENT_CANVAS.4ASegSeY.png",h="/docs/cocos/assets/stayonbuttom.BhDj3JyH.png",p="/docs/cocos/assets/videoplayer-stayonbuttom.DnpBYzAG.png",u=JSON.parse('{"title":"VideoPlayer 组件参考","description":"","frontmatter":{},"headers":[],"relativePath":"zh/ui-system/components/editor/videoplayer.md","filePath":"zh/ui-system/components/editor/videoplayer.md","lastUpdated":1712305443000}'),k={name:"zh/ui-system/components/editor/videoplayer.md"},r=t('<h1 id="videoplayer-组件参考" tabindex="-1">VideoPlayer 组件参考 <a class="header-anchor" href="#videoplayer-组件参考" aria-label="Permalink to &quot;VideoPlayer 组件参考&quot;">​</a></h1><p>VideoPlayer 是一种视频播放组件，可通过该组件播放本地和远程视频。</p><p><strong>播放本地视频</strong>：</p><p><img src="'+n+'" alt="video-player"></p><p><strong>播放远程视频</strong>：</p><p><img src="'+e+`" alt="video-player-remote"></p><p>点击 <strong>属性检查器</strong> 下面的 <strong>添加组件</strong> 按钮，然后从 <strong>UI 组件</strong> 中选择 <strong>VideoPlayer</strong>，即可添加 VideoPlayer 组件到节点上。</p><p>VideoPlayer 的脚本接口请参考 <a href="./__APIDOC__/zh/class/VideoPlayer">VideoPlayer API</a>。</p><h2 id="videoplayer-属性" tabindex="-1">VideoPlayer 属性 <a class="header-anchor" href="#videoplayer-属性" aria-label="Permalink to &quot;VideoPlayer 属性&quot;">​</a></h2><table><thead><tr><th>属性</th><th>功能说明</th></tr></thead><tbody><tr><td>Resource Type</td><td>视频来源的类型，目前支持本地（LOCAL）视频和远程（REMOTE）视频 URL</td></tr><tr><td>Remote URL</td><td>当 Resource Type 为 REMOTE 时显示的字段，填入远程视频的 URL</td></tr><tr><td>Clip</td><td>当 Resource Type 为 LOCAL 时显示的字段，拖拽本地视频的资源到此处来使用</td></tr><tr><td>Play On Awake</td><td>视频加载后是否自动开始播放？</td></tr><tr><td>Current Time</td><td>指定从哪个时间点开始播放视频</td></tr><tr><td>Volume</td><td>视频的音量（0.0 ~ 1.0）</td></tr><tr><td>Mute</td><td>是否静音视频。静音时设置音量为 0，取消静音时恢复原来的音量</td></tr><tr><td>Keep Aspect Ratio</td><td>是否保持视频原来的宽高比</td></tr><tr><td>Full Screen On Awake</td><td>是否全屏播放视频</td></tr><tr><td>Stay On Bottom</td><td>永远在游戏视图最底层（该属性仅在 Web 平台生效）</td></tr><tr><td>Video Player Event</td><td>视频播放回调函数，该回调函数会在特定情况被触发，比如播放中，暂时，停止和完成播放。详情见下方的 <strong>VideoPlayer 事件</strong> 章节或者 <a href="./__APIDOC__/zh/class/VideoPlayer?id=videoPlayerEvent">VideoPlayerEvent API</a>。</td></tr></tbody></table><blockquote><p><strong>注意</strong>：在 <strong>Video Player Event</strong> 属性的 <strong>Node</strong> 中，应该填入的是一个挂载有用户脚本组件的节点，在用户脚本中便可以根据用户需要使用相关的 VideoPlayer 事件。</p></blockquote><h2 id="videoplayer-事件" tabindex="-1">VideoPlayer 事件 <a class="header-anchor" href="#videoplayer-事件" aria-label="Permalink to &quot;VideoPlayer 事件&quot;">​</a></h2><h3 id="videoplayerevent-事件" tabindex="-1">VideoPlayerEvent 事件 <a class="header-anchor" href="#videoplayerevent-事件" aria-label="Permalink to &quot;VideoPlayerEvent 事件&quot;">​</a></h3><table><thead><tr><th>属性</th><th>功能说明</th></tr></thead><tbody><tr><td>target</td><td>带有脚本组件的节点。</td></tr><tr><td>component</td><td>脚本组件名称。</td></tr><tr><td>handler</td><td>指定一个回调函数，当视频开始播放后，暂停时或者结束时都会调用该函数，该函数会传一个事件类型参数进来。</td></tr><tr><td>customEventData</td><td>用户指定任意的字符串作为事件回调的最后一个参数传入。</td></tr></tbody></table><p>详情可参考 API 文档 <a href="./__APIDOC__/zh/class/EventHandler">Component.EventHandler</a></p><h3 id="事件回调参数" tabindex="-1">事件回调参数 <a class="header-anchor" href="#事件回调参数" aria-label="Permalink to &quot;事件回调参数&quot;">​</a></h3><table><thead><tr><th>名称</th><th>功能说明</th></tr></thead><tbody><tr><td>PLAYING</td><td>表示视频正在播放中。</td></tr><tr><td>PAUSED</td><td>表示视频暂停播放。</td></tr><tr><td>STOPPED</td><td>表示视频已经停止播放。</td></tr><tr><td>COMPLETED</td><td>表示视频播放完成。</td></tr><tr><td>META_LOADED</td><td>表示视频的元信息已加载完成，你可以调用 getDuration 来获取视频总时长。</td></tr><tr><td>READY_TO_PLAY</td><td>表示视频准备好了，可以开始播放了。</td></tr><tr><td>ERROR</td><td>处理视频时触发的错误</td></tr><tr><td>CLICKED</td><td>表示视频被用户点击了。（只支持 Web 平台）</td></tr></tbody></table><blockquote><p><strong>注意</strong>：在 iOS 平台的全屏模式下，点击视频无法发送 CLICKED 事件。如果需要让 iOS 全屏播放并正确接受 CLICKED 事件，可以使用 Widget 组件把视频控件撑满。</p></blockquote><p>详情可参考 <a href="./__APIDOC__/zh/class/VideoPlayer?id=videoPlayerEvent">VideoPlayer 事件</a>。</p><p>使用方式可参考范例 <strong>VideoPlayer</strong>（<a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/21.video-player" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.8/assets/cases/ui/21.video-player" target="_blank" rel="noreferrer">Gitee</a>）。</p><h2 id="详细说明" tabindex="-1">详细说明 <a class="header-anchor" href="#详细说明" aria-label="Permalink to &quot;详细说明&quot;">​</a></h2><p>VideoPlayer 支持的视频格式为 <strong>mp4</strong>。</p><h3 id="通过脚本代码添加回调" tabindex="-1">通过脚本代码添加回调 <a class="header-anchor" href="#通过脚本代码添加回调" aria-label="Permalink to &quot;通过脚本代码添加回调&quot;">​</a></h3><h4 id="方法一" tabindex="-1">方法一 <a class="header-anchor" href="#方法一" aria-label="Permalink to &quot;方法一&quot;">​</a></h4><p>这种方法添加的事件回调和使用编辑器添加的事件回调是一样的。通过代码添加，首先你需要构造一个 <code>Component.EventHandler</code> 对象，然后设置好对应的 <code>target</code>、<code>component</code>、<code>handler</code> 和 <code>customEventData</code> 参数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, VideoPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    videoPlayer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Component.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTarget; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个对象是你的事件处理代码组件所属的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyComponent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;callback&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eventHandler.customEventData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.videoplayer.videoPlayerEvent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eventHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 注意参数的顺序和类型是固定的</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">videoplayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里的 videoplayer 是一个 VideoPlayer 组件对象实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里的 eventType === VideoPlayer.EventType enum 里面的值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里的 customEventData 参数就等于你之前设置的 &quot;foobar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="方法二" tabindex="-1">方法二 <a class="header-anchor" href="#方法二" aria-label="Permalink to &quot;方法二&quot;">​</a></h4><p>通过 <code>videoplayer.node.on(VideoPlayer.EventType.READY_TO_PLAY, ...)</code> 的方式来添加</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//假设我们在一个组件的 onLoad 方法里面添加事件处理回调，在 callback 函数中进行事件处理:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, VideoPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;VideoPlayerCtrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VideoPlayerCtrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    videoPlayer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.videoplayer.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer.EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">READY_TO_PLAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">videoplayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里的 videoplayer 表示的是 VideoPlayer 组件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 对 videoplayer 进行你想要的操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 另外，注意这种方式注册的事件，也无法传递 customEventData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同样的，用户也可以注册 <code>meta-loaded</code>、<code>clicked</code>、<code>playing</code> 等事件，这些事件的回调函数的参数与 <code>ready-to-play</code> 的参数一致。</p><blockquote><p><strong>注意</strong>：由于 VideoPlayer 是特殊的组件，所以它无法监听节点上的 <strong>触摸</strong> 和 <strong>鼠标</strong> 事件。</p></blockquote><p>关于完整的 VideoPlayer 的事件列表，可以参考 <a href="./__APIDOC__/zh/class/VideoPlayer">VideoPlayer API</a>。</p><h2 id="如何实现-ui-在-videoplayer-上渲染" tabindex="-1">如何实现 UI 在 VideoPlayer 上渲染 <a class="header-anchor" href="#如何实现-ui-在-videoplayer-上渲染" aria-label="Permalink to &quot;如何实现 UI 在 VideoPlayer 上渲染&quot;">​</a></h2><p>可通过以下两个步骤实现 UI 在 VideoPlayer 上显示：</p><ol><li><p>确保 <strong>项目设置 -&gt; Macro Config</strong> 中的 <strong>ENABLE_TRANSPARENT_CANVAS</strong> 为勾选状态（设置 Canvas 背景支持 alpha 通道）</p><p><img src="`+l+'" alt="ENABLE_TRANSPARENT_CANVAS"></p></li><li><p>可在 <strong>属性检查器</strong> 中勾选 VideoPlayer 组件上的 <strong>stayOnBottom</strong> 属性。</p><p><img src="'+h+'" alt="stayonbuttom"></p></li></ol><blockquote><p><strong>注意</strong>：</p><ol><li>该功能仅支持 <strong>Web</strong> 平台。</li><li>各个浏览器具体效果无法保证一致，跟浏览器是否支持与限制有关。</li><li>开启 <strong>stayOnBottom</strong> 后，将无法正常监听 <code>VideoPlayerEvent</code> 中的 <code>clicked</code> 事件。</li></ol></blockquote><p>详情可参考范例 <strong>VideoPlayer</strong>（<a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/21.video-player" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.8/assets/cases/ui/21.video-player" target="_blank" rel="noreferrer">Gitee</a>）。</p><p>最终效果如下图所示：</p><p><img src="'+p+`" alt="videoplayer-stayOnButton"></p><h2 id="支持平台" tabindex="-1">支持平台 <a class="header-anchor" href="#支持平台" aria-label="Permalink to &quot;支持平台&quot;">​</a></h2><p>由于不同平台对于 VideoPlayer 组件的授权、API、控制方式都不同，还没有形成统一的标准，所以目前只支持 Web、iOS、Android、微信小游戏、Facebook Instant Games 以及 Google Play Instant 平台。</p><h3 id="关于自动播放的问题" tabindex="-1">关于自动播放的问题 <a class="header-anchor" href="#关于自动播放的问题" aria-label="Permalink to &quot;关于自动播放的问题&quot;">​</a></h3><p>一些移动端的浏览器或 <strong>WebView</strong> 不允许自动播放视频，用户需要在触摸事件中手动播放视频。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Node, Component, find, VideoPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;VideoPlayerCtrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VideoPlayerCtrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VideoPlayer)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    videoPlayer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Canvas&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Node.EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOUCH_START</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.playVideo, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    playVideo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.videoplayer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,44),d=[r];function o(E,y,c,g,F,C){return a(),i("div",null,d)}const v=s(k,[["render",o]]);export{u as __pageData,v as default};
