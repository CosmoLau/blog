import{_ as s,c as i,o as e,a4 as t}from"./chunks/framework.uQk9_EO2.js";const u=JSON.parse('{"title":"tsconfig.json","description":"","frontmatter":{},"headers":[],"relativePath":"en/scripting/tsconfig.md","filePath":"en/scripting/tsconfig.md","lastUpdated":1712305443000}'),o={name:"en/scripting/tsconfig.md"},n=t(`<h1 id="tsconfig-json" tabindex="-1"><code>tsconfig.json</code> <a class="header-anchor" href="#tsconfig-json" aria-label="Permalink to &quot;\`tsconfig.json\`&quot;">â€‹</a></h1><p>The <strong>majority</strong> of compilation options in <code>tsconfig.json</code> in the project do not affect the compilation of <strong>TypeScript</strong>.</p><p>Therefore, some options need to configured carefully to make the IDE&#39;s inspection function consistent with the compilation behavior in <strong>Cocos Creator</strong>.</p><p>The following options should <strong>not</strong> be modified explicitly:</p><ul><li><code>compilerOptions.target</code></li><li><code>compilerOptions.module</code></li></ul><p>For example, if <code>tsconfig.json</code> is set to:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Then the following script code will not cause an error in the IDE (which uses <code>tsc</code> as a checker), because <code>compilerOptions.module</code> is set to <code>cjs</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path-to-module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>However, the implied <code>compilerOptions.module</code> in Creator is <code>es2015</code>, therefore it may prompt errors such as &quot;require undefined&quot; at runtime.</p><p>The following script code is legal for Creator, but the IDE may report an error. This is because <code>compilerOptions.target</code> is set to <code>es5</code>, while <code>Set</code> was introduced in ES6.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mySet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><hr><p>It is also possible to freely modify options.</p><p>For example, when it is needed to prohibit the use of implicit <code>any</code> in all TypeScript scripts in your project.</p><p>Set <code>compilerOptions.noImplicitAny</code> to <code>true</code> in <code>tsconfig.json</code>, as using an IDE (such as Visual Studio Code), the corresponding error prompt will be received.</p><hr><p>For most projects, some options in <code>tsconfig</code> are fixed. For example, <code>compilerOptions.target</code>, <code>compilerOptions.module</code> and <strong>Cocos Creator</strong> type declarations, file location, etc.</p><p>Due to the good design of <code>tsc</code>, the <code>extends</code> option allows <code>tsconfig.json</code> to be cascadable. <strong>Cocos Creator</strong> supports this, therefore, the fixed <code>tsconfig</code> option is placed under <code>{project path}/tmp/tsconfig.cocos.json</code> and managed by <strong>Cocos Creator</strong>.</p><p>Therefore, <code>tsconfig.json</code> under the project root path can be configured as follows to share these fixed options:</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./tmp/tsconfig.cocos.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* Custom tsconfig.json options*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Fortunately, Creator will automatically generate such a <code>tsconfig.json</code> file when creating a new project.</p>`,22),a=[n];function p(c,l,h,r,d,k){return e(),i("div",null,a)}const E=s(o,[["render",p]]);export{u as __pageData,E as default};
