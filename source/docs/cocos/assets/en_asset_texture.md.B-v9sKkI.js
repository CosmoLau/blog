import{_ as e,c as t,o as s,a4 as a}from"./chunks/framework.uQk9_EO2.js";const i="/docs/cocos/assets/set-texture.CeYUXTvX.png",r="/docs/cocos/assets/sub-texture.gaAAxUrJ.png",o="/docs/cocos/assets/sub-texture-pro.B6HglwRA.png",n="/docs/cocos/assets/filter-mode.Cax1demh.png",p="/docs/cocos/assets/generate-mipmaps.D7fmi63Q.png",l="/docs/cocos/assets/repeat.BWh7GTel.png",d="/docs/cocos/assets/clamp-to-edge.BbuvbbPl.png",h="/docs/cocos/assets/mirrored-repeat.D6zd0YUR.png",g="/docs/cocos/assets/use-texture2d.D_lSXzpj.png",w=JSON.parse('{"title":"Texture Assets","description":"","frontmatter":{},"headers":[],"relativePath":"en/asset/texture.md","filePath":"en/asset/texture.md","lastUpdated":1712305443000}'),c={name:"en/asset/texture.md"},m=a('<h1 id="texture-assets" tabindex="-1">Texture Assets <a class="header-anchor" href="#texture-assets" aria-label="Permalink to &quot;Texture Assets&quot;">​</a></h1><p><strong>Texture</strong> assets are assets used for procedural sampling, such as <strong>textures on models</strong> and the <strong>UI on Sprites</strong>. When the UI or model are rendered, the corresponding texture is sampled, then filled on the model grid, plus a series of processing such as lighting to render the entire scene.</p><p><strong>Texture assets</strong> can be generated from <strong>ImageAsset</strong>. Some common image formats, including <code>.png</code>, <code>.jpeg</code>, etc. can be used in <strong>ImageAsset</strong>.</p><h2 id="texture2d" tabindex="-1">Texture2D <a class="header-anchor" href="#texture2d" aria-label="Permalink to &quot;Texture2D&quot;">​</a></h2><p>Texture2D is a type of texture mapping asset, usually used for rendering 3D models, such as reflection mapping in model materials, ambient light mask mapping, etc.</p><p>After you <a href="./asset-workflow">import</a> the image asset into Creator, you can set it to <strong>texture</strong> type in <strong>Inspector</strong> panel, the texture type is the Texture2D asset.</p><p><img src="'+i+'" alt="Texture2D"></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p>When importing an image asset, the editor sets it to <strong>texture</strong> type by default, and one or more sub-assets will be created automatically under the imported image asset, click the triangle icon to the left of the image asset in <strong>Asset Manager</strong> to expand it to see all the sub-assets, as shown in the following figure:</p><p><img src="'+r+'" alt="sub-texture"></p><p>When the generated Texture2D sub-asset is selected, the relevant properties can be set in the <strong>Inspector</strong> panel.</p><p><img src="'+o+'" alt="Texture2D subresource"></p><table><thead><tr><th style="text-align:left;">Properties</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Anisotropy</strong></td><td style="text-align:left;">Anisotropy value, applying the maximum threshold of the anisotropy filtering algorithm</td></tr><tr><td style="text-align:left;"><strong>Filter Mode</strong></td><td style="text-align:left;">Filter mode, options are <strong>Nearest (None)</strong>, <strong>Bilinear</strong>, <strong>Bilinear with mipmaps</strong>, <strong>Trilinear with mipmaps</strong> and <strong>Advanced</strong>, please refer to <strong>Filter mode</strong> below for more information</td></tr><tr><td style="text-align:left;"><strong>Wrap Mode</strong></td><td style="text-align:left;">Set the addressing mode, the options are <strong>Repeat</strong>, <strong>Clamp</strong>, <strong>Mirror</strong>, and <strong>Advanced</strong> <br> When selecting <strong>Advanced</strong>, set the texture addressing mode in the S(U)/T(V) direction, that is, the pixel-to-texture mapping mode in the S(U) or T(V) direction, see <strong>Addressing Mode</strong> below for more information</td></tr></tbody></table><blockquote><p><strong>Note</strong>: Since the default Wrap Mode may show black edges when rendering transparent edges of images, the Creator automatically adjusts the Wrap Mode S and Wrap Mode T properties of texture asset to <strong>clamp-to-edge</strong> automatically when setting the image asset type to <strong>sprite-frame</strong>. Developers can change this if they have special needs.</p></blockquote><p>Next we give a brief explanation of some of the properties.</p><h3 id="filter-mode" tabindex="-1">Filter Mode <a class="header-anchor" href="#filter-mode" aria-label="Permalink to &quot;Filter Mode&quot;">​</a></h3><p><img src="'+n+'" alt="filter mode"></p><p>When the original size of Texture2D does not match the size of the texture image mapped to the screen, different texture filtering methods for texture cell-to-pixel mapping will produce different results.</p><p>The <strong>Min Filter</strong> and <strong>Mag Filter</strong> properties in Texture2D are used to set the texture filtering method to be used when scaling down or scaling up the mapping, respectively.</p><ol><li><p>Neareast</p><p>Neareast filtering is the <strong>default</strong> texture filtering method used. The color value of the texture cell whose center position is closest to the sample point is used as the color value of that sample point, without considering the influence of other adjacent pixels. <br> It should be noted that the use of proximity filtering may result in uneven edges and more pronounced jaggedness.</p></li><li><p>Linear</p><p>Linear filtering uses a 2 x 2 matrix of texture cells nearest to the sampling point for sampling. The average of the four texture cell color values is taken as the color of the sampling point, and the color value transition between pixels will be smoother. <br> Note that using the linear filtering method may result in black edges and, in the case of pixel-based games, may result in blurring.</p></li></ol><h3 id="generate-mipmaps" tabindex="-1">Generate Mipmaps <a class="header-anchor" href="#generate-mipmaps" aria-label="Permalink to &quot;Generate Mipmaps&quot;">​</a></h3><p>In order to speed up 3D scene rendering and reduce image jaggies, the mapping is processed as a sequence of pre-computed and optimized images, called a mipmap. mipmap is a scaled-down detailed replica of the original image at each level of the mipmap, and when the mapping is scaled down or only needs to be viewed from a distance, the mipmap is converted to the appropriate level.</p><p><img src="'+p+'" alt="generate-mipmaps"></p><p>When the <strong>Generate Mipmaps</strong> property is checked or <strong>Filter Mode</strong> for texture is selected as <strong>Bilinear with mipmaps</strong> or <strong>Trilinear with mipmaps</strong>, the mipmap is automatically generated by interpolating between two similar layers. mipmap mapping is smaller than the original image when rendering distant objects, which improves the cache hit rate during graphics card sampling, so the rendering speed is improved. At the same time, the mipmap mapping is less precise, which reduces moiré and reduces jaggedness on the screen. In addition, mipmap takes up about a third of the memory space because of the extra mipmap generation.</p><p>Texture2D can dynamically select the range of the mipmap at runtime. After setting the mipmap range, only the mipmaps within the range can be used. This allows us to save bandwidth by skipping low levels and avoid using too many high levels to reduce the effect.</p><p>The mipmap level range for Texture2D can be set as follows.</p><div class="language-Javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">texture.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMipRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(minLevel, maxLevel);</span></span></code></pre></div><p>Where <code>minLevel</code> specifies the minimum limit and <code>maxLevel</code> specifies the maximum limit.</p><blockquote><p><strong>Note</strong>.</p><ol><li>The limit cannot exceed the existing mipmap level. This method is not available for WebGL and GLES2 backends.</li></ol></blockquote><h3 id="wrap-mode" tabindex="-1">Wrap Mode <a class="header-anchor" href="#wrap-mode" aria-label="Permalink to &quot;Wrap Mode&quot;">​</a></h3><p>In general, the texture coordinates in the horizontal (U) and vertical (V) axes are in the range <code>[0, 1]</code>. When the texture coordinates in the passed vertex data are out of the range <code>[0, 1]</code>, different addressing modes can be used to control how the out-of-range texture coordinates are mapped.</p><p>The <strong>Wrap Mode S</strong> and <strong>Wrap Mode T</strong> properties in Texture2D are used to set the addressing mode of the texture in the UV direction, respectively.</p><ol><li><p>Repeat</p><p>Repeat addressing mode is the default texture addressing mode used. For texture coordinates outside the <code>[0, 1]</code> range, the contents of the texture coordinates inside <code>[0, 1]</code> are repeated, i.e. the texture map is repeatedly placed outside the texture coordinate range.</p><blockquote><p><strong>Note</strong>: On WebGL 1.0, the <code>repeat</code> addressing mode is disabled when the texture width and height are not powers of two. The runtime will automatically switch it to <code>clamp-to-edge</code> addressing mode, which will disable properties like <code>tilingOffset</code> of the material.</p></blockquote><p>When the <strong>Wrap Mode S</strong> and <strong>Wrap Mode T</strong> properties of Texture2D are both set to <code>repeat</code>, the effect looks like this.</p><p><img src="'+l+'" alt="repeat"></p></li><li><p>Clamp-to-edge</p><p>Constrain the texture coordinates to be between 0 and 1, copying the texture coordinates of <code>[0, 1]</code> only once. For the part outside of <code>[0, 1]</code>, the texture coordinate content of the edge will be used to extend, producing an effect similar to the edge being stretched.</p><p>When both properties are set to <code>clamp-to-edge</code>, the effect looks like this.</p><p><img src="'+d+'" alt="clamp-to-edge"></p></li><li><p>Mirrored-repeat</p><p>Similar to repeat-addressing mode, except that the mapping is mirrored and repeated.</p><p>When both properties are set to <code>mirrored-repeat</code>, the effect looks like this.</p><p><img src="'+h+'" alt="mirrored-repeat"></p></li></ol><h2 id="use-texture2d" tabindex="-1">Use Texture2D <a class="header-anchor" href="#use-texture2d" aria-label="Permalink to &quot;Use Texture2D&quot;">​</a></h2><p>Texture2D is a very widely used asset, and its use in Creator consists of using it in the editor and getting it dynamically.</p><ul><li><p>In the editor&#39;s <strong>Inspector</strong> panel, any property marked as Texture2D type can be used by dragging and dropping a Texture2D asset into the property box. For example, to set a Texture2D type asset for a material asset.</p><p><img src="'+g+`" alt="mirrored-repeat"></p><blockquote><p><strong>Note</strong>: If <code>USE TEXTURE</code> is not defined in the material, there is no such property.</p></blockquote></li><li><p>To use it dynamically, you need to get the ImageAsset first, and then instantiate the Texture2D asset based on the ImageAsset you got.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testAssets/image/texture&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Texture2D, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">texture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Texture2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spriteFrame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpriteFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spriteFrame.texture </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> texture;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sprite).spriteFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spriteFrame;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>For more details, please refer to <a href="./dynamic-load-resources">Asset Loading</a>。</p></li></ul>`,36),u=[m];function k(f,x,y,b,E,T){return s(),t("div",null,u)}const F=e(c,[["render",k]]);export{w as __pageData,F as default};
