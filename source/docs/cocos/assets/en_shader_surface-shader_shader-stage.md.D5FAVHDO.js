import{_ as s,c as a,o as e,a4 as t}from"./chunks/framework.uQk9_EO2.js";const f=JSON.parse('{"title":"Shader Stage","description":"","frontmatter":{},"headers":[],"relativePath":"en/shader/surface-shader/shader-stage.md","filePath":"en/shader/surface-shader/shader-stage.md","lastUpdated":1712305443000}'),i={name:"en/shader/surface-shader/shader-stage.md"},n=t(`<h1 id="shader-stage" tabindex="-1">Shader Stage <a class="header-anchor" href="#shader-stage" aria-label="Permalink to &quot;Shader Stage&quot;">â€‹</a></h1><p>Rendering is accomplished by different shaders. Some for processing vertices, some for processing pixels, and some for general computing.</p><p>In the Surface Shader architecture, for better readability and maintainability, different shader stages have a conventional code identifier, as shown in the table below.</p><table><thead><tr><th>Shader Stage</th><th>Corresponding Code Identifier</th></tr></thead><tbody><tr><td>Vertex Shader</td><td>vs</td></tr><tr><td>Fragment Shader</td><td>fs</td></tr><tr><td>Computer Shader</td><td>cs</td></tr></tbody></table><p>You can find many files named <code>xxxx-vs</code> or <code>xxxx-fs</code> in the built-in shader and chunk files.</p><p>In the effect and chunk files, there are also many code snippets defined like <code>CCProgram xxx-vs %{}%</code> and <code>CCProgram xxx-fs %{}%</code>.</p><p>For example.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CCProgram standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span></code></pre></div><p>When writing your shaders, it is best to follow this rule to maintain the readability and maintainability of the shader code.</p>`,9),r=[n];function d(h,l,p,o,c,k){return e(),a("div",null,r)}const E=s(i,[["render",d]]);export{f as __pageData,E as default};
