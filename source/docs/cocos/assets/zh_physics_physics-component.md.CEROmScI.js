import{_ as e,c as s,o as a,a4 as t}from"./chunks/framework.uQk9_EO2.js";const f=JSON.parse('{"title":"物理组件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/physics/physics-component.md","filePath":"zh/physics/physics-component.md","lastUpdated":1712305443000}'),p={name:"zh/physics/physics-component.md"},o=t('<h1 id="物理组件" tabindex="-1">物理组件 <a class="header-anchor" href="#物理组件" aria-label="Permalink to &quot;物理组件&quot;">​</a></h1><p>Cocos Creator 目前为用户提供的物理组件分为以下几种：</p><ul><li><p><a href="./physics-collider">碰撞组件</a></p><p>碰撞组件用于定义碰撞体形状。可在编辑器环境下查看其形状，运行时不可见。其形状可以根据需求设置，无需和对象网格完全相同。</p></li><li><p><a href="./physics-rigidbody">刚体组件</a></p><p>刚体是组成物理世界的基本对象，它可以使游戏对象的运动方式受物理控制。</p></li><li><p><a href="./physics-constantForce">恒力组件</a></p><p>恒力组件是一个工具组件，依赖于刚体，会在每帧对一个刚体施加给定的力和扭矩。</p></li><li><p><a href="./physics-constraint">约束组件</a></p><p>约束组件依赖于刚体组件，可将某个对象的位置、方向或比例约束到其他对象。</p></li></ul>',3),c=[o];function i(r,n,h,_,l,d){return a(),s("div",null,c)}const y=e(p,[["render",i]]);export{f as __pageData,y as default};
