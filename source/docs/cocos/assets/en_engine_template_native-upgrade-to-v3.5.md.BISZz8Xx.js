import{_ as a,c as s,o as e,a4 as i}from"./chunks/framework.uQk9_EO2.js";const u=JSON.parse('{"title":"v3.5 Built project upgrade Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/engine/template/native-upgrade-to-v3.5.md","filePath":"en/engine/template/native-upgrade-to-v3.5.md","lastUpdated":1712305443000}'),n={name:"en/engine/template/native-upgrade-to-v3.5.md"},t=i(`<h1 id="v3-5-built-project-upgrade-guide" tabindex="-1">v3.5 Built project upgrade Guide <a class="header-anchor" href="#v3-5-built-project-upgrade-guide" aria-label="Permalink to &quot;v3.5 Built project upgrade Guide&quot;">​</a></h1><p>Since v3.5, the &#39;appdelegate&#39; of MAC and windows platforms has been moved into the internal implementation of the engine, and can be compatible with the usage of previous versions by overloading &#39;appdelegate&#39; <code>game.cpp</code> has also been adjusted, and existing projects need to be rebuilt and upgraded.</p><h2 id="engineering-upgrade" tabindex="-1">Engineering Upgrade <a class="header-anchor" href="#engineering-upgrade" aria-label="Permalink to &quot;Engineering Upgrade&quot;">​</a></h2><p>Check whether the native/engine directory exists in the project directory. If it exists, you need to delete the folder and make a backup before deleting it (if this directory exists, it will not be updated automatically when you rebuild); if it does not exist, you can build it directly.</p><h3 id="custom-code-migration-methods" tabindex="-1">Custom code migration methods <a class="header-anchor" href="#custom-code-migration-methods" aria-label="Permalink to &quot;Custom code migration methods&quot;">​</a></h3><p>The code previously added in AppDelegate can be upgraded by customizing the platform and AppDelegate below; the custom game.cpp can be upgraded by replacing the interface.</p><h4 id="platform-and-appdelegate-customization-methods" tabindex="-1">Platform and AppDelegate customization methods <a class="header-anchor" href="#platform-and-appdelegate-customization-methods" aria-label="Permalink to &quot;Platform and AppDelegate customization methods&quot;">​</a></h4><p>Take <strong>Mac</strong> as an example:</p><ol><li>Custom AppDelegate(Reference file name: MyAppdelegate.h, MyAppdelegate.mm)</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@interface MyAppDelegate : NSObject&lt;AppDelegate&gt;</span></span>
<span class="line"><span>    // Define the methods that need to be rewritten</span></span>
<span class="line"><span>    - (void)applicationWillResignActive:(UIApplication *)application;</span></span>
<span class="line"><span>@end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@implementation MyAppDelegate</span></span>
<span class="line"><span>- (void)applicationWillResignActive:(UIApplication *)application {</span></span>
<span class="line"><span>    // Note: Calling methods of the parent class</span></span>
<span class="line"><span>    [super applicationWillResignActive:application]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@end</span></span></code></pre></div><ol start="2"><li>Customized platforms(Reference file name: CustomMacPlatform.h)</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#include &quot;platform/BasePlatform.h&quot;</span></span>
<span class="line"><span>#include &quot;MyAppDelegate.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CustomMacPlatform : public MacPlatform {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>   // Rewrite the initialization method of the platform</span></span>
<span class="line"><span>   int32_t init() override {</span></span>
<span class="line"><span>       // Calling the methods of the parent class</span></span>
<span class="line"><span>       return MacPlatform::init();</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   // Here you enter the message loop of oc until the program exits</span></span>
<span class="line"><span>   int32_t run(int argc, const char** argv) {</span></span>
<span class="line"><span>        id delegate = [[MyAppDelegate alloc] init];</span></span>
<span class="line"><span>        NSApplication.sharedApplication.delegate = delegate;</span></span>
<span class="line"><span>        return NSApplicationMain(argc, argv);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="3"><li>Loading custom platforms(Reference file name: main.mm)</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#include &quot;CustomMacPlatform.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main(int argc, const char * argv[]) {</span></span>
<span class="line"><span>    CustomMacPlatform platform; </span></span>
<span class="line"><span>    if (platform.init()) {</span></span>
<span class="line"><span>        return -1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return platform.run(argc, (const char**)argv); </span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="game-cpp-migration-mode" tabindex="-1">game.cpp Migration mode <a class="header-anchor" href="#game-cpp-migration-mode" aria-label="Permalink to &quot;game.cpp Migration mode&quot;">​</a></h4><ul><li>Set js encryption secret key: jsb_set_xxtea_key -&gt; Set <code>_xxteaKey</code> member variable; ; or call <code>setXXTeaKey</code></li><li>Setup debugging: jsb_enable_debugger -&gt; Change the value of <code>_debuggerInfo</code>, or call <code>setDebugIpAndPort</code></li><li>Setting exception callbacks: setExceptionCallback -&gt; Override the <code>handleException</code> interface</li><li>Run custom scripts: jsb_run_script -&gt; call <code>runScript</code></li><li>You can add events to be listened to by using <code>engine</code>, -&gt; <code>getEngine()-&gt;addEventCallback(WINDOW_OSEVENT, eventCb);</code></li><li>Customized games <code>CustomGame</code>, Need to register to engine <code>CC_REGISTER_APPLICATION(CustomGame)</code> for loading</li><li><code>game</code> Inherited from <code>cc::BaseGame</code>, and <code>cc::BaseGame</code> inherits from <code>CocosApplication</code>,so that partial implementations can be rewritten to add custom logic.</li></ul><h3 id="the-modification-of-native-files" tabindex="-1">The modification of Native Files <a class="header-anchor" href="#the-modification-of-native-files" aria-label="Permalink to &quot;The modification of Native Files&quot;">​</a></h3><ul><li>Replace the header file path: #include &quot;cocos/platform/Application.h&quot; —&gt; #include &quot;application/ApplicationManager.h&quot;</li><li>Change of usage: cc::Application::getInstance()-&gt;getScheduler() -&gt; CC_CURRENT_ENGINE()-&gt;getScheduler()</li><li>If the code uses custom jsb: <code>native_ptr_to_seval</code> changed to <code>nativevalue_to_se</code></li></ul><h3 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-label="Permalink to &quot;Android&quot;">​</a></h3><h4 id="java" tabindex="-1">JAVA <a class="header-anchor" href="#java" aria-label="Permalink to &quot;JAVA&quot;">​</a></h4><ul><li><p>Delete <code>onCreate</code> in the following files: game/AppActivity.java, game/InstantActivity.java</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Workaround in https://stackoverflow.com/questions/16283079/re-launch-of-activity-on-home-button-but-only-the-first-time/16447508</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTaskRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Android launched another instance of the root activity into an existing task</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  so just quietly finish and go away, dropping the user back into the activity</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  at the top of the stack (ie: the last state of this task)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Don&#39;t need to finish it again since it&#39;s finished in super.onCreate .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>app/AndroidManifest.xml</p><ul><li>delete code in the <code>application</code> tag: <code>android:taskAffinity=&quot;&quot;</code></li><li>add code in the <code>application</code> tag: <code>android:exported=&quot;true&quot;</code></li></ul></li><li><p>app/build.gradle</p><ul><li>modify code:</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;\${RES_PATH}/assets&quot; -&gt; &quot;\${RES_PATH}/data&quot;</span></span></code></pre></div></li></ul><h4 id="cmakelists-txt" tabindex="-1">CMakeLists.txt <a class="header-anchor" href="#cmakelists-txt" aria-label="Permalink to &quot;CMakeLists.txt&quot;">​</a></h4><ul><li><p>android/CMakeLists.txt</p><ul><li><p>LIB_NAME changed to CC_LIB_NAME</p></li><li><p>PROJ_SOURCES changed to CC_PROJ_SOURCES</p></li><li><p>add code: set(CC_PROJECT_DIR \${CMAKE_CURRENT_LIST_DIR})</p></li><li><p>add code: set(CC_COMMON_SOURCES)</p></li><li><p>add code: set(CC_ALL_SOURCES)</p></li><li><p>delete code:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/Game.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/Game.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJ_SOURCES}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-Wl,--whole-archive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cocos2d_jni </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Wl,--no-whole-archive&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cocos2d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>add code:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc_android_before_target(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_ALL_SOURCES}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add user dependent library AAA here. target_link_libraries(\${CC_LIB_NAME} AAA)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add user defined file xxx/include here. target_include_directories(\${CC_LIB_NAME} PRIVATE \${CMAKE_CURRENT_LIST_DIR}/../common/Classes/xxx/include)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc_android_after_target(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul></li><li><p>common/CMakeLists.txt</p><ul><li><p>cocos2d-x-lite/ changed to engine/native/</p></li><li><p>Add code at the end of the file</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(APPEND CC_COMMON_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Classes/Game.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Classes/Game.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul></li></ul>`,23),l=[t];function p(o,d,c,h,r,g){return e(),s("div",null,l)}const m=a(n,[["render",p]]);export{u as __pageData,m as default};
