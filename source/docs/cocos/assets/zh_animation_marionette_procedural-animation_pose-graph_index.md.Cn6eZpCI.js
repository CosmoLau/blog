import{_ as t,a}from"./chunks/output.xMC3-F2s.js";import{_ as e,c as o,o as r,a4 as d}from"./chunks/framework.uQk9_EO2.js";const f=JSON.parse('{"title":"姿态图（实验性）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/animation/marionette/procedural-animation/pose-graph/index.md","filePath":"zh/animation/marionette/procedural-animation/pose-graph/index.md","lastUpdated":1712305443000}'),p={name:"zh/animation/marionette/procedural-animation/pose-graph/index.md"},n=d('<h1 id="姿态图-实验性" tabindex="-1">姿态图（实验性） <a class="header-anchor" href="#姿态图-实验性" aria-label="Permalink to &quot;姿态图（实验性）&quot;">​</a></h1><p><strong>姿态图</strong> 是表达了姿态的产生和转变的结点图，是实现程序式动画的核心构件。</p><p>姿态图依附在动画图的其它构件中：</p><ul><li><p>状态机中，每个 <a href="./../../state-machine/procedural-pose-state">程序式姿态</a>（状态）包含一张姿态图。</p></li><li><p>每个 <a href="./../pose-stash/">姿态暂存</a> 中包含一张姿态图。</p></li></ul><p>本节将讲述姿态图的结构。</p><p>在开始了解程序式动画之前，我们建议您阅读和 <a href="./../../../">Marionette 动画系统</a> 和动画图相关的内容。</p><h2 id="值及类型" tabindex="-1">值及类型 <a class="header-anchor" href="#值及类型" aria-label="Permalink to &quot;值及类型&quot;">​</a></h2><p>广泛来说，姿态图描述了值的流动。每个值都有类型，姿态图支持的值的类型如下：</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>姿态对象</td><td>角色姿态。</td></tr><tr><td>浮点数</td><td>浮点数值。</td></tr><tr><td>整数</td><td>整数值。</td></tr><tr><td>三维向量</td><td>三维向量。</td></tr><tr><td>四元数</td><td>四元数。</td></tr></tbody></table><p>其中，姿态对象无法凭空产生和指定，仅由姿态结点产生（见下文）。</p><h2 id="结点" tabindex="-1">结点 <a class="header-anchor" href="#结点" aria-label="Permalink to &quot;结点&quot;">​</a></h2><p><img src="'+t+'" alt="nodes-type.png"></p><p>（姿态图）<strong>结点</strong> 描述了一项操作。结点上可能存在零或多项 <strong>输入</strong>，也可能存在零或多项 <strong>输出</strong>。有些结点的输入数量是不固定的且可以删除。目前，所有结点的输出数量都是固定的且不可删除。</p><blockquote><p>姿态图的节点（Pose Node）是姿态图中用于处理程序式动画的节点，并非引擎的节点（Node）。</p></blockquote><p>输入和输出都关联着类型。当结点存在某类型的输入时，表示该结点可从该输入处接受该类型的值；当结点存在某类型的输出时，表示该结点将产出该类型的值到该输出处。在求值时，结点将它输入的值作以运算，并产出结果值到输出上。</p><p>结点输出可以连接到另一结点的 <strong>同类型</strong> 输入，表示求值时，将其输出的值传递给另一结点的作为输入。有时候也称这个行为为 <strong>绑定</strong>。</p><blockquote><p>注意，这样的连接是单向的——无法将输入连接到输出，这是没有意义的。</p></blockquote><p>一个结点的输出可以连接到多个结点的输入上。但存在例外：姿态输出仅可以连接至一个结点。</p><blockquote><p>若需要在多处引用一个姿态，请考虑使用 <a href="./../pose-stash/">姿态暂存</a>。</p></blockquote><p>姿态图中存在以下几类结点：</p><table><thead><tr><th>结点分类</th><th>含义</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>姿态图输出结点</td><td>作为整张姿态图的输出姿态。</td><td>一个姿态输入</td><td>无</td></tr><tr><td>姿态结点</td><td>输出姿态对象。</td><td>零或多个</td><td>一个姿态输出</td></tr><tr><td>变量获取结点</td><td>获取指定的变量并输出</td><td>无</td><td>一个输出，类型为变量的类型</td></tr></tbody></table><p>您可以参考 <a href="./pose-nodes/node-operation">姿态图节点视图</a> 来查看如何可视化的操作姿态图节点。</p><h3 id="姿态图输出结点" tabindex="-1">姿态图输出结点 <a class="header-anchor" href="#姿态图输出结点" aria-label="Permalink to &quot;姿态图输出结点&quot;">​</a></h3><p><img src="'+a+'" alt="output.png"></p><p><strong>姿态图输出结点</strong> 是一种特殊的结点，代表整张姿态图的输出姿态。它内置于姿态图中，不可删除和创建。</p><p>姿态图输出结点有且仅有一项姿态输入。当有结点连接到该姿态输入时，输入的姿态成为姿态图的产出姿态。</p><blockquote><p>若姿态图输出结点未被连接，姿态图产出的姿态为默认姿态。</p></blockquote><p>姿态图输出结点没有输出。</p><h3 id="姿态结点" tabindex="-1">姿态结点 <a class="header-anchor" href="#姿态结点" aria-label="Permalink to &quot;姿态结点&quot;">​</a></h3><p><strong>姿态结点</strong> 是指所有输出姿态对象的结点。目前，所有姿态结点都只产生一项姿态输出。但姿态结点可根据结点本身的情况存在零或多项任意类型的输入。</p><p><a href="./pose-nodes/">姿态结点</a> 中列举了所有类型的姿态结点。</p><h3 id="变量获取结点" tabindex="-1">变量获取结点 <a class="header-anchor" href="#变量获取结点" aria-label="Permalink to &quot;变量获取结点&quot;">​</a></h3><p><strong>变量获取结点</strong> 获取指定的动画图变量并输出其值。该类结点没有输入，并只有一项输出，输出的类型即是变量的类型。</p><p>变量获取结点不可获取触发器变量。</p>',34),s=[n];function i(h,l,c,u,_,m){return r(),o("div",null,s)}const q=e(p,[["render",i]]);export{f as __pageData,q as default};
