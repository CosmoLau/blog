import{_ as e,c as t,o as i,a4 as r}from"./chunks/framework.uQk9_EO2.js";const m=JSON.parse('{"title":"Custom Render Pipelines(Deprecated)","description":"","frontmatter":{},"headers":[],"relativePath":"en/render-pipeline/user-pipeline.md","filePath":"en/render-pipeline/user-pipeline.md","lastUpdated":1712305443000}'),n={name:"en/render-pipeline/user-pipeline.md"},d=r('<h1 id="custom-render-pipelines-deprecated" tabindex="-1">Custom Render Pipelines(Deprecated) <a class="header-anchor" href="#custom-render-pipelines-deprecated" aria-label="Permalink to &quot;Custom Render Pipelines(Deprecated)&quot;">​</a></h1><p>To create a custom render pipeline, first create a new RenderPipeline asset in the <strong>Assets</strong> panel, then create a RenderPipeline script, and then select the corresponding RenderPipeline script in the Pipeline asset to edit the corresponding properties.</p><p>RenderFlow and RenderStage are created and edited in the same way. In the created Pipeline script, add properties and make them editable in the <strong>Inspector</strong> panel just like any other user script, but note that it is not an option to drag and drop entities in the scene, as the RenderPipeline is not bound to a specific scene.</p><h2 id="properties-and-methods-in-renderpipeline" tabindex="-1">Properties and methods in RenderPipeline <a class="header-anchor" href="#properties-and-methods-in-renderpipeline" aria-label="Permalink to &quot;Properties and methods in RenderPipeline&quot;">​</a></h2><ul><li><p><code>flows</code>: The RenderFlow contained in the RenderPipeline.</p></li><li><p><code>renderTextures</code>: the RenderTextures that can be created when the RenderPipeline is started.</p><ul><li><code>name</code>: the name of the RenderTexture, which can be obtained by the <code>getRenderTexture</code> function of the RenderPipeline after creation.</li><li><code>type</code>: the type of the RenderTexture.</li><li><code>viewType</code>: the corresponding TextureView type of the RenderTexture.</li><li><code>usage</code>: the binding type of the RenderTexture, used to determine whether it is <code>color</code> or <code>depth_stencil</code>.</li><li><code>formate</code>: the channel format of the RenderTexture.</li><li><code>width</code>: width of the RenderTexture, -1 means the width of the window.</li><li><code>height</code>: height of the RenderTexture, -1 means the height of the window.</li></ul></li><li><p><code>framebuffers</code>: the FrameBuffer that can be created when RenderPipeline starts.</p><ul><li><code>name</code>: the name of the FrameBuffer, it can be retrieved by the <code>getFrameBuffer</code> function of RenderPipeline after creation.</li><li><code>renderPass</code>: the ID of the RenderPass configured in the RenderPipeline.</li><li><code>colorViews</code>: TextureView bound to the ColorAttachment, specifying the RenderTexture configured in the RenderPipeline.</li><li><code>depthStencilView</code>: TextureView bound to DepthStencilAttachment. specifies the RenderTexture configured in the RenderPipeline.</li></ul></li><li><p><code>renderPasses</code>: the RenderPasses that can be created when the RenderPipeline is started.</p><ul><li><code>index</code>: ID of the RenderPass, which can be obtained by the <code>getRenderPass</code> function of the RenderPipeline.</li><li><code>colorAttachments</code>: the description of the ColorAttachment, the operation of the ColorAttachment when drawing the FrameBuffer.</li><li><code>depthStencilAttachment</code>: the description of the DepthStencilAttachment, the operation of the DepthStencilAttachment when drawing the FrameBuffer.</li></ul></li><li><p><code>getTextureView</code> (name: string), <code>getRenderTexture</code> (name: string): get the RenderTexture configured in renderTextures.</p></li><li><p><code>getFrameBuffer</code> (name: string): get the FrameBuffer configured in <code>framebuffers</code>.</p></li><li><p><code>getRenderPass</code> (stage: number): get the RenderPass configured in renderPasses.</p></li><li><p><code>initialize</code> (info: IRenderPipelineInfo): initialize function for creating a RenderPipeline by script, the RenderPipeline must be initialized before it can be used.</p></li><li><p><code>activate</code> (root: Root): initialization function used when loading a RenderPipeline through an asset.</p></li><li><p><code>render</code> (view: RenderView): logic for rendering the scene.</p></li><li><p><code>updateUBOs</code> (view: RenderView): update the global UniformBuffer.</p></li><li><p><code>sceneCulling</code> (view: RenderView): scene culling, renderable objects are saved in <code>_renderObjects</code> after culling.</p></li></ul><h2 id="properties-and-methods-in-renderflow" tabindex="-1">Properties and methods in RenderFlow <a class="header-anchor" href="#properties-and-methods-in-renderflow" aria-label="Permalink to &quot;Properties and methods in RenderFlow&quot;">​</a></h2><ul><li><code>name</code>: the name of the RenderFlow.</li><li><code>priority</code>: the order of execution of the RenderFlow in the RenderPipeline.</li><li><code>type</code>: the type of the RenderFlow. <ul><li><code>SCENE</code>: used to draw the scene, this type will be executed for each camera.</li><li><code>POSTPROCESS</code>: post-processing, this type is specified separately for each camera.</li><li><code>UI</code>: used to draw the UI.</li></ul></li><li><code>stages</code>: RenderStage included in RenderFlow.</li></ul><h2 id="properties-and-methods-in-renderstage" tabindex="-1">Properties and methods in RenderStage <a class="header-anchor" href="#properties-and-methods-in-renderstage" aria-label="Permalink to &quot;Properties and methods in RenderStage&quot;">​</a></h2><ul><li><code>name</code>: the name of the RenderStage.</li><li><code>priority</code>: the order of execution of the RenderStage in the RenderFlow.</li><li><code>frameBuffer</code>: the FrameBuffer that the RenderStage will draw to, should be set to the FrameBuffer configured in the RenderPipeline, or set to <code>window</code> to indicate that the default FrameBuffer is used.</li><li><code>renderQueues</code>: render queue, used to control the rendering order of objects. <ul><li><code>isTransparent</code>: marks whether the render queue is semi-transparent.</li><li><code>sortMode</code>: <br><code>FRONT_TO_BACK</code>: sort from front to back; <br><code>BACK_TO_FRONT</code>: sort from back to front.</li><li><code>stages</code>: specifies which passes in the render queue render material, should be specified as the <code>phase</code> in the <code>pass</code>.</li><li><code>sortRenderQueue()</code>: sort the render queue.</li><li><code>executeCommandBuffer</code> (view: RenderView): execute the render command.</li></ul></li></ul>',9),o=[d];function a(c,l,s,h,p,u){return i(),t("div",null,o)}const R=e(n,[["render",a]]);export{m as __pageData,R as default};
