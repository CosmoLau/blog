import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"v3.5 已构建工程升级指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh/engine/template/native-upgrade-to-v3.5.md","filePath":"zh/engine/template/native-upgrade-to-v3.5.md","lastUpdated":1712305443000}'),e={name:"zh/engine/template/native-upgrade-to-v3.5.md"},p=n(`<h1 id="v3-5-已构建工程升级指南" tabindex="-1">v3.5 已构建工程升级指南 <a class="header-anchor" href="#v3-5-已构建工程升级指南" aria-label="Permalink to &quot;v3.5 已构建工程升级指南&quot;">​</a></h1><p>从 v3.5 开始，Mac 和 Windows 平台的 <code>AppDelegate</code> 已移入引擎内部实现，可以通过重载 <code>AppDelegate</code> 的方式来兼容之前版本的用法；<code>game.cpp</code> 也进行了调整，已有工程需要重新构建进行升级。</p><h2 id="工程升级" tabindex="-1">工程升级 <a class="header-anchor" href="#工程升级" aria-label="Permalink to &quot;工程升级&quot;">​</a></h2><p>检查工程目录下 native/engine 目录是否存在。如果存在，需要删除文件夹，删除前需要做好备份（这个目录如果存在，重新构建时不会自动更新）；不存在，则直接构建即可。</p><h2 id="自定义代码迁移方法" tabindex="-1">自定义代码迁移方法 <a class="header-anchor" href="#自定义代码迁移方法" aria-label="Permalink to &quot;自定义代码迁移方法&quot;">​</a></h2><p>之前在 AppDelegate 添加的代码，可以通过下文定制平台和 AppDelegate 进行升级；自定义的 game.cpp 可以通过接口更替即可升级。</p><h3 id="平台与-appdelegate-的定制方法" tabindex="-1">平台与 AppDelegate 的定制方法 <a class="header-anchor" href="#平台与-appdelegate-的定制方法" aria-label="Permalink to &quot;平台与 AppDelegate 的定制方法&quot;">​</a></h3><p>以 <strong>Mac</strong> 为例：</p><p>1、自定义AppDelegate（参考文件名：MyAppdelegate.h，MyAppdelegate.mm）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@interface MyAppDelegate : NSObject&lt;AppDelegate&gt;</span></span>
<span class="line"><span>    // 定义需要重写的方法</span></span>
<span class="line"><span>    - (void)applicationWillResignActive:(UIApplication *)application;</span></span>
<span class="line"><span>@end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@implementation MyAppDelegate</span></span>
<span class="line"><span>- (void)applicationWillResignActive:(UIApplication *)application {</span></span>
<span class="line"><span>    // 注意：调用父类的方法</span></span>
<span class="line"><span>    [super applicationWillResignActive:application]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@end</span></span></code></pre></div><p>2、自定义平台（参考文件名：CustomMacPlatform.h）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#include &quot;platform/BasePlatform.h&quot;</span></span>
<span class="line"><span>#include &quot;MyAppDelegate.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CustomMacPlatform : public MacPlatform {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>   // 重写平台初始化方法</span></span>
<span class="line"><span>   int32_t init() override {</span></span>
<span class="line"><span>       // 调用父类的方法</span></span>
<span class="line"><span>       return MacPlatform::init();</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   // 这里进入 oc 的消息循环，直到程序退出</span></span>
<span class="line"><span>   int32_t run(int argc, const char** argv) {</span></span>
<span class="line"><span>        id delegate = [[MyAppDelegate alloc] init];</span></span>
<span class="line"><span>        NSApplication.sharedApplication.delegate = delegate;</span></span>
<span class="line"><span>        return NSApplicationMain(argc, argv);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>3、加载自定义平台（参考文件名：main.mm）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#include &quot;CustomMacPlatform.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main(int argc, const char * argv[]) {</span></span>
<span class="line"><span>    CustomMacPlatform platform; </span></span>
<span class="line"><span>    if (platform.init()) {</span></span>
<span class="line"><span>        return -1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return platform.run(argc, (const char**)argv); </span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="game-cpp-迁移方法" tabindex="-1">game.cpp 迁移方法 <a class="header-anchor" href="#game-cpp-迁移方法" aria-label="Permalink to &quot;game.cpp 迁移方法&quot;">​</a></h3><ul><li>设置js加密秘钥：jsb_set_xxtea_key -&gt; 设置 <code>_xxteaKey</code> 成员变量; 或 调用 <code>setXXTeaKey</code></li><li>设置调试： jsb_enable_debugger -&gt; 设置 <code>_debuggerInfo</code> 结构, 或 调用 <code>setDebugIpAndPort</code></li><li>设置异常回调：setExceptionCallback -&gt; 重写 <code>handleException</code> 接口</li><li>运行自定义脚本：jsb_run_script -&gt; 调用 <code>runScript</code></li><li>可以通过使用 <code>engine</code> 来添加需要监听的事件, -&gt; <code>getEngine()-&gt;addEventCallback(WINDOW_OSEVENT, eventCb);</code></li><li>自定义的游戏 <code>CustomGame</code>，需要注册到引擎 <code>CC_REGISTER_APPLICATION(CustomGame)</code> 进行加载；</li><li><code>game</code> 继承于 <code>cc::BaseGame</code>, 而 <code>cc::BaseGame</code> 继承于 <code>CocosApplication</code>，因此可以重写部分实现，增加自定义逻辑；</li></ul><h2 id="native-文件修改" tabindex="-1">Native 文件修改 <a class="header-anchor" href="#native-文件修改" aria-label="Permalink to &quot;Native 文件修改&quot;">​</a></h2><ul><li>替换引用的头文件：<code>#include &quot;cocos/platform/Application.h&quot;</code> —&gt; <code>#include &quot;application/ApplicationManager.h&quot;</code></li><li>使用方式变更：<code>cc::Application::getInstance()-&gt;getScheduler()</code> -&gt; <code>CC_CURRENT_ENGINE()-&gt;getScheduler()</code></li><li>有自定义 jsb 接口的情况：<code>native_ptr_to_seval</code> 替换为 <code>nativevalue_to_se</code></li></ul><h2 id="android-升级指南" tabindex="-1">Android 升级指南 <a class="header-anchor" href="#android-升级指南" aria-label="Permalink to &quot;Android 升级指南&quot;">​</a></h2><h3 id="java-修改" tabindex="-1">JAVA 修改 <a class="header-anchor" href="#java-修改" aria-label="Permalink to &quot;JAVA 修改&quot;">​</a></h3><ul><li><p><strong>game/AppActivity.java</strong> 以及 <strong>game/InstantActivity.java</strong> 的 <code>onCreate</code> 方法中删除如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Workaround in https://stackoverflow.com/questions/16283079/re-launch-of-activity-on-home-button-but-only-the-first-time/16447508</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTaskRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Android launched another instance of the root activity into an existing task</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  so just quietly finish and go away, dropping the user back into the activity</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  at the top of the stack (ie: the last state of this task)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Don&#39;t need to finish it again since it&#39;s finished in super.onCreate .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>app/AndroidManifest.xml</strong> 执行下列操作：</p><ul><li>删除 <code>application</code> 标签中的下列代码：<code>android:taskAffinity=&quot;&quot;</code></li><li>在 <code>application</code> 标签中增加下列代码：<code>android:exported=&quot;true&quot;</code></li></ul></li><li><p><strong>app/build.gradle</strong> 修改下列代码：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;\${RES_PATH}/assets&quot; -&gt; &quot;\${RES_PATH}/data&quot;</span></span></code></pre></div></li></ul><h4 id="cmakelists-txt-修改" tabindex="-1">CMakeLists.txt 修改 <a class="header-anchor" href="#cmakelists-txt-修改" aria-label="Permalink to &quot;CMakeLists.txt 修改&quot;">​</a></h4><ul><li><p><strong>android/CMakeLists.txt</strong></p><ul><li><p>LIB_NAME 变更为 CC_LIB_NAME</p></li><li><p>PROJ_SOURCES 变更为 CC_PROJ_SOURCES</p></li><li><p>增加 set(CC_PROJECT_DIR \${CMAKE_CURRENT_LIST_DIR})</p></li><li><p>增加 set(CC_COMMON_SOURCES)</p></li><li><p>增加 set(CC_ALL_SOURCES)</p></li><li><p>删除下列代码：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/Game.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes/Game.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJ_SOURCES}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-Wl,--whole-archive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cocos2d_jni </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Wl,--no-whole-archive&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cocos2d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${LIB_NAME}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/../common/Classes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>增加代码:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc_android_before_target(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_ALL_SOURCES}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此处添加用户依赖库 AAA target_link_libraries(\${CC_LIB_NAME} AAA)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此处添加用户自定义文件 xxx/include target_include_directories(\${CC_LIB_NAME} PRIVATE \${CMAKE_CURRENT_LIST_DIR}/../common/Classes/xxx/include)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc_android_after_target(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CC_LIB_NAME}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul></li><li><p><strong>common/CMakeLists.txt</strong></p><ul><li><p>cocos2d-x-lite/ 修改为 engine/native/</p></li><li><p>文件末尾增加代码：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(APPEND CC_COMMON_SOURCES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Classes/Game.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    \${CMAKE_CURRENT_LIST_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Classes/Game.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul></li></ul>`,23),t=[p];function l(c,o,h,d,r,k){return i(),a("div",null,t)}const u=s(e,[["render",l]]);export{E as __pageData,u as default};
