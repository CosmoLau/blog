import{_ as s,c as t,o as i,a4 as a}from"./chunks/framework.uQk9_EO2.js";const n="/docs/cocos/assets/button.CJAwdAGm.png",e="/docs/cocos/assets/button-color.mlzEKHsF.png",h="/docs/cocos/assets/transition.BD3YAhgW.png",l="/docs/cocos/assets/color-transition.DMtAJSD-.png",o="/docs/cocos/assets/sprite-transition.T7PQBh6q.png",r="/docs/cocos/assets/scaleTransition.CWJjJ0iP.png",p="/docs/cocos/assets/button-event.CJrKN0Hu.png",B=JSON.parse('{"title":"Button Component Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/ui-system/components/editor/button.md","filePath":"en/ui-system/components/editor/button.md","lastUpdated":1712305443000}'),k={name:"en/ui-system/components/editor/button.md"},d=a('<h1 id="button-component-reference" tabindex="-1">Button Component Reference <a class="header-anchor" href="#button-component-reference" aria-label="Permalink to &quot;Button Component Reference&quot;">​</a></h1><p>The <strong>Button</strong> component responds to a click from the user. When the user clicks a <strong>Button</strong>, its status will change. In addition, users can assign a custom behavior to buttons&#39; <strong>click event</strong>.</p><p><img src="'+n+'" alt="button.png"></p><p><img src="'+e+'" alt="button-color"></p><p>Click the <strong>Add Component</strong> button at the bottom of the <strong>Inspector</strong> panel and select <strong>UI/Button</strong> to add the <strong>Button</strong> component to the node.</p><p>To use <code>Button</code>, please refer to the <a href="./__APIDOC__/en/class/Button">Button API</a> documentation and the <a href="https://github.com/cocos/cocos-test-projects/tree/v3.8/assets/cases/ui/03.button" target="_blank" rel="noreferrer">Button</a> scene of the test-cases-3d project.</p><h2 id="button-properties" tabindex="-1">Button Properties <a class="header-anchor" href="#button-properties" aria-label="Permalink to &quot;Button Properties&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Function Explanation</th></tr></thead><tbody><tr><td><strong>Target</strong></td><td>Specify the <strong>Button</strong> background node. When the <strong>Button</strong> status changes, the <code>Color</code> or <code>Sprite</code> property of the node will be modified.</td></tr><tr><td><strong>Interactable</strong></td><td>Boolean type, if set to <code>false</code> then the <strong>Button</strong> component enters the forbidden state.</td></tr><tr><td><strong>Transition</strong></td><td>Enumeration type, including <strong>NONE</strong>, <strong>COLOR</strong>, <strong>SPRITE</strong> and <strong>SCALE</strong>. Each type corresponds to a different Transition setting. Please see the <strong>Button Transition</strong> section below for details.</td></tr><tr><td><strong>ClickEvents</strong></td><td>List type, default is null. Each event added by the user is composed of the node reference, component name and a response function. Please see the <strong>Button Event</strong> section below for details.</td></tr></tbody></table><h2 id="button-transition" tabindex="-1">Button Transition <a class="header-anchor" href="#button-transition" aria-label="Permalink to &quot;Button Transition&quot;">​</a></h2><p><strong>Button Transition</strong> is used to choose the action of the button when clicked by the user. Currently the types available are <strong>NONE</strong>, <strong>COLOR</strong>, <strong>SPRITE</strong> and <strong>SCALE</strong>.</p><p><img src="'+h+'" alt="transition"></p><h3 id="color-transition" tabindex="-1">Color Transition <a class="header-anchor" href="#color-transition" aria-label="Permalink to &quot;Color Transition&quot;">​</a></h3><p><img src="'+l+'" alt="color-transition"></p><table><thead><tr><th>Property</th><th>Function Explanation</th></tr></thead><tbody><tr><td><strong>Normal</strong></td><td>Color of Button under Normal status.</td></tr><tr><td><strong>Pressed</strong></td><td>Color of Button under Pressed status.</td></tr><tr><td><strong>Hover</strong></td><td>Color of Button under Hover status.</td></tr><tr><td><strong>Disabled</strong></td><td>Color of Button under Disabled status.</td></tr><tr><td><strong>Duration</strong></td><td>Time interval needed for Button status switching.</td></tr></tbody></table><h3 id="sprite-transition" tabindex="-1">Sprite Transition <a class="header-anchor" href="#sprite-transition" aria-label="Permalink to &quot;Sprite Transition&quot;">​</a></h3><p><img src="'+o+'" alt="sprite-transition"></p><table><thead><tr><th>Property</th><th>Function Explanation</th></tr></thead><tbody><tr><td><strong>Normal</strong></td><td>SpriteFrame of Button under Normal status.</td></tr><tr><td><strong>Pressed</strong></td><td>SpriteFrame of Button under Pressed status.</td></tr><tr><td><strong>Hover</strong></td><td>SpriteFrame of Button under Hover status.</td></tr><tr><td><strong>Disabled</strong></td><td>SpriteFrame of Button under Disabled status.</td></tr></tbody></table><h3 id="scale-transition" tabindex="-1">Scale Transition <a class="header-anchor" href="#scale-transition" aria-label="Permalink to &quot;Scale Transition&quot;">​</a></h3><p><img src="'+r+'" alt="scaleTransition"></p><table><thead><tr><th>Property</th><th>Function Explanation</th></tr></thead><tbody><tr><td><strong>Duration</strong></td><td>Time interval needed for Button status switching.</td></tr><tr><td><strong>ZoomScale</strong></td><td>When the user clicks the button, the button will zoom to a scale. The final scale of the button equals to the button&#39;s original <code>scale * zoomScale</code>, and the zoomScale can be a negative value.</td></tr></tbody></table><h2 id="button-click-events" tabindex="-1">Button Click Events <a class="header-anchor" href="#button-click-events" aria-label="Permalink to &quot;Button Click Events&quot;">​</a></h2><p>The <strong>Button</strong> can additionally add a <strong>click event</strong> to respond to the player&#39;s <strong>click action</strong>. There are two ways to achieve this.</p><h3 id="add-a-callback-using-the-properties" tabindex="-1">Add a callback using the Properties <a class="header-anchor" href="#add-a-callback-using-the-properties" aria-label="Permalink to &quot;Add a callback using the Properties&quot;">​</a></h3><p><img src="'+p+`" alt="button-event"></p><table><thead><tr><th>Property</th><th>Function Explanation</th></tr></thead><tbody><tr><td><strong>Target</strong></td><td>Node with the script component.</td></tr><tr><td><strong>Component</strong></td><td>Script component name.</td></tr><tr><td><strong>Handler</strong></td><td>Assign a callback function from the given component which will be triggered when the user clicks the Button.</td></tr><tr><td><strong>CustomEventData</strong></td><td>A user-defined string value passed as the last event argument of the event callback.</td></tr></tbody></table><h3 id="add-a-callback-using-the-script" tabindex="-1">Add a callback using the script <a class="header-anchor" href="#add-a-callback-using-the-script" aria-label="Permalink to &quot;Add a callback using the script&quot;">​</a></h3><p>There are two ways to add a callback through the script.</p><ol><li><p>The event callback added by this method is the same as the event callback added by the editor, all added by the script. First you need to construct a <code>EventHandler</code> object, and then set the corresponding <code>target</code>, <code>component</code>, <code>handler</code> and <code>customEventData</code> parameters.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Event, Node, Button, EventHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clickEventHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This node is the node to which your event handler code component belongs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clickEventHandler.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the script class name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clickEventHandler.component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clickEventHandler.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clickEventHandler.customEventData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foobar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        button.clickEvents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clickEventHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">customEventData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The event here is a Touch object, and you can get the send node of the event by event.target</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customEventData); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>By <code>button.node.on (&#39;click&#39;, ...)</code> to add event callback. This is a very simple way, but the way has some limitations, in the event callback the screen coordinate point of the current click button cannot be obtained.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Suppose we add an event handler callback to the onLoad method of a component and handle the event in the callback function:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _decorator, Component, Button } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ex</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.button.node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button.EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CLICK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Note that events registered this way cannot pass customEventData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol>`,28),c=[d];function g(E,y,u,F,b,m){return i(),t("div",null,c)}const v=s(k,[["render",g]]);export{B as __pageData,v as default};
