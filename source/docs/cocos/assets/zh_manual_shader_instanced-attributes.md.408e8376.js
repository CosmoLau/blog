import{_ as s,v as a,b as n,R as l}from"./chunks/framework.5ffcbaff.js";const A=JSON.parse('{"title":"自定义几何体实例化属性","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/shader/instanced-attributes.md","filePath":"zh/manual/shader/instanced-attributes.md"}'),p={name:"zh/manual/shader/instanced-attributes.md"},o=l(`<h1 id="自定义几何体实例化属性" tabindex="-1">自定义几何体实例化属性 <a class="header-anchor" href="#自定义几何体实例化属性" aria-label="Permalink to &quot;自定义几何体实例化属性&quot;">​</a></h1><p>通过 <strong>几何体实例化</strong> 特性（GPU Instancing）可使 GPU 批量绘制模型相同且材质相同的渲染对象。如果我们想在不打破这一特性的情况下单独修改某个对象的显示效果，就需要通过自定义几何体实例化属性。</p><p>我们以新增一个颜色属性为例。</p><h2 id="定义变量" tabindex="-1">定义变量 <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;定义变量&quot;">​</a></h2><p>实例化属性需要单独定义，并且处于 <code>USE_INSTANCING</code> 宏定义之下，否则会出现编译错误。</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">USE_INSTANCING</span><span style="color:#676E95;font-style:italic;"> // when instancing is enabled</span></span>
<span class="line"><span style="color:#A6ACCD;">  #</span><span style="color:#82AAFF;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">RGBA8</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // normalized unsigned byte</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a_instanced_color</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><h2 id="用-vs-传递" tabindex="-1">用 vs 传递 <a class="header-anchor" href="#用-vs-传递" aria-label="Permalink to &quot;用 vs 传递&quot;">​</a></h2><p>虽然 a_instanced_color 仅用在 fs 中修改物体颜色，但几何体实例化属性属于顶点属性，只能在 vs 中被访问。 因此需要在 vs 中声明一个输出到 fs 的变量。 代码示例如下：</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CCProgram vs </span><span style="color:#89DDFF;">%{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">USE_INSTANCING</span></span>
<span class="line"><span style="color:#F07178;">    out vec4 instancedColor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  vec4 </span><span style="color:#82AAFF;">vert</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">      ...</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">USE_INSTANCING</span></span>
<span class="line"><span style="color:#F07178;">        instancedColor </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> a_instanced_color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"><span style="color:#F07178;">      ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}%</span></span></code></pre></div><h2 id="在-fs-中使用" tabindex="-1">在 fs 中使用 <a class="header-anchor" href="#在-fs-中使用" aria-label="Permalink to &quot;在 fs 中使用&quot;">​</a></h2><p>通过在 fs 声明对应的 in 变量，获取到 vs 中传递过来的几何体实例化属性，实现想要的功能。</p><div class="language-glsl"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CCProgram fs </span><span style="color:#89DDFF;">%{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">USE_INSTANCING</span></span>
<span class="line"><span style="color:#F07178;">    in vec4 instancedColor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  vec4 </span><span style="color:#82AAFF;">frag</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">      ...</span></span>
<span class="line"><span style="color:#F07178;">      vec4 o </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> mainColor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">USE_INSTANCING</span></span>
<span class="line"><span style="color:#F07178;">        o </span><span style="color:#89DDFF;">*=</span><span style="color:#F07178;"> instancedColor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"><span style="color:#F07178;">      ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}%</span></span></code></pre></div><h2 id="在脚本中设置属性" tabindex="-1">在脚本中设置属性 <a class="header-anchor" href="#在脚本中设置属性" aria-label="Permalink to &quot;在脚本中设置属性&quot;">​</a></h2><p>几何体实例化属性属于具体的渲染对象实例，无法通过材质属性面板设置，只能通过模型组件 MeshRenderer 上的 setInstancedAttribute 方法进行设置。 示例代码如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> comp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(MeshRenderer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInstancedAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a_instanced_color</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">150</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">255</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>有以下几点需要注意：</p><ol><li><p><code>#pragma format(RGBA8)</code> 用于指定此属性的具体数据格式，参数可以为引擎 <code>GFXFormat</code> 中的任意枚举名[^1]；如未声明则默认为 RGBA32F 类型。</p></li><li><p>所有实例化属性都是从利用顶点着色器（vs）的 attribute 输入，如果要在片元着色器（fs）中使用，需要先在 vs 中声明，再传递给 fs。</p></li><li><p>请确保代码在所有分支都能正常执行，无论 <code>USE_INSTANCING</code> 是否启用。</p></li><li><p>实例化属性的值在运行时会初始化为 0。</p></li><li><p>如果在 <strong>MeshRenderer</strong> 组件上更换了材质，那么所有的实例化属性值都会被重置，需要重新设置。</p></li></ol><p>[^1]: WebGL 1.0 平台下不支持整型 attributes，如项目需要发布到此平台，应使用默认浮点类型。</p>`,19),e=[o];function t(c,r,i,F,y,D){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{A as __pageData,C as default};
