import{_ as e,c as a,o as r,a4 as i}from"./chunks/framework.uQk9_EO2.js";const l="/docs/cocos/assets/effect-show.D87U8Tkq.jpg",g=JSON.parse('{"title":"着色器（Cocos Shader）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/shader/index.md","filePath":"zh/shader/index.md","lastUpdated":1712305443000}'),s={name:"zh/shader/index.md"},h=i('<h1 id="着色器-cocos-shader" tabindex="-1">着色器（Cocos Shader） <a class="header-anchor" href="#着色器-cocos-shader" aria-label="Permalink to &quot;着色器（Cocos Shader）&quot;">​</a></h1><p><img src="'+l+'" alt="effect-show"></p><p>在现代显卡中，若要正确地绘制物体，需要书写基于顶点（Vertex）和片元（Fragment）的代码片段，这些代码片段称为 Shader。在基于 OpenGL 系列驱动的硬件设备上，Shader 支持一种名为 GLSL（OpenGL Shading Language）的着色器语言。</p><p>为了适配工业化制作流，提升着色器片段的易用性，Cocos Creator 基于 GLSL 封装了一套着色器 — <a href="./effect-syntax">Cocos Shader</a>。</p><p>本章主要介绍 Cocos Shader 的工作方式和使用方式。</p><h2 id="内容" tabindex="-1">内容 <a class="header-anchor" href="#内容" aria-label="Permalink to &quot;内容&quot;">​</a></h2><p>本章节主要包含以下内容：</p><ul><li><a href="./effect-inspector">创建与使用</a></li><li><a href="./effect-builtin">内置着色器</a><ul><li><a href="./effect-builtin-pbr">基于物理的光照模型 PBR</a></li><li><a href="./effect-builtin-toon">卡通渲染</a></li><li><a href="./effect-builtin-unlit">无光照</a></li></ul></li><li><a href="./effect-syntax">着色器语法</a><ul><li><a href="./pass-parameter-list">Pass 可选配置参数</a></li><li><a href="./yaml-101">YAML 101 语法简介</a></li><li><a href="./glsl">GLSL 语法简介</a></li><li><a href="./macros">预处理宏定义</a></li><li><a href="./effect-chunk-index">着色器片段（Chunk）</a></li></ul></li><li><a href="./uniform">内置全局 Uniform</a></li><li><a href="./common-functions">公共函数库</a></li><li><a href="./forward-and-deferred">前向渲染与延迟渲染 Shader 执行流程</a></li><li><a href="./surface-shader">表面着色器 - Surface Shader</a><ul><li><a href="./surface-shader/builtin-surface-shader">内置 Surface Shader 导读</a></li><li><a href="./surface-shader/surface-shader-structure">Surface Shader 基本结构</a></li><li><a href="./surface-shader/shader-code-flow">Surface Shader 执行流程</a></li><li><a href="./surface-shader/includes">include 机制</a></li><li><a href="./surface-shader/macro-remapping">宏定义与重映射</a></li><li><a href="./surface-shader/function-replace">使用宏定义实现函数替换</a></li><li><a href="./surface-shader/surface-function">可替换的内置函数</a></li><li><a href="./surface-shader/render-usage">渲染用途</a></li><li><a href="./surface-shader/lighting-mode">光照模型</a></li><li><a href="./surface-shader/surface-data-struct">表面材质数据结构</a></li><li><a href="./surface-shader/shader-stage">着色器类别</a></li><li><a href="./surface-shader/shader-assembly">组装器</a></li><li><a href="./surface-shader/vs-input">VS 输入</a></li><li><a href="./surface-shader/fs-input">FS 输入</a></li><li><a href="./surface-shader/customize-surface-shader">自定义 Surface Shader</a></li><li><a href="./surface-shader/rendering-debug-view">渲染调试功能</a></li></ul></li><li><a href="./legacy-shader/legacy-shader">传统着色器 - Legacy Shader</a><ul><li><a href="./legacy-shader/legacy-shader-builtins">内置 Legacy Shader 导读</a></li><li><a href="./legacy-shader/legacy-shader-func-struct">Legacy Shader 主要函数与结构体</a></li></ul></li><li><a href="./write-effect-overview">自定义着色器</a><ul><li><a href="./write-effect-2d-sprite-gradient">2D 精灵着色器：Gradient</a></li><li><a href="./write-effect-3d-rim-light">3D 着色器：RimLight</a></li></ul></li><li><a href="./instanced-attributes">自定义几何体实例化属性</a></li><li><a href="./ubo-layout">UBO 内存布局策略</a></li><li><a href="./webgl-100-fallback">WebGL 1.0 向下兼容支持</a></li><li><a href="./vscode-plugin">VSCode 着色器插件</a></li></ul>',8),f=[h];function c(t,d,u,o,n,p){return r(),a("div",null,f)}const _=e(s,[["render",c]]);export{g as __pageData,_ as default};
