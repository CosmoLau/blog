import{_ as e,c as s,o as a,a4 as i}from"./chunks/framework.uQk9_EO2.js";const c=JSON.parse('{"title":"Subpackage upgrade guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/asset/subpackage-upgrade-guide.md","filePath":"en/asset/subpackage-upgrade-guide.md","lastUpdated":1712305443000}'),t={name:"en/asset/subpackage-upgrade-guide.md"},n=i(`<h1 id="subpackage-upgrade-guide" tabindex="-1">Subpackage upgrade guide <a class="header-anchor" href="#subpackage-upgrade-guide" aria-label="Permalink to &quot;Subpackage upgrade guide&quot;">​</a></h1><blockquote><p>Author: Santy-Wang, Xunyi This article details the considerations for upgrading mini game sub-package to the Asset Bundle.</p></blockquote><p>Prior to v2.4, <a href="https://github.com/cocos/cocos-docs/blob/e02ac31bab12d3ee767c0549050b0e42bd22bc5b/en/scripting/subpackage.md" target="_blank" rel="noreferrer">Subpackage Loading</a> was only supported various mini game platforms, such as WeChat Mini Games, OPPO Mini Games, etc.. However, with the continuous development of Creator, developers&#39; demands for subpackage have been increasing, such as multi-platform support, and the original subpackage loading is no longer enough. Therefore, starting from v2.4, Creator officially supports the more complete <strong>Asset Bundle</strong>.</p><ul><li>For the <strong>Artist and Game Designer</strong>, all resources in your project (e.g.: scenes, animations, prefab) do not need to be modified or upgraded.</li><li>For <strong>Programmers</strong>, the <code>loader.downloader.loadSubpackage</code> needs to be changed to the <code>assetManager.loadBundle</code> from <strong>Asset Manager</strong>. The related content will be described in detail in this document.</li></ul><blockquote><p><strong>Note</strong>: if you used Subpackage Loading in your old project, that is, if you checked the <strong>Subpackage</strong> option in the <strong>Properties</strong> panel, then when the project is upgraded to the v3.0, it will automatically convert to an normal folder. You can configure the Asset Bundle as following reference.</p></blockquote><p><a href="./bundle">Configura Asset Bundle</a></p><h2 id="situations-that-require-upgrading-manually" tabindex="-1">Situations that require upgrading manually <a class="header-anchor" href="#situations-that-require-upgrading-manually" aria-label="Permalink to &quot;Situations that require upgrading manually&quot;">​</a></h2><p>Use the <code>loader.downloader.loadSubpackage</code> API to load the subpackage.</p><h2 id="upgrade-steps" tabindex="-1">Upgrade steps <a class="header-anchor" href="#upgrade-steps" aria-label="Permalink to &quot;Upgrade steps&quot;">​</a></h2><ul><li><p><strong>Back up your old projects</strong></p></li><li><p>Use Cocos Creator <strong>v3.0</strong> in the <strong>Dashboard</strong> to open an old project that needs to upgrade the subpackage, Creator will reimport the affected resources. The first import will take a little longer, and the main editor window will open after the import is complete. And then open the code editor to replace all <code>loader.downloader.loadSubpackage</code> with <code>assetManager.loadBundle</code>.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// before</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader.downloader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadSubpackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sub1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadRes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sub1/sprite-frames/background&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpriteFrame);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// after</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assetManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sub1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // The relative path to the Asset Bundle root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sprite-frames/background/spriteFrame&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpriteFrame);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><h2 id="how-to-use-the-asset-bundle" tabindex="-1">How to use the Asset Bundle <a class="header-anchor" href="#how-to-use-the-asset-bundle" aria-label="Permalink to &quot;How to use the Asset Bundle&quot;">​</a></h2><p>For details on how to use the <strong>Asset Bundle</strong>, please refer to the <a href="./bundle">Asset Bundle</a> documentation.</p><p>For APIs related to the <strong>Asset Bundle</strong>, please refer to the <a href="./__APIDOC__/en/class/AssetManager.Bundle">Asset Bundle API</a> documentation.</p>`,13),r=[n];function o(l,p,d,h,g,u){return a(),s("div",null,r)}const E=e(t,[["render",o]]);export{c as __pageData,E as default};
