import{_ as s,c as o,o as e,a4 as a}from"./chunks/framework.uQk9_EO2.js";const t="/docs/cocos/assets/physics-system.DX5CnJ-M.jpg",r="/docs/cocos/assets/physics-world.Wd6q-4KI.jpg",i="/docs/cocos/assets/physics-pipeline.B7SYKZkE.png",l="/docs/cocos/assets/physics-element.1YxiU2tO.png",b=JSON.parse('{"title":"3D 物理系统","description":"","frontmatter":{},"headers":[],"relativePath":"zh/physics/physics.md","filePath":"zh/physics/physics.md","lastUpdated":1712305443000}'),c={name:"zh/physics/physics.md"},n=a('<h1 id="_3d-物理系统" tabindex="-1">3D 物理系统 <a class="header-anchor" href="#_3d-物理系统" aria-label="Permalink to &quot;3D 物理系统&quot;">​</a></h1><h2 id="_3d-物理简介" tabindex="-1">3D 物理简介 <a class="header-anchor" href="#_3d-物理简介" aria-label="Permalink to &quot;3D 物理简介&quot;">​</a></h2><p><img src="'+t+'" alt="physics-system"></p><p>物理系统是游戏引擎的关键组成部分，因为它将真实世界的物理性质（如质量、重力和摩擦力）注入游戏世界，使游戏世界的运作更加真实。物理引擎负责根据物体的物理性质模拟游戏世界中的运动和碰撞反馈。值得注意的是，物理系统是一个复杂的系统，不仅与游戏逻辑相关，还与渲染系统、动画系统和音频系统相关。通常，游戏物理系统仅涵盖了牛顿力学的基础，如碰撞检测和刚体运动。其他物理现象，如流体力学或软体物理学，需要使用其他方法实现。用户可以使用物理引擎提供的API控制物理系统，在游戏中实现各种物理效果。</p><p>Cocos Creator 支持以下几种物理引擎：</p><ul><li><strong>Bullet</strong>：默认物理引擎，<a href="https://pybullet.org/wordpress/" target="_blank" rel="noreferrer">Bullet 物理引擎</a> 的 asm.js/wasm 版本。具备碰撞检测和物理模拟的物理引擎。</li><li><strong>builtin</strong>：内置物理引擎，仅用于碰撞检测的轻量引擎。</li><li><strong>cannon.js</strong>：具有碰撞检测和物理模拟的物理引擎。</li><li><strong>PhysX</strong>: 由 <a href="https://developer.nvidia.com/physx-sdk" target="_blank" rel="noreferrer">NVIDIA</a> 公司开发的游戏物理引擎。具备碰撞检测和物理模拟的物理引擎。</li></ul><p>开发者根据开发对物理特性需求或应用场景选择不同的物理引擎，详情请参考：<a href="./physics-engine">设置物理引擎</a>。</p><blockquote><p><strong>注意</strong>：在低版本中 PhysX 不被支持。如要使用 PhysX 请确保引擎升级到最新版本。</p></blockquote><h2 id="物理世界和元素" tabindex="-1">物理世界和元素 <a class="header-anchor" href="#物理世界和元素" aria-label="Permalink to &quot;物理世界和元素&quot;">​</a></h2><p>物理世界中的每个元素都可以理解为一个独立的 <strong>刚体</strong>，在 Cocos Creator 3.x 中可以通过为游戏对象添加 <a href="./physics-collider">Collider 碰撞组件</a> 或者 <a href="./physics-rigidbody">RigidBody 刚体组件</a> 让物理元素具备物理特性。物理系统将为这些元素进行物理计算，比如计算各物体是否产生碰撞，以及物体的受力情况。当计算完成后，物理系统会将物理世界更新到场景世界中，仿真还原真实世界中的物理行为。</p><p>场景世界与物理世界：</p><p><img src="'+r+'" alt="场景世界与物理世界"></p><blockquote><p><strong>注意</strong>：此处的 “刚体” 指的是物理世界中，在运动中或受力作用后，形状和大小不变，而且内部各点的相对位置不变的物体。</p></blockquote><h3 id="物理世界的流程" tabindex="-1">物理世界的流程 <a class="header-anchor" href="#物理世界的流程" aria-label="Permalink to &quot;物理世界的流程&quot;">​</a></h3><p>当所有组件都完成 <code>lateUpdate</code> 之后，引擎会将持有物理属性的节点（刚体组件、碰撞体组件）同步到物理世界，并驱动物理引擎进行模拟，模拟完成以后再将物理引擎计算出的结果同步到场景的各个节点上。整体流程如下图所示：</p><p><img src="'+i+'" alt="phy"></p><h2 id="添加物理元素" tabindex="-1">添加物理元素 <a class="header-anchor" href="#添加物理元素" aria-label="Permalink to &quot;添加物理元素&quot;">​</a></h2><p><img src="'+l+'" alt="add-element"></p><p>在游戏世界中添加一个物理元素可以分为以下步骤：</p><ol><li>新建一个节点。此处新建一个立方体模型 <strong>Cube</strong>；</li><li>添加碰撞组件，此处添加一个 <a href="./physics-collider#盒碰撞器组件-boxcollider">盒碰撞体组件</a>。在 <strong>属性检查器</strong> 面板下方点击 <strong>添加组件</strong> 按钮，在 <strong>Physics</strong> 目录下选择 <strong>BoxCollider</strong> 并调整参数；</li><li>为了使它具有物理行为，接着添加一个<a href="./physics-rigidbody">刚体 RigidBody</a> 组件。</li></ol><p>这样，便有了一个 <strong>既有碰撞器又有物理行为</strong> 的一个物理元素。</p><h2 id="射线以及几何体检测" tabindex="-1">射线以及几何体检测 <a class="header-anchor" href="#射线以及几何体检测" aria-label="Permalink to &quot;射线以及几何体检测&quot;">​</a></h2><p>游戏中可能会需要对某些物理特性进行检测，如子弹是否击中目标，可否将某些家具摆放在特定位置是，检测方法一般是发射一条，多条射线或者某种几何体（通常为模型的包围盒、胶囊体等），可以参考下列的文档来进行投射检测。</p><ul><li><a href="./physics-raycast">射线检测</a></li><li><a href="./physics-sweep">几何投射检测</a></li></ul>',24),p=[n];function h(d,g,_,y,m,u){return e(),o("div",null,p)}const q=s(c,[["render",h]]);export{b as __pageData,q as default};
