import{_ as e,v as o,b as r,R as s}from"./chunks/framework.5ffcbaff.js";const a="/docs/cocos/assets/add-wenxr-session-ctrl.68661431.png",t="/docs/cocos/assets/ar-scenes.31f03c46.png",x=JSON.parse('{"title":"WebXR 项目配置","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/xr/project-deploy/webxr-proj-deploy.md","filePath":"zh/manual/xr/project-deploy/webxr-proj-deploy.md"}'),n={name:"zh/manual/xr/project-deploy/webxr-proj-deploy.md"},l=s('<h1 id="webxr-项目配置" tabindex="-1">WebXR 项目配置 <a class="header-anchor" href="#webxr-项目配置" aria-label="Permalink to &quot;WebXR 项目配置&quot;">​</a></h1><p>WebXR 项目的创建和普通XR项目创建流程保持一致。</p><p>若需要创建沉浸式虚拟现实（VR）体验的工程，可以参考 <a href="./vr-proj-deploy.html">VR 项目创建</a>。</p><p>若需要创建沉浸式增强现实（AR）体验的工程，可以参考 <a href="./ar-proj-deploy.html">AR 项目创建</a>。</p><p>部署完毕之后需要为 <strong>XR Agent</strong> 节点添加 <strong>cc.WebXRSessionController</strong> 组件，组件位置为：<strong>XR &gt; Device &gt; WebXRSessionController</strong>。</p><p>根据需要选择默认 Session Mode：</p><ul><li>IMMERSIVE_AR：Session 将独占访问沉浸式 XR 设备，渲染的内容将与现实世界的环境混合在一起。</li><li>IMMERSIVE_VR：Session 对场景的渲染不会被被覆盖或融入现实环境。</li><li>INLINE：3D 内容输出在标准 HTML 文档的元素上下文中内联显示，而不会占据整个视觉空间。inline session 既可以在单目渲染的设备呈现，也可以在双目立体渲染的设备中呈现；而且不关心设备是否可进行位姿追踪。inline session 不需要特殊的设备，在任何提供 WebXR API支持的 <a href="https://developer.mozilla.org/en-US/docs/Glossary/User_agent" target="_blank" rel="noreferrer">用户代理</a> 上都可以使用。</li></ul><img src="'+a+'" style="zoom:50%;"><h2 id="webxr-案例" tabindex="-1">WebXR 案例 <a class="header-anchor" href="#webxr-案例" aria-label="Permalink to &quot;WebXR 案例&quot;">​</a></h2><p>Dashboard 中的两个案例都提供了专用于 WebXR 的场景。</p><p>VR案例的 WebXR 主场景为 webxr-main，启动时务必将此场景设为启动场景。</p><p>AR （移动端）案例的 WebXR 主场景为 webxr-main，启动时务必将此场景设为启动场景，其他场景如下所示。</p><img src="'+t+'" style="zoom:50%;">',13),p=[l];function i(c,d,b,R,h,m){return o(),r("div",null,p)}const g=e(n,[["render",i]]);export{x as __pageData,g as default};
