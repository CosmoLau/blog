import{_ as s,c as i,o as t,a4 as e}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/raycasting-output.CsdobjNc.png",u=JSON.parse('{"title":"2D Physics Manager","description":"","frontmatter":{},"headers":[],"relativePath":"en/physics-2d/physics-2d-system.md","filePath":"en/physics-2d/physics-2d-system.md","lastUpdated":1712305443000}'),n={name:"en/physics-2d/physics-2d-system.md"},h=e(`<h1 id="_2d-physics-manager" tabindex="-1">2D Physics Manager <a class="header-anchor" href="#_2d-physics-manager" aria-label="Permalink to &quot;2D Physics Manager&quot;">​</a></h1><p>The physics system hides most of the implementation details of the physics modules (Box2D and Builtin modules) (e.g.: creating rigid bodies, synchronizing rigid body information to nodes, etc.).</p><p>Use the physics system to access some of the common functions of the physics module, such as click testing, ray testing, and setting up test messages.</p><h2 id="physics-system-related-settings" tabindex="-1">Physics system related settings <a class="header-anchor" href="#physics-system-related-settings" aria-label="Permalink to &quot;Physics system related settings&quot;">​</a></h2><h3 id="enabling-the-physics-manager" tabindex="-1">Enabling the Physics Manager <a class="header-anchor" href="#enabling-the-physics-manager" aria-label="Permalink to &quot;Enabling the Physics Manager&quot;">​</a></h3><p>The <strong>Physics Manager</strong> is enabled by default:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhysicsSystem2D.instance.enable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="draw-physics-debugging-information" tabindex="-1">Draw physics debugging information <a class="header-anchor" href="#draw-physics-debugging-information" aria-label="Permalink to &quot;Draw physics debugging information&quot;">​</a></h3><p>To enable draw debugging information, use the <strong>debugDrawFlags</strong>.</p><p>The physics system provides a variety of debugging information, you can combine the information to draw the relevant content.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhysicsSystem2D.instance.debugDrawFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EPhysics2DDrawFlags.Aabb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EPhysics2DDrawFlags.Pair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EPhysics2DDrawFlags.CenterOfMass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EPhysics2DDrawFlags.Joint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EPhysics2DDrawFlags.Shape;</span></span></code></pre></div><p>Set the drawing flag to <code>EPhysics2DDrawFlags.None</code> to disable drawing.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhysicsSystem2D.instance.debugDrawFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EPhysics2DDrawFlags.None;</span></span></code></pre></div><h3 id="converting-physics-units-to-the-world-coordinate-system-units" tabindex="-1">Converting physics units to the world coordinate system units <a class="header-anchor" href="#converting-physics-units-to-the-world-coordinate-system-units" aria-label="Permalink to &quot;Converting physics units to the world coordinate system units&quot;">​</a></h3><p>General physics modules (Box2D) uses <strong>Metre-Kilogramme-Second (MKS)</strong> unit system, it has the best performance operating under such a unit system. But we use the <strong>world coordinate system units</strong> (short for world units) as the unit of length in 2D games, so we need a ratio to convert the physics units to the world units.</p><p>In general, set this ratio to <strong>32</strong>, which can be obtained by <code>PhysicsManager.PTM_RATIO</code>, and this value is read-only. Usually the user does not need to care about this value, the physics system will automatically convert the physics units and world units to each other. User can use the familiar world units for all the calculations.</p><h3 id="set-physics-gravity" tabindex="-1">Set physics gravity <a class="header-anchor" href="#set-physics-gravity" aria-label="Permalink to &quot;Set physics gravity&quot;">​</a></h3><p>Gravity is a very important thing in physics operations, and most physics games use the gravity as a important feature.</p><p>The default gravity is <code>(0, -320)</code> world units per second^2, according to the conversion rules described above, that&#39;s <code>(0, -10)</code> m/s^2 in physics unit.</p><p>Gravity can be set to <code>0</code>. Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhysicsSystem2D.instance.gravity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>It is possible to change the acceleration of gravity to something else, such as a <code>20 m/s</code>. Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhysicsSystem2D.instance.gravity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PHYSICS_2D_PTM_RATIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="set-physics-timestep" tabindex="-1">Set physics timestep <a class="header-anchor" href="#set-physics-timestep" aria-label="Permalink to &quot;Set physics timestep&quot;">​</a></h3><p>The Physics System updates the physics world according to a fixed timestep, the default timestep is <code>1/60</code>. But some games may not want to follow such a high frequency to update the physics world, after all, this operation is more time consuming, then you can reduce the timestep to achieve this effect.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem2D.instance;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Physics timestep, default fixedTimeStep is 1/60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system.fixedTimeStep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The number of iterations per update of the Physics System processing speed is 10 by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system.velocityIterations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The number of iterations per update of the Physics processing location is 10 by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system.positionIterations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p><strong>Note</strong>: reducing the fixed timestep and the number of iterations for each property will reduce the physics detection frequency. Therefore, it is more likely to occur rigid body penetration, which needs to be taken into account when using.</p></blockquote><h2 id="querying-physics-object" tabindex="-1">Querying physics object <a class="header-anchor" href="#querying-physics-object" aria-label="Permalink to &quot;Querying physics object&quot;">​</a></h2><p>Often, knowing which physics objects are in a given scene is beneficial. For example, if a bomb explodes, objects in its range will be damaged; or in a strategy game, you may want to let the user drag to move a unit from a certain range.</p><p>The physics system provides several ways to efficiently and quickly look for objects in a region, each of which uses different ways to query objects that fit the needs of the game.</p><h3 id="point-test" tabindex="-1">Point test <a class="header-anchor" href="#point-test" aria-label="Permalink to &quot;Point test&quot;">​</a></h3><p>The point test will test if there&#39;s a collider contains a specific point under the world coordinate system. If the test is successful, it will return the collider. If there&#39;re multiple collider that contains the point, a random one will be returned.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> collider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem2D.instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point);</span></span></code></pre></div><h3 id="rectangle-test" tabindex="-1">Rectangle test <a class="header-anchor" href="#rectangle-test" aria-label="Permalink to &quot;Rectangle test&quot;">​</a></h3><p>The rectangle test will test a specified rectangle in the world coordinate system, and if the bounding box of a collision body overlaps with this rectangle, then the collision body will be added to the return list.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> colliderList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem2D.instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testAABB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect);</span></span></code></pre></div><h3 id="ray-test" tabindex="-1">Ray test <a class="header-anchor" href="#ray-test" aria-label="Permalink to &quot;Ray test&quot;">​</a></h3><p>The <strong>Box2D</strong> physics module (not available in the Builtin module) also provides ray detection to detect which collision bodies a given line segment passes through. We can also obtain the normal vector at the point where the given line passes through and other useful information.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhysicsSystem2D.instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">raycast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1, p2, type, mask);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> collider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.collider;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.point;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> normal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.normal;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fraction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.fraction;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The third parameter of the <code>raycast</code> function specifies the type of detection, and the ray detection supports four types. This is because the ray detection of <strong>Box2D</strong> is not detected from the nearest object of the ray starting point, so the result of the test can not guarantee that the result is sorted by the distance from the object near the start of the ray. <strong>Cocos Creator</strong>&#39;s physics system will determine whether the <strong>Box2d</strong> test results are sorted based on the type of detection. This type will affect the result return to user.</p><ul><li><p><code>ERaycast2DType.Any</code></p><p>Detect any collider on the ray path. Once it detects any collider, it will immediately end the detection process and will no longer detect other objects.</p></li><li><p><code>ERaycast2DType.Closest</code></p><p>Detect the nearest collider on the ray path, which is the default for the <code>raycast</code> detection, slightly slower than above method.</p></li><li><p><code>ERaycast2DType.All</code></p><p>Detect all colliders on the ray path, the order of the detected results is not fixed. In this type of detection, a collider may return multiple results because <strong>Box2D</strong> run the detection by testing the fixture, and a collider may consist of multiple fixtures. This is a more costly method and will be slower than above methods.</p></li><li><p><code>ERaycast2DType.AllClosest</code></p><p>All colliders on the ray path are detected, but the return result is filtered and only the relevant information about the nearest point of each collider is returned, the slowest method of all.</p></li></ul><h4 id="the-result-of-ray-detection" tabindex="-1">The result of ray detection <a class="header-anchor" href="#the-result-of-ray-detection" aria-label="Permalink to &quot;The result of ray detection&quot;">​</a></h4><p>The results of ray detection contain a lot of useful information, you can utilize these info according to the actual need.</p><ul><li><p><strong>collider</strong></p><p>Specifies which collider the ray passes through.</p></li><li><p><strong>point</strong></p><p>Specifies the point at which the ray intersects the collider.</p></li><li><p><strong>normal</strong></p><p>Specifies the normal vector of the surface of the collider at the intersection.</p></li><li><p><strong>fraction</strong></p><p>Specifies the score of the intersection point at the ray.</p></li></ul><p>The following figure helps to better understand the result of ray detection.</p><p><img src="`+a+'" alt="raycasting-output"></p><h4 id="group-and-mask-for-ray-detection" tabindex="-1">Group and mask for ray detection <a class="header-anchor" href="#group-and-mask-for-ray-detection" aria-label="Permalink to &quot;Group and mask for ray detection&quot;">​</a></h4><p>The groups and masks for 2D physics system are the same as for 3D physics system, and can be modified by finding the collision matrix in the <strong>Project Settings</strong> -&gt; <strong>Physics</strong> tab. More information can be found in <a href="./../physics/physics-group-mask">Grouping and Masks</a>.</p>',48),l=[h];function o(p,r,c,d,k,y){return t(),i("div",null,l)}const m=s(n,[["render",o]]);export{u as __pageData,m as default};
