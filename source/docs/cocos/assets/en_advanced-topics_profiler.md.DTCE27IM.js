import{_ as i,c as s,o as e,a4 as a}from"./chunks/framework.uQk9_EO2.js";const t="/docs/cocos/assets/profiler.BnHzt0_d.png",n="/docs/cocos/assets/enable-profiler.CAmugXG6.png",l="/docs/cocos/assets/add-stats.CJERuLfX.png",u=JSON.parse('{"title":"Native Performance Profiler","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced-topics/profiler.md","filePath":"en/advanced-topics/profiler.md","lastUpdated":1712305443000}'),r={name:"en/advanced-topics/profiler.md"},o=a('<h1 id="native-performance-profiler" tabindex="-1">Native Performance Profiler <a class="header-anchor" href="#native-performance-profiler" aria-label="Permalink to &quot;Native Performance Profiler&quot;">​</a></h1><p>The performance profiler is a tool for performance analysis and statistics that is currently only available on native platforms.</p><h2 id="default-statistics" tabindex="-1">Default statistics <a class="header-anchor" href="#default-statistics" aria-label="Permalink to &quot;Default statistics&quot;">​</a></h2><ul><li><p>The performance profiler is shown as follows:</p><p><img src="'+t+'" alt="profiler"></p></li><li><p>Different from the old version of <code>Profiler</code> in the lower left corner, the new version of <code>Profiler</code> provides more detailed game performance and memory statistics, and supports expansion. Developers can freely add performance and memory data that they care about. The default data is as follows:</p><ol><li><p>Core statistics <code>CoreStats</code>, including:</p><ul><li>frame rate</li><li>render time per frame</li><li>GFX backend</li><li>Whether to enable multithreading</li><li>Whether to enable occlusion query</li><li>Whether to enable shadow maps</li><li>Screen Resolution</li></ul></li><li><p>Object count statistics <code>ObjectStats</code>, including:</p><ul><li>number of render calls</li><li>Number of instantiations</li><li>Number of triangles</li><li>Number of 2D rendering batches</li><li>Number of rendered models</li><li>Number of cameras</li></ul></li><li><p>Memory usage statistics <code>MemoryStats</code>, including:</p><ul><li>Vertex buffer size for DebugRenderer</li><li>Native font memory size</li><li>Video memory occupied by textures</li><li>The video memory occupied by Buffer</li><li>GeometryRenderer vertex buffer size</li></ul></li><li><p>Performance Statistics <code>PerformanceStats</code>, showing the logical thread call stack, contains for each profiled code segment:</p><ul><li>total execution time per frame</li><li>Maximum time for a single execution per frame</li><li>total number of executions per frame</li><li>average execution time per frame</li><li>Total historical execution time</li><li>The maximum time of a single execution in history</li><li>Total number of historical executions</li><li>The average time of a single execution in history</li></ul></li></ol></li></ul><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h2><ul><li><p>In the main menu of the editor: <strong>Project</strong> -&gt; <strong>Project Settings</strong> -&gt; <strong>Feature cropping</strong>, check <strong>Debug Renderer</strong>, this option is closed by default, you need to open it to display the debug information:</p><p><img src="'+n+`" alt="enable profiler"></p></li><li><p>Change the macro definition of <code>CC_USE_PROFILER</code> to <code>1</code> in <code>native/cocos/base/Config.h</code>, and then change it back to <code>0</code> after the performance and memory optimization is completed. At this time, the performance profiler is completely closed and will not Cause any side effects on the code:</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_USE_PROFILER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CC_USE_PROFILER</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre></div></li><li><p>If you want to add the statistical information of <code>ObjectStats</code>, such as counting the number of rendered models per frame (need to be called in a function such as update for each frame):</p><p>The following macros are defined in <a href="https://github.com/cocos/cocos-engine/blob/v3.8.0/native/cocos/profiler/Profiler.h" target="_blank" rel="noreferrer">native/cocos/profiler/Profiler.h</a>. Developers can use it as needed.</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RenderScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CC_PROFILE_OBJECT_UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Models, _models.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>CC_PROFILE_OBJECT_UPDATE</code> for updating statistics</li><li><code>CC_PROFILE_OBJECT_INC</code> for incrementing statistics</li><li><code>CC_PROFILE_OBJECT_DEC</code> for decrementing statistics</li></ul></li><li><p>If you want to add <code>MemoryStats</code> statistics, such as counting the memory usage of <code>GeometryRenderer</code> vertex buffer:</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GeometryVertexBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gfx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> maxVertices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gfx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AttributeList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CC_PROFILE_MEMORY_INC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GeometryVertexBuffer, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;uint32_t&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_maxVertices </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>CC_PROFILE_MEMORY_UPDATE</code> for updating memory usage (bytes)</li><li><code>CC_PROFILE_MEMORY_INC</code> for incrementing memory usage (bytes)</li><li><code>CC_PROFILE_MEMORY_DEC</code> for decrementing memory usage (bytes)</li></ul></li><li><p>If you want to add <code>PerformanceStats</code> statistics, such as the execution time (in milliseconds) of the <code>ForwardPipeline::render</code> function:</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardPipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ccstd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Camera</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cameras</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CC_PROFILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ForwardPipelineRender);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>After the above modification, compile and run, you can see the new statistics on the screen:</p><p><img src="`+l+'" alt="add-stats"></p></li></ul>',6),h=[o];function p(d,c,k,g,E,f){return e(),s("div",null,h)}const y=i(r,[["render",p]]);export{u as __pageData,y as default};
