import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.uQk9_EO2.js";const n="/docs/cocos/assets/export-config.HqljV16V.png",b=JSON.parse('{"title":"命令行发布项目","description":"","frontmatter":{},"headers":[],"relativePath":"zh/editor/publish/publish-in-command-line.md","filePath":"zh/editor/publish/publish-in-command-line.md","lastUpdated":1712305443000}'),t={name:"zh/editor/publish/publish-in-command-line.md"},l=e(`<h1 id="命令行发布项目" tabindex="-1">命令行发布项目 <a class="header-anchor" href="#命令行发布项目" aria-label="Permalink to &quot;命令行发布项目&quot;">​</a></h1><p>命令行发布项目可以帮助开发者构建自己的自动化构建流程，通过修改命令行的参数来达到不同的构建需求。</p><h2 id="命令行发布参考" tabindex="-1">命令行发布参考 <a class="header-anchor" href="#命令行发布参考" aria-label="Permalink to &quot;命令行发布参考&quot;">​</a></h2><p><strong>例如</strong>：构建 web-desktop 平台、Debug 模式</p><ul><li><p>Mac</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Applications/CocosCreator/Creator/3.0.0/CocosCreator.app/Contents/MacOS/CocosCreator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> projectPath</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;platform=web-desktop;debug=true&quot;</span></span></code></pre></div></li><li><p>Windows</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\CocosCreator.exe </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> projectPath</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;platform=web-desktop;debug=true&quot;</span></span></code></pre></div></li></ul><p>目前命令行构建除了必填项外，如果不传递一律使用默认值来构建，具体参数默认值请参考下方描述以及平台的参数介绍。</p><h2 id="进程退出码" tabindex="-1">进程退出码 <a class="header-anchor" href="#进程退出码" aria-label="Permalink to &quot;进程退出码&quot;">​</a></h2><ul><li><strong>32</strong> 构建失败 —— 构建参数不合法</li><li><strong>34</strong> 构建失败 —— 构建过程出错失败，详情请参考构建日志</li><li><strong>36</strong> 构建成功</li></ul><h2 id="构建参数" tabindex="-1">构建参数 <a class="header-anchor" href="#构建参数" aria-label="Permalink to &quot;构建参数&quot;">​</a></h2><ul><li><p><code>--project</code>：必填，指定项目路径</p></li><li><p><code>--engine</code>：选填，指定自定义引擎路径</p></li><li><p><code>--build</code>：指定构建项目使用的参数</p><p>在 <code>--build</code> 后如果没有指定参数，则会使用 Cocos Creator 中 <strong>构建发布</strong> 面板当前的平台、模板等设置来作为默认参数。如果指定了其他参数设置，则会使用指定的参数来覆盖默认参数。可选择的参数有：</p><ul><li><code>configPath</code> - 参数文件路径。如果定义了这个字段，那么构建时将会按照 <code>json</code> 文件格式来加载这个数据，并作为构建参数。这个参数可以自己修改也可以直接从构建面板导出，当配置和 configPath 内的配置冲突时，configPath 指定的配置将会被覆盖。</li><li><code>stage</code> - 指定构建模式，默认为 &#39;build&#39;，可选 &#39;make&#39; | &#39;build&#39; | &#39;bundle&#39; 等</li><li><code>logDest</code> - 指定日志输出路径</li><li><code>includedModules</code> - 定制引擎打包功能模块，只打包需要的功能模块。具体有哪些功能模块可以参考引擎仓库根目录下 <strong>cc.config.json</strong>（<a href="https://github.com/cocos/cocos-engine/blob/3d/cc.config.json" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/engine/blob/3d/cc.config.json" target="_blank" rel="noreferrer">Gitee</a>）文件中的 <code>features</code> 字段。</li><li><code>outputName</code> - 构建后生成的发布包文件夹名称。</li><li><code>name</code> - 游戏名称</li><li><code>platform</code> - 必填，构建的平台，具体名称参考面板上对应扩展名称即可</li><li><code>buildPath</code> - 指定构建发布包生成的目录，默认为项目目录下的 <code>build</code> 目录。可使用绝对路径或者相对于项目的路径（例如 <code>project://release</code>）。从 v3.4.2 开始支持类似 <code>../</code> 这样的相对路径。</li><li><code>startScene</code> - 主场景的 UUID 值（参与构建的场景将使用上一次的编辑器中的构建设置），未指定时将使用参与构建场景的第一个</li><li><code>scenes</code> - 参与构建的场景信息，未指定时默认为全部场景，具体格式为：<code>{}</code></li><li><code>debug</code> - 是否为 debug 模式，默认关闭</li><li><code>replaceSplashScreen</code> - 是否替换插屏，默认关闭</li><li><code>md5Cache</code> - 是否开启 md5 缓存，默认关闭</li><li><code>mainBundleCompressionType</code> - 主包压缩类型，具体选项值可参考文档 <a href="./../../asset/bundle#压缩类型">Asset Bundle — 压缩类型</a>。</li><li><code>mainBundleIsRemote</code> - 配置主包为远程包</li><li><code>packages</code> - 各个扩展支持的构建配置参数，需要存放的是对于数据对象的序列化字符串，具体可以参考下文。</li></ul></li></ul><p>Cocos Creator 3.0 各个平台的构建会作为独立的扩展嵌入到 <strong>构建发布</strong> 面板中，因而各个平台的构建参数位置也不同。各个平台的构建参数会配置在 <code>packages</code> 字段中，例如：为微信小游戏指定构建参数，配置大体如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    taskName: &#39;wechatgame&#39;,</span></span>
<span class="line"><span>    packages: {</span></span>
<span class="line"><span>        wechatgame: {</span></span>
<span class="line"><span>            appid: &#39;*****&#39;,</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>之后在构建扩展支持对外开放，其他扩展的配置参数也会通过同样的方式嵌入到 <strong>构建发布</strong> 面板中。具体各个平台的参数字段 <strong>请参照各个平台文档中的参数介绍</strong>，最好是通过 <strong>构建发布</strong> 面板的 <strong>导出</strong> 功能来获取配置参数，更加方便快捷。目前依旧兼容旧版本的参数进行构建，但之后将会移除该兼容处理，请尽快升级配置参数。</p><h2 id="命令行执行独立发布-bundle" tabindex="-1">命令行执行独立发布 Bundle <a class="header-anchor" href="#命令行执行独立发布-bundle" aria-label="Permalink to &quot;命令行执行独立发布 Bundle&quot;">​</a></h2><ol><li><p>打开 Bundle 构建面板，配置好选项后，导出配置(自 3.8.2 起)</p><p><img src="`+n+`" alt="export-config"> 导出的配置大致如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;buildTaskIds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;1699344873959&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project://build/build-bundle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;buildBundle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;bundleConfigs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db://assets/resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;taskName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build bundle db://assets/resources&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在命令行中执行以下命令：</p></li></ol><ul><li><p>Mac</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Applications/CocosCreator/Creator/3.0.0/CocosCreator.app/Contents/MacOS/CocosCreator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> projectPath</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stage=bundle;configPath=./bundle-build-config.json;&quot;</span></span></code></pre></div></li><li><p>Windows</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\CocosCreator.exe </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> projectPath</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stage=bundle;configPath=./bundle-build-config.json;&quot;</span></span></code></pre></div></li></ul><p>命令行发布 Bundle 与普通的命令行构建类似，不过 <code>stage</code> 参数需要指定为 <code>bundle</code>，同时将在 bundle 构建面板上导出的配置指定为 <code>configPath</code> 参数。</p><h2 id="在-jenkins-上部署" tabindex="-1">在 Jenkins 上部署 <a class="header-anchor" href="#在-jenkins-上部署" aria-label="Permalink to &quot;在 Jenkins 上部署&quot;">​</a></h2><p>Cocos Creator 命令行运行的时候也是需要 GUI 环境的。如果你的 Jenkins 无法使用 Cocos Creator 命令行运行，一个解决办法是：确保 Jenkins 运行在 agent 模式下，这样才能访问到 WindowServer。详情请参考 <a href="https://stackoverflow.com/questions/13966595/build-unity-project-with-jenkins-failed" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/13966595/build-unity-project-with-jenkins-failed</a>。</p><p>如果你的 Jenkins 在 Windows 下无法编译，请在 Windows 的 <strong>控制面板 -&gt; 管理工具 -&gt; 服务</strong> 中为 Jenkins 的服务指定一个本地用户，然后重启电脑就可以了。不必单独设置一个 master-slave 模式。</p>`,20),o=[l];function p(h,d,c,r,k,u){return a(),i("div",null,o)}const C=s(t,[["render",p]]);export{b as __pageData,C as default};
