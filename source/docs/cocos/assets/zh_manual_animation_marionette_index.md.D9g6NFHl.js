import{_ as t,c as a,o as e,a5 as i}from"./chunks/framework.CqnjdYks.js";const l="/docs/cocos/assets/example.B8Q_yIpk.png",_=JSON.parse('{"title":"Marionette 动画系统","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/animation/marionette/index.md","filePath":"zh/manual/animation/marionette/index.md"}'),r={name:"zh/manual/animation/marionette/index.md"},n=i('<h1 id="marionette-动画系统" tabindex="-1">Marionette 动画系统 <a class="header-anchor" href="#marionette-动画系统" aria-label="Permalink to &quot;Marionette 动画系统&quot;">​</a></h1><p>Cocos Creator 3.4 引入了一个全新的 Marionette 动画系统，通过状态机控制对象的骨骼动画，实现了自动化、可复用的动画流程。</p><p>为了跟 v3.4 之前的动画系统区分，我们将新的动画系统称为木偶（Marionette）动画系统，称 v3.4 之前使用的动画系统为旧式动画系统。两种动画系统都可以正常使用，但不支持同时使用。主要的区别在于：</p><ul><li><p>旧式动画系统：以动画组件、动画状态为核心，手动简单控制动画剪辑的播放暂停等。动画剪辑支持使用通过编辑器创建的 Animation Clip 和外部导入的骨骼动画（<code>.fbx</code> 、 <code>.gltf</code> 和 <code>.glb</code>）。</p></li><li><p>Marionette 动画系统：以动画控制器组件、动画图为核心，按照事先搭建好的动画图，通过状态机自动控制动画剪辑的播放和切换等。动画剪辑只支持外部导入的骨骼动画（<code>.fbx</code> 、 <code>.gltf</code> 和 <code>.glb</code>）。</p></li></ul><h2 id="内容" tabindex="-1">内容 <a class="header-anchor" href="#内容" aria-label="Permalink to &quot;内容&quot;">​</a></h2><p>Marionette 动画系统主要内容包括：</p><ul><li><a href="./animation-graph.html">动画图资源</a></li><li><a href="./animation-controller.html">动画控制器组件参考</a></li><li><a href="./animation-graph-panel.html">动画图面板</a></li><li><a href="./animation-graph-layer.html">动画图层级</a></li><li><a href="./animation-graph-basics.html">动画状态机</a></li><li><a href="./state-transition.html">状态过渡</a></li><li><a href="./animation-mask.html">动画遮罩资源</a></li><li><a href="./animation-variant.html">动画图变体</a></li></ul><h2 id="名词解释" tabindex="-1">名词解释 <a class="header-anchor" href="#名词解释" aria-label="Permalink to &quot;名词解释&quot;">​</a></h2><p>Marionette 动画系统相关功能名词的说明如下：</p><table><thead><tr><th style="text-align:left;">功能名词</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">动画图资源</td><td style="text-align:left;">用于存储对象的整个动画流程数据，可直接在 <strong>资源管理器</strong> 面板创建。详情请参考 <a href="./animation-graph.html">动画图资源</a>。</td></tr><tr><td style="text-align:left;">动画控制器组件</td><td style="text-align:left;">引用动画图资源并将其应用于对象。详情请参考 <a href="./animation-controller.html">动画控制器组件参考</a>。</td></tr><tr><td style="text-align:left;">动画图面板</td><td style="text-align:left;">当准备好对象所需的骨骼动画后，便可通过动画图面板将其组合成完整的动画流程。具体的操作请参考 <a href="./animation-graph-panel.html">动画图面板</a>。</td></tr><tr><td style="text-align:left;">状态</td><td style="text-align:left;">对象所处的一种播放特定动画剪辑的动作，例如待机、行走、移动、攻击等。<br>该状态与旧式动画系统中，动画组件为每一个动画剪辑创建的 <a href="./../animation-state.html">动画状态</a> 不同。</td></tr><tr><td style="text-align:left;">状态过渡</td><td style="text-align:left;">大多数情况下，一个对象会拥有多个状态，并按照一定的需求逻辑在各个状态之间切换，这种切换便称为 <a href="./state-transition.html">状态过渡</a>。例如角色在行走时触发了死亡条件，行走状态便会切换到死亡状态。</td></tr><tr><td style="text-align:left;">动画状态机</td><td style="text-align:left;">用于可视化地管理控制某个对象上各个状态及状态之间的过渡，可视为一个流程图。详情请参考 <a href="./animation-graph-basics.html">动画状态机</a>。</td></tr></tbody></table><p>状态及状态过渡在动画图面板中是以图形的方式显示，例如下图，方块表示状态，箭头表示状态之间的过渡：</p><p><img src="'+l+'" alt="example"></p><h2 id="范例参考" tabindex="-1">范例参考 <a class="header-anchor" href="#范例参考" aria-label="Permalink to &quot;范例参考&quot;">​</a></h2><p>Creator 提供了 <strong>Ms.Amoy</strong>（<a href="https://github.com/cocos-creator/example-marionette" target="_blank" rel="noreferrer">GitHub</a>|<a href="https://gitee.com/mirrors_cocos-creator/MarionetteDemo" target="_blank" rel="noreferrer">Gitee</a>）范例，演示了 Marionette 动画系统的使用方式，用户可根据需要下载参考使用。</p>',14),o=[n];function h(s,d,m,c,f,p){return e(),a("div",null,o)}const x=t(r,[["render",h]]);export{_ as __pageData,x as default};
