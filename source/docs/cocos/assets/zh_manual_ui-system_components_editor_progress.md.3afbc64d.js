import{_ as t,v as r,b as e,R as s}from"./chunks/framework.5ffcbaff.js";const a="/docs/cocos/assets/add-progressbar.d05eba21.png",_=JSON.parse('{"title":"ProgressBar 组件参考","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/ui-system/components/editor/progress.md","filePath":"zh/manual/ui-system/components/editor/progress.md"}'),o={name:"zh/manual/ui-system/components/editor/progress.md"},n=s('<h1 id="progressbar-组件参考" tabindex="-1">ProgressBar 组件参考 <a class="header-anchor" href="#progressbar-组件参考" aria-label="Permalink to &quot;ProgressBar 组件参考&quot;">​</a></h1><p>ProgressBar（进度条）经常被用于在游戏中显示某个操作的进度，在节点上添加 ProgressBar 组件，然后给该组件关联一个 Bar Sprite 就可以在场景中控制 Bar Sprite 来显示进度了。</p><p><img src="'+a+'" alt="add-progressbar"></p><p>点击 <strong>属性检查器</strong> 下面的 <strong>添加组件</strong> 按钮，然后选择 <strong>UI/ProgressBar</strong> 即可添加 ProgressBar 组件到节点上。</p><p>进度条的脚本接口请参考 <a href="./__APIDOC__/zh/class/ProgressBar.html">ProgressBar API</a>。</p><p>关于使用可以参考范例 <strong>Progress</strong>（<a href="https://github.com/cocos/cocos-test-projects/tree/v3.7/assets/cases/ui/11.progress" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/test-cases-3d/tree/v3.7/assets/cases/ui/11.progress" target="_blank" rel="noreferrer">Gitee</a>）。</p><h2 id="progressbar-属性" tabindex="-1">ProgressBar 属性 <a class="header-anchor" href="#progressbar-属性" aria-label="Permalink to &quot;ProgressBar 属性&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能说明</th></tr></thead><tbody><tr><td style="text-align:left;">Bar Sprite</td><td style="text-align:left;">进度条渲染所需要的 Sprite 组件，可以通过拖拽一个带有 <strong>Sprite</strong> 组件的节点到该属性上来建立关联。</td></tr><tr><td style="text-align:left;">Mode</td><td style="text-align:left;">支持 <strong>HORIZONTAL</strong>（水平）、<strong>VERTICAL</strong>（垂直）和 <strong>FILLED</strong>（填充）三种模式，可以通过配合 <strong>reverse</strong> 属性来改变起始方向。</td></tr><tr><td style="text-align:left;">Total Length</td><td style="text-align:left;">当进度条为 100% 时 Bar Sprite 的总长度/总宽度。在 <strong>FILLED</strong> 模式下 <strong>Total Length</strong> 表示取 Bar Sprite 总显示范围的百分比，取值范围从 0 ~ 1。</td></tr><tr><td style="text-align:left;">Progress</td><td style="text-align:left;">浮点，取值范围是 0~1，不允许输入之外的数值。</td></tr><tr><td style="text-align:left;">Reverse</td><td style="text-align:left;">布尔值，默认的填充方向是从左至右/从下到上，开启后变成从右到左/从上到下。</td></tr></tbody></table><h2 id="详细说明" tabindex="-1">详细说明 <a class="header-anchor" href="#详细说明" aria-label="Permalink to &quot;详细说明&quot;">​</a></h2><p>添加 ProgressBar 组件之后，通过从 <strong>层级管理器</strong> 中拖拽一个带有 <strong>Sprite</strong> 组件的节点到 Bar Sprite 属性上，此时便可以通过拖动 progress 滑块来控制进度条的显示了。</p><p>Bar Sprite 可以是自身节点，子节点，或者任何一个带有 <strong>Sprite</strong> 组件的节点。另外，Bar Sprite 可以自由选择 Simple、Sliced 和 Filled 渲染模式。</p><p>进度条的模式选择 <strong>FILLED</strong> 的情况下，Bar Sprite 的 <strong>Type</strong> 也需要设置为 <strong>FILLED</strong>，否则会报警告。</p>',12),g=[n];function l(i,p,d,c,h,f){return r(),e("div",null,g)}const b=t(o,[["render",l]]);export{_ as __pageData,b as default};
