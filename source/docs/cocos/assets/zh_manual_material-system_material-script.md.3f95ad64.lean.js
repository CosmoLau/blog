import{_ as s,v as a,b as n,R as l}from"./chunks/framework.5ffcbaff.js";const e="/docs/cocos/assets/add-material.cea8a30c.png",d=JSON.parse('{"title":"程序化使用材质","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/material-system/material-script.md","filePath":"zh/manual/material-system/material-script.md"}'),o={name:"zh/manual/material-system/material-script.md"},p=l(`<h1 id="程序化使用材质" tabindex="-1">程序化使用材质 <a class="header-anchor" href="#程序化使用材质" aria-label="Permalink to &quot;程序化使用材质&quot;">​</a></h1><h2 id="创建材质" tabindex="-1">创建材质 <a class="header-anchor" href="#创建材质" aria-label="Permalink to &quot;创建材质&quot;">​</a></h2><p>材质（Material）资源可以看成是着色器资源（EffectAsset）在场景中的资源实例。</p><p>Creator 支持在 <strong>资源管理器</strong> 中手动 <a href="./../asset/material.html">创建材质资源</a>，同时也支持通过 <a href="./__APIDOC__/zh/#/docs/3.5/zh/material/Interface/IMaterialInfo">IMaterialInfo</a> 接口在脚本模块中程序化地创建材质。<code>IMaterialInfo</code> 的可配置参数包括：</p><ul><li><code>effectAsset</code>/<code>effectName</code>：effect 资源引用，指定使用哪个 EffectAsset 所描述的流程进行渲染。（<code>effectAsset</code> 和 <code>effectName</code> 二者必须选其一）</li><li><code>technique</code>：指定使用 EffectAsset 中的第几个 technique，默认为第 0 个。</li><li><code>defines</code>：宏定义列表，指定开启哪些 <a href="./../shader/macros.html">预处理宏定义</a>，默认全部关闭。</li><li><code>states</code>：管线状态重载列表，指定对渲染管线状态（深度模板透明混合等）有哪些重载，默认与 effect 声明一致。</li></ul><p>创建代码示例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mat </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Material</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">mat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">initialize</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 通过 effect 名指定材质使用的着色器资源</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">effectName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pipeline/skybox</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">defines</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">USE_RGBE_CUBEMAP</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="使用材质" tabindex="-1">使用材质 <a class="header-anchor" href="#使用材质" aria-label="Permalink to &quot;使用材质&quot;">​</a></h2><p><img src="`+e+`" alt="设置材质"></p><p>对任意渲染器组件，可以在脚本模块中进行程序化访问，代码示例如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 通过网格渲染器组件（MeshRenderer、SkinnedMeshRenderer、SkinnedMeshBatchRenderer）可访问 3D 物体的材质</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> renderable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(MeshRenderer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取索引为 0 的材质</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderable</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置索引为 0 的材质</span></span>
<span class="line"><span style="color:#A6ACCD;">renderable</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setMaterial</span><span style="color:#A6ACCD;">(mat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sprite </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(Sprite)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取 2D 渲染器组件的自定义材质</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> customMaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sprite</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">customMaterial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置 2D 渲染器组件的自定义材质</span></span>
<span class="line"><span style="color:#A6ACCD;">sprite</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">customMaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mat</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取和设置粒子发射器的材质</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> particleSystem </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(ParticleSystem)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> particleSystem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">particleSystem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> material</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置和获取粒子拖尾材质</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> trailMaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> particleSystem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">trailMaterial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">particleSystem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">trailMaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> trailMaterial</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p><strong>注意</strong>：</p><ol><li>这里访问的是共享材质。</li><li>材质中存在共享材质和材质实例两种情况，共享材质无法和材质实例进行合批。</li></ol></blockquote><h2 id="设置材质的属性" tabindex="-1">设置材质的属性 <a class="header-anchor" href="#设置材质的属性" aria-label="Permalink to &quot;设置材质的属性&quot;">​</a></h2><p>材质通过 <code>IMaterialInfo</code> 接口初始化后，只能通过 <code>Material.setProperty</code> 来设置材质的 <code>Uniform</code> 变量，代码示例如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uniform name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> uniformValue)</span></span></code></pre></div><p><code>Uniform</code> 对应了 <code>Shader</code> 内声明的由 <code>Uniform</code> 限定的变量。若要了解更多 <code>Uniform</code> 的信息请参考：</p><ul><li><a href="./../shader/uniform.html">Cocos Shader 内置 Uniform</a></li><li><a href="./../shader/glsl.html#存储限定符">GLSL 存储限定符</a></li></ul><p>若需频繁设置 <code>Uniform</code> 的值，请使用 <code>Pass.setUniform</code> 来获得更好的性能。</p><h2 id="共享材质-材质实例" tabindex="-1">共享材质 &amp; 材质实例 <a class="header-anchor" href="#共享材质-材质实例" aria-label="Permalink to &quot;共享材质 &amp; 材质实例&quot;">​</a></h2><p>在渲染器组件中，材质会以 <strong>共享材质</strong> 和 <strong>材质实例</strong> 两种情况存在。</p><ul><li><p><strong>共享材质</strong></p><p>共享材质由多个渲染器组件共同使用，修改共享材质会影响所有使用它的渲染器组件。默认情况下，同一材质在多个渲染器组件之间是共享的。</p><p>获取共享材质的代码示例如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 获取渲染器组件</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> renderableComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(MeshRenderer) </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RenderableComponent</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取共享材质数组中索引为 0 的元素</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sharedMaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderableComponent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sharedMaterial</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取共享材质的数组</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sharedMaterials </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderableComponent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sharedMaterials</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取共享材质数组中索引为 0 的元素</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sharedMaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderableComponent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></li><li><p><strong>材质实例</strong></p><p>材质实例由单个渲染器组件单独使用，修改材质实例仅影响使用它的渲染器组件。材质默认为共享材质，当修改共享材质时，引擎会根据材质创建材质实例，例如：</p><ul><li>当调用 <code>RenderableComponent.getMaterialInstance</code> 或 <code>RenderableComponent.material</code> 的 <code>getter</code> 时，引擎会根据当前的材质创建材质实例</li><li>当调用 <code>RenderableComponent.material</code> 的 <code>setter</code> 时，引擎会根据传入的材质创建材质实例</li></ul><p>代码示例如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 获取渲染器组件</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> renderableComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComponent</span><span style="color:#A6ACCD;">(MeshRenderer) </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RenderableComponent</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取材质实例的数组，若没有则根据当前材质数组进行创建</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> materialInstances </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderableComponent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">materials</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取材质实例数组中索引为 0 的元素，若没有则根据当前材质创建</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> materialInstance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderableComponent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material     </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取材质实例，若没有则根据当前材质创建</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> materialInstance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderableComponent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMaterialInstance</span><span style="color:#A6ACCD;">(materialIndex)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><h3 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h3><p><strong>Q</strong>：修改了材质的属性后，DrawCall 增加了？<br><strong>A</strong>：可能是因为使用了渲染器组件的 <code>getMaterialInstance</code> 或者 <code>RenderableComponent.material</code> 的 <code>getter</code> 方法，导致新的材质实例生成，影响了合批流程。</p>`,23),t=[p];function r(c,i,y,D,C,A){return a(),n("div",null,t)}const m=s(o,[["render",r]]);export{d as __pageData,m as default};
