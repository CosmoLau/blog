import{_ as e,c as t,o,a4 as s}from"./chunks/framework.uQk9_EO2.js";const r="/docs/cocos/assets/blender_model.Bw8d2Cnk.png",n="/docs/cocos/assets/blender_export_fbx_1.BoKfN0mc.png",a="/docs/cocos/assets/blender_model_c3d.CO11GEoi.png",i="/docs/cocos/assets/blender_export_bake.CR3BRnia.png",l="/docs/cocos/assets/blender_model_bake_c3d.CVHS_bFb.png",d="/docs/cocos/assets/blender_export_gltf.CnRcmaqW.png",p="/docs/cocos/assets/relative_path.B02PphWP.png",y=JSON.parse('{"title":"Importing Models Exported from DCC Tools","description":"","frontmatter":{},"headers":[],"relativePath":"en/asset/model/dcc-export-mesh.md","filePath":"en/asset/model/dcc-export-mesh.md","lastUpdated":1712305443000}'),c={name:"en/asset/model/dcc-export-mesh.md"},h=s('<h1 id="importing-models-exported-from-dcc-tools" tabindex="-1">Importing Models Exported from DCC Tools <a class="header-anchor" href="#importing-models-exported-from-dcc-tools" aria-label="Permalink to &quot;Importing Models Exported from DCC Tools&quot;">​</a></h1><p>Currently, most <strong>Digital Content Creation (DCC)</strong> tools (<a href="./max-export-fbx"><strong>3DS Max</strong></a>, <a href="./maya-export-fbx"><strong>Maya</strong></a>, <strong>Blender</strong>) can export models in <strong>FBX</strong> and <strong>glTF</strong> formats. These formats, exported by these tools, can be well received in <strong>Cocos Creator 3.0</strong>.</p><h2 id="exporting-fbx" tabindex="-1">Exporting FBX <a class="header-anchor" href="#exporting-fbx" aria-label="Permalink to &quot;Exporting FBX&quot;">​</a></h2><p>Because the coordinate system of the DCC tool and the game engine&#39;s coordinate system are not necessarily the same, some transformations are required when exporting a model to get the desired result in the engine. For example, Blender&#39;s coordinate system is <strong>X-axis right</strong>, <strong>Y-axis inward</strong>, and <strong>Z-axis upward</strong>, while Cocos Creator 3.x&#39;s coordinate system is <strong>X-axis right</strong>, <strong>Y-axis upward</strong>, and <strong>Z-axis outward</strong>, so the rotation needs to be adjusted to make the axes consistent.</p><p>The following uses Blender 2.8 as an example to introduce the model import process. First, create a model in Blender.</p><p><img src="'+r+'" alt="blender model"></p><p>In <a href="https://docs.blender.org/manual/en/2.80/addons/io_scene_fbx.html" target="_blank" rel="noreferrer">Blender&#39;s FBX Export Options</a> documentation, choose <strong>Up</strong> as <strong>Y Up</strong> and <strong>Forward</strong> as <strong>-Z Forward</strong>.</p><p><img src="'+n+'" alt="blender export"></p><p>Imported into <strong>Cocos Creator</strong>, notice that the nodes are rotated by <strong>-90</strong> on the <strong>X-axis</strong> in order to combine the <strong>axis</strong> with <strong>Cocos Creator</strong>. The axes are aligned.</p><p><img src="'+a+'" alt="blender export c3d"></p><p>To use a different rotation value, Blender&#39;s FBX export plugin provides an experimental function, <strong>Apply Transform</strong>, which can directly transform the rotation data into the model&#39;s vertex data.</p><p><img src="'+i+'" alt="blender export bake"></p><p>Notice that the rotation data is gone in <strong>Cocos Creator 3.x</strong>.</p><p><img src="'+l+'" alt="blender export bake c3d"></p><h2 id="exporting-gltf" tabindex="-1">Exporting glTF <a class="header-anchor" href="#exporting-gltf" aria-label="Permalink to &quot;Exporting glTF&quot;">​</a></h2><p>Please read the following documents:</p><ul><li><p><a href="https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#coordinate-system-and-units" target="_blank" rel="noreferrer">glTF also uses a right-handed coordinate system</a></p></li><li><p><a href="https://docs.blender.org/manual/en/2.80/addons/io_scene_gltf2.html" target="_blank" rel="noreferrer">Options for exporting glTF in Blender</a>. It is relatively simple, as long as the <strong>+Y Up</strong> option is checked, there is no rotation value in the exported data.</p><p><img src="'+d+'" alt="blender export glTF"></p></li></ul><h2 id="possible-issues" tabindex="-1">Possible issues <a class="header-anchor" href="#possible-issues" aria-label="Permalink to &quot;Possible issues&quot;">​</a></h2><p>During the game development process, the orientation of the model may be used. For example, if some objects should face the player (using the <code>LookAt()</code> method), consider the initial orientation of the model. Here are two methods to adjust the initial orientation of the model.</p><ol><li>In <strong>Cocos Creator 3.x</strong>, the <strong>-Z-axis</strong> is used as the forward direction, while in Blender, the forward direction is <strong>+Y-axis</strong>, when making a model, the positive direction of the <strong>Y-axis</strong> should be used as the orientation of the object, and the derived transformation later, in <strong>Cocos Creator</strong>, the <strong>-Z-axis</strong> will be used as the front direction.</li><li>To not change the orientation in the DCC tool, try adding a parent node to the imported model in the scene, and then rotate the model so that the initial orientation of the model is the <strong>-Z-axis</strong>. All subsequent rotation-related operations are based on the parent. A node is an operation object.</li></ol><h2 id="artist-s-production-specifications" tabindex="-1">Artist&#39;s production specifications <a class="header-anchor" href="#artist-s-production-specifications" aria-label="Permalink to &quot;Artist&#39;s production specifications&quot;">​</a></h2><ol><li><p>Reasonably formulating a sub-assets name under model assets (e.g <strong>mesh</strong> or <strong>material</strong>). Each modification of the sub-assets name will result in the loss of the place associated with the sub-assets in the project.</p></li><li><p>When a part of the model needs to be transparent and a part does not need to be transparent, it should be exported into two materials. If it is a material export that is prone to model penetration, you need to manually adjust the material.</p></li><li><p>External asset references, use relative path when exporting. Otherwise, under the cooperation of multiple people, the original asset path will not be recognized, resulting in the model&#39;s built-in materials cannot obtain the texture correctly and appear yellow. <strong>Autodesk 3ds Max</strong> export local path is modified as follows:</p><p><img src="'+p+'" alt="relative path"></p></li></ol>',22),g=[h];function m(x,f,u,b,_,C){return o(),t("div",null,g)}const T=e(c,[["render",m]]);export{y as __pageData,T as default};
