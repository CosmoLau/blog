import{_ as a,c as s,o as e,a4 as t}from"./chunks/framework.uQk9_EO2.js";const _=JSON.parse('{"title":"WebAssembly 支持","description":"","frontmatter":{},"headers":[],"relativePath":"zh/scripting/wasm-support.md","filePath":"zh/scripting/wasm-support.md","lastUpdated":1712305443000}'),r={name:"zh/scripting/wasm-support.md"},o=t('<h1 id="webassembly-支持" tabindex="-1">WebAssembly 支持 <a class="header-anchor" href="#webassembly-支持" aria-label="Permalink to &quot;WebAssembly 支持&quot;">​</a></h1><p>WebAssembly（缩写为 Wasm）是一种基于堆栈的虚拟机的二进制指令格式。 Wasm 被设计为编程语言的可移植编译目标，支持将 C++ 编译成 WebAssembly 并部署到客户端运行时。</p><p>Cocos Creator 从 3.x 版本已经开始尝试在引擎里使用 Wasm 来优化运算效率，截止 3.8.0 版本，目前已经将 bullet，physX，spine，WebGPU 这些模块使用 Wasm 实现。</p><h2 id="包体优化" tabindex="-1">包体优化 <a class="header-anchor" href="#包体优化" aria-label="Permalink to &quot;包体优化&quot;">​</a></h2><p>针对 Wasm 带来的包体问题，我们提供了一些构建的编译选项，来缓解包体问题。</p><h3 id="小游戏平台引擎-wasm-分包" tabindex="-1">小游戏平台引擎 Wasm 分包 <a class="header-anchor" href="#小游戏平台引擎-wasm-分包" aria-label="Permalink to &quot;小游戏平台引擎 Wasm 分包&quot;">​</a></h3><p>在小游戏平台上，我们支持了引擎模块的 Wasm 分包，在构建面板上开启 <strong>引擎 Wasm 分包</strong>， 构建之后引擎的 Wasm 模块会被输出为平台的分包，进而减少主包包体的大小。 注意：由于 physX 模块的包体太大，目前不支持在使用 physX 物理后端时，开启 <strong>引擎 Wasm 分包</strong>。</p><h3 id="web-平台剔除-asm-js-模块" tabindex="-1">Web 平台剔除 asm.js 模块 <a class="header-anchor" href="#web-平台剔除-asm-js-模块" aria-label="Permalink to &quot;Web 平台剔除 asm.js 模块&quot;">​</a></h3><p>Web 平台 Wasm 模块构建后，输出的引擎包括模块的 Wasm 和 asm.js 实现，这是为了在一些不支持 Wasm 的浏览器上，能够将实现回滚到 asm.js 实现，以解决 Wasm 的兼容性问题。<br> 但是这带来的问题是增大了引擎的包体。我们在 Web 平台上提供了 <strong>剔除引擎 asm.js 模块</strong> 的优化选项，如果构建的时候开启这个选项，构建输出的引擎 Wasm 模块将不会附带 asm.js 实现，进而减少引擎的包体占用。</p>',9),m=[o];function n(p,i,l,h,b,c){return e(),s("div",null,m)}const W=a(r,[["render",n]]);export{_ as __pageData,W as default};
