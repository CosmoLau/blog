import{_ as s,v as a,b as n,R as l}from"./chunks/framework.5ffcbaff.js";const i=JSON.parse('{"title":"线程安全","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/advanced-topics/thread-safety.md","filePath":"zh/manual/advanced-topics/thread-safety.md"}'),p={name:"zh/manual/advanced-topics/thread-safety.md"},o=l(`<h1 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h1><h2 id="线程安全-1" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全-1" aria-label="Permalink to &quot;线程安全&quot;">​</a></h2><p>在 Cocos Creator 发布的原生应用中，至少有两个线程：<strong>GL 线程</strong> 和 <strong>原生系统的 UI 线程</strong>。</p><ul><li><strong>GL 线程</strong>：执行 Cocos 引擎的渲染相关代码和 JavaScript 脚本代码</li><li><strong>UI 线程</strong>：平台的原生 UI 创建、响应和更新</li></ul><p>所以，我们需要注意以下两个问题：</p><ol><li>当 UI 线程中的代码要调用 GL 线程中的代码时，需要处理线程安全问题</li><li>当 GL 线程要调用 UI 线程中的代码时，需要处理线程安全问题</li></ol><p>接下来，我们看看不同情况下处理线程安全的方法。</p><h2 id="在-ui-线程中执行" tabindex="-1">在 UI 线程中执行 <a class="header-anchor" href="#在-ui-线程中执行" aria-label="Permalink to &quot;在 UI 线程中执行&quot;">​</a></h2><p>当我们在 Android 平台编写的 Java 方法有 UI 相关的操作，在被 GL 线程中的代码调用时，都需要利用 <code>app.runOnUiThread</code> 方法使代码在 UI 线程中执行，从而确保线程安全。</p><p>我们以弹出一个 Android 的 Alert 对话框为例。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppActivity</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CocosActivity</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">AppActivity</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onCreate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">savedInstanceState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onCreate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">savedInstanceState</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">showAlertDialog</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnUiThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">AlertDialog</span><span style="color:#A6ACCD;"> alertDialog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> AlertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Builder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                alertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                alertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setMessage</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                alertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setIcon</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">R</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">drawable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">icon</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                alertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="在-gl-线程中执行" tabindex="-1">在 GL 线程中执行 <a class="header-anchor" href="#在-gl-线程中执行" aria-label="Permalink to &quot;在 GL 线程中执行&quot;">​</a></h2><p>在 UI 线程中的代码要调用 GL 线程中的代码时，需要使用 <code>CocosHelper.runOnGameThread</code> 来确保线程安全。</p><p>我们以按钮事件响应为例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">alertDialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setButton</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">OK</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> DialogInterface</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OnClickListener</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onClick</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DialogInterface</span><span style="color:#A6ACCD;"> dialog</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> which</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 一定要在 GL 线程中执行</span></span>
<span class="line"><span style="color:#A6ACCD;">        CocosHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runOnGameThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                CocosJavascriptJavaBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evalString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cc.log(</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">Javascript Java bridge!</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><h2 id="objective-c-c" tabindex="-1">Objective-C / C++ <a class="header-anchor" href="#objective-c-c" aria-label="Permalink to &quot;Objective-C / C++&quot;">​</a></h2><p>如果写的 Objective-C 或者 C++ 代码想要确保线程安全，可以通过 <code>CC_CURRENT_ENGINE()-&gt;getScheduler()-&gt;performFunctionInCocosThread</code> 方法让代码在 GL 线程中执行。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">CC_CURRENT_ENGINE</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">getScheduler</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">performFunctionInCocosThread</span><span style="color:#89DDFF;">([=](){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //TO DO</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><blockquote><p><strong>注意:</strong> 这是 C++ 方法，如果想要在 Objective-C 代码中调用，需要 Objective-C 代码文件后缀为 *.mm。</p></blockquote>`,19),e=[o];function t(c,r,D,A,y,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
