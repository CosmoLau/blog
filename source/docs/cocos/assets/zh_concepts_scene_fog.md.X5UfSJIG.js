import{_ as t,c as e,o,a4 as s}from"./chunks/framework.uQk9_EO2.js";const a="/docs/cocos/assets/enable-fog.BPtOly5G.png",r="/docs/cocos/assets/accurate.DaCC_xmU.png",n="/docs/cocos/assets/accuracy_off.HRj4t_2q.png",l="/docs/cocos/assets/accuracy_on.DYg6q7kL.png",g="/docs/cocos/assets/linear_fog.CgreFQ44.png",d="/docs/cocos/assets/exp-properties.D8K37SVu.png",i="/docs/cocos/assets/layerfog.BtlTfyhV.png",E=JSON.parse('{"title":"全局雾","description":"","frontmatter":{},"headers":[],"relativePath":"zh/concepts/scene/fog.md","filePath":"zh/concepts/scene/fog.md","lastUpdated":1712305443000}'),c={name:"zh/concepts/scene/fog.md"},p=s('<h1 id="全局雾" tabindex="-1">全局雾 <a class="header-anchor" href="#全局雾" aria-label="Permalink to &quot;全局雾&quot;">​</a></h1><p>全局雾用于在游戏中模拟室外环境中的雾效果。在游戏中除了用于雾效表现外，还可以用于隐藏摄像机远剪切平面外的模型来提高渲染的性能。</p><p>全局雾的类型目前包括 <strong>线性雾</strong>、<strong>指数雾</strong>、<strong>指数平方雾</strong>、<strong>层雾</strong> 四种，详情请参考下文 <strong>全局雾类型</strong> 部分的内容。</p><h2 id="开启全局雾" tabindex="-1">开启全局雾 <a class="header-anchor" href="#开启全局雾" aria-label="Permalink to &quot;开启全局雾&quot;">​</a></h2><p>在 <strong>层级管理器</strong> 中选中场景根节点，然后在 <strong>属性检查器</strong> 的 <strong>Fog</strong> 组件中勾选 <strong>Enabled</strong> 属性即可开启全局雾。</p><p><img src="'+a+'" alt="image"></p><h2 id="精确雾效计算-accurate" tabindex="-1">精确雾效计算（Accurate） <a class="header-anchor" href="#精确雾效计算-accurate" aria-label="Permalink to &quot;精确雾效计算（Accurate）&quot;">​</a></h2><p>在 v3.4 之前，Creator 默认使用的是基于 <strong>顶点</strong> 的雾效计算，这在 <strong>顶点数较少而体积较大</strong> 的物体上会出现异常的雾效过渡效果。因此为了解决该问题，Creator 从 v3.4 开始增加了 <strong>Accurate</strong> 选项，用于开启基于 <strong>像素</strong> 的精确雾效计算。</p><p><img src="'+r+'" alt="accurate"></p><p>当不勾选 <strong>Accurate</strong> 选项，即未开启精确雾效时的效果如下：</p><p><img src="'+n+'" alt="accuracy_off"></p><p>当勾选 <strong>Accurate</strong> 选项，即开启精确雾效时的效果如下：</p><p><img src="'+l+'" alt="accuracy_on"></p><h3 id="版本升级-—-cocos-shader-effect-迁移" tabindex="-1">版本升级 — Cocos Shader（Effect）迁移 <a class="header-anchor" href="#版本升级-—-cocos-shader-effect-迁移" aria-label="Permalink to &quot;版本升级 — Cocos Shader（Effect）迁移&quot;">​</a></h3><p>当旧项目升级到 v3.4 时，<strong>所有调用到 <code>CC_APPLY_FOG</code> 的 Shader 代码都需要修改，增加第二个参数 <code>worldPos</code></strong>。例如：</p><ul><li><p>原代码如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CC_APPLY_FOG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(finalColor);</span></span></code></pre></div></li><li><p>升级到 v3.4 后需要改成：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CC_APPLY_FOG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(finalColor, v_position.xyz);</span></span></code></pre></div></li></ul><h2 id="全局雾类型" tabindex="-1">全局雾类型 <a class="header-anchor" href="#全局雾类型" aria-label="Permalink to &quot;全局雾类型&quot;">​</a></h2><p>全局雾的雾效类型包括 <strong>线性雾</strong>（LINEAR）、<strong>指数雾</strong>（EXP）、<strong>指数平方雾</strong>（EXP_SQUARED）、<strong>层雾</strong>（LAYERED）四种。类型取决于 <strong>相机</strong> 与 <strong>模型顶点</strong> 的计算结果，这个计算结果称为 <strong>雾效混合因子</strong>。雾效混合因子决定了雾效颜色和模型颜色的混合方式，最终展现出来的不同的全局雾效果。</p><h3 id="线性雾-linear" tabindex="-1">线性雾（Linear） <a class="header-anchor" href="#线性雾-linear" aria-label="Permalink to &quot;线性雾（Linear）&quot;">​</a></h3><p><img src="'+g+'" alt="linear_fog"></p><p>线性雾相关属性说明如下：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Enabled</strong></td><td style="text-align:left;">勾选该项以开启全局雾</td></tr><tr><td style="text-align:left;"><strong>Accurate</strong></td><td style="text-align:left;">若勾选该项，使用像素雾计算，像素雾在顶点数少面积大的物体上有更精确的雾化效果；<br> 若不勾选该项，使用顶点雾计算，顶点雾具有更好的性能。</td></tr><tr><td style="text-align:left;"><strong>FogColor</strong></td><td style="text-align:left;">设置全局雾的颜色</td></tr><tr><td style="text-align:left;"><strong>Type</strong></td><td style="text-align:left;">全局雾的雾效类型</td></tr><tr><td style="text-align:left;"><strong>FogStart</strong></td><td style="text-align:left;">雾效影响的起始位置</td></tr><tr><td style="text-align:left;"><strong>FogEnd</strong></td><td style="text-align:left;">雾效影响的结束位置</td></tr></tbody></table><p>线性雾的雾效混合因子计算公式为：</p><p><strong>f = (FogEnd - Cam_dis) / (FogEnd - FogStart)</strong></p><ul><li><p>当 <code>Cam_dis = FogEnd</code>，也就是相机与模型顶点的距离等于 <code>FogEnd</code> 时，混合因子的计算结果为 0，此时物体为全雾效。</p></li><li><p>当 <code>Cam_dis = FogStart</code>，也就是相机与模型顶点的距离等于 <code>FogStart</code> 时，混合因子的计算结果为 1，此时物体不受任何雾效的影响。</p></li></ul><p>在相机与模型顶点的距离固定的情况下，若要增加线性雾的浓度，有以下两种方式：</p><ol><li>固定 <code>FogStart</code> 数值，减小 <code>FogEnd</code> 数值。</li><li>减小 <code>FogStart</code> 数值，固定 <code>FogEnd</code> 数值。</li></ol><p>如果要调整合适的雾效浓度，最好同时对 <code>FogStart</code> 和 <code>FogEnd</code> 属性进行适当的调整。</p><h3 id="指数雾-exponential-和指数平方雾-exponential-squared" tabindex="-1">指数雾（Exponential）和指数平方雾（Exponential Squared） <a class="header-anchor" href="#指数雾-exponential-和指数平方雾-exponential-squared" aria-label="Permalink to &quot;指数雾（Exponential）和指数平方雾（Exponential Squared）&quot;">​</a></h3><p><img src="'+d+'" alt="exp-properties"></p><p>指数雾和指数平方雾的属性一致，这里以指数雾为例：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Enabled</strong></td><td style="text-align:left;">是否开启全局雾</td></tr><tr><td style="text-align:left;"><strong>Accurate</strong></td><td style="text-align:left;">若勾选该项，使用像素雾计算，像素雾在顶点数少面积大的物体上有更精确的雾化效果；<br> 若不勾选该项，使用顶点雾计算，顶点雾具有更好的性能。</td></tr><tr><td style="text-align:left;"><strong>FogColor</strong></td><td style="text-align:left;">设置全局雾的颜色</td></tr><tr><td style="text-align:left;"><strong>Type</strong></td><td style="text-align:left;">全局雾的雾效类型</td></tr><tr><td style="text-align:left;"><strong>FogDensity</strong></td><td style="text-align:left;">雾效浓度，取值范围为 0 ~ 1，值越大浓度越高</td></tr><tr><td style="text-align:left;"><strong>FogStart</strong></td><td style="text-align:left;">雾效影响的起始位置</td></tr><tr><td style="text-align:left;"><strong>FogAtten</strong></td><td style="text-align:left;">雾效衰减系数，该值越小则雾越浓</td></tr></tbody></table><p><strong>指数雾</strong> 的雾效混合因子计算公式为：</p><p><strong>f = e^(-max(0, distance-fogStart) * fogDensity)</strong></p><p><strong>指数平方雾</strong> 的雾效混合因子计算公式为：</p><p><strong>f = e^(-max(0, distance-fogStart) * fogDensity)²</strong></p><p>开发者可以通过 <code>FogStart</code> 来调整全局雾在远近的分布，通过 <code>FogDensity</code> 和 <code>FogAtten</code> 来调整雾在不同位置的浓度。</p><h3 id="层雾-layered" tabindex="-1">层雾（Layered） <a class="header-anchor" href="#层雾-layered" aria-label="Permalink to &quot;层雾（Layered）&quot;">​</a></h3><p>层雾（Layered）平行于水平面，具有一定的高度。可在场景世界坐标系垂直方向上的任一位置设定层雾的顶部，以此来确定雾的高低。</p><p><img src="'+i+'" alt="image"></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Enabled</strong></td><td style="text-align:left;">是否开启全局雾</td></tr><tr><td style="text-align:left;"><strong>Accurate</strong></td><td style="text-align:left;">若勾选该项，使用像素雾计算，像素雾在顶点数少面积大的物体上有更精确的雾化效果；<br> 若不勾选该项，使用顶点雾计算，顶点雾具有更好的性能。</td></tr><tr><td style="text-align:left;"><strong>FogColor</strong></td><td style="text-align:left;">设置全局雾的颜色</td></tr><tr><td style="text-align:left;"><strong>Type</strong></td><td style="text-align:left;">全局雾的雾效类型</td></tr><tr><td style="text-align:left;"><strong>FogAtten</strong></td><td style="text-align:left;">雾效衰减系数，该值越小则雾越浓</td></tr><tr><td style="text-align:left;"><strong>FogTop</strong></td><td style="text-align:left;">模型顶点在世界坐标系垂直方向上的位置，小于该位置时所有的顶点都会受到雾效效果的影响</td></tr><tr><td style="text-align:left;"><strong>FogRange</strong></td><td style="text-align:left;">雾化效果从设置的 <strong>FogTop</strong> 向下所影响的范围</td></tr></tbody></table><p>层雾的雾效计算相比其他三种雾效类型稍显复杂，引入了 <code>FogTop</code> 的概念，同时还需要在 <strong>X-Z</strong> 平面进行距离计算。</p><p>层雾在现实中还是比较常见的，高耸入云的山脉和建筑物都有它的身影，如果能合理利用，相信对场景展现效果有不错的提升，但与此同时计算量也会有一定的增大，开发者可根据需要决定是否使用。</p>',43),h=[p];function f(y,x,_,u,b,m){return o(),e("div",null,h)}const k=t(c,[["render",f]]);export{E as __pageData,k as default};
