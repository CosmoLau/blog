import{_ as s,c as e,o as a,a4 as i}from"./chunks/framework.uQk9_EO2.js";const E=JSON.parse('{"title":"模块规范","description":"","frontmatter":{},"headers":[],"relativePath":"zh/scripting/modules/spec.md","filePath":"zh/scripting/modules/spec.md","lastUpdated":1712305443000}'),o={name:"zh/scripting/modules/spec.md"},t=i(`<h1 id="模块规范" tabindex="-1">模块规范 <a class="header-anchor" href="#模块规范" aria-label="Permalink to &quot;模块规范&quot;">​</a></h1><h2 id="模块格式" tabindex="-1">模块格式 <a class="header-anchor" href="#模块格式" aria-label="Permalink to &quot;模块格式&quot;">​</a></h2><p>本节介绍了 Cocos Creator 如何决定一个模块的格式。</p><p>Cocos Creator 引擎提供的所有功能都以 ESM 模块的形式存在，见 <a href="./">引擎模块</a>。</p><p>项目资源目录中（一般地，任何资产数据库中）以 <code>.ts</code> 作为后缀的文件都视为 ESM 模块。例如 <code>assets/scripts/foo.ts</code>。</p><p>对于任何其它模块格式，Cocos Creator 选择与 Node.js 类似的规则来 <a href="https://nodejs.org/api/packages.html#packages_determining_module_system" target="_blank" rel="noreferrer">鉴别</a>。具体地，以下文件将被视为 ESM 格式：</p><ul><li><p>以 <code>.mjs</code> 为后缀的文件；</p></li><li><p>以 <code>.js</code> 为后缀的文件，并且与其最相近的父级 <code>package.json</code> 文件中包含一个顶级的 <code>&quot;type&quot;</code> 字段，其值为 <code>&quot;module&quot;</code>。</p></li></ul><p>其余的文件将被视为 CommonJS 模块格式，这包括：</p><ul><li><p>以 <code>.cjs</code> 为后缀的文件；</p></li><li><p>以 <code>.js</code> 为后缀的文件，并且与其最相近的父级 <code>package.json</code> 文件中包含一个顶级的 <code>&quot;type&quot;</code> 字段，其值为 <code>&quot;commonjs&quot;</code>。</p></li><li><p>不在上述条件下的以 <code>.js</code> 为后缀的文件。</p></li></ul><h2 id="模块说明符与模块解析" tabindex="-1">模块说明符与模块解析 <a class="header-anchor" href="#模块说明符与模块解析" aria-label="Permalink to &quot;模块说明符与模块解析&quot;">​</a></h2><p>在 ESM 模块中，通过标准的导入导出语句与目标模块进行交互，例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Foo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Bar } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>导入导出语句中关键字 <code>from</code> 后的字符串称为 <strong>模块说明符</strong>。模块说明符也可作为参数出现在动态导入表达式 <code>import()</code> 中。</p><p>模块说明符用于指定目标模块，从模块说明符中解析出目标模块 URL 的过程称为 <strong>模块解析</strong>。</p><p>Cocos Creator 支持三种模块说明符：</p><ul><li><p><strong>相对说明符</strong> 像 <code>&#39;./foo&#39;</code>、<code>&#39;../bar&#39;</code> 这样以 <code>&#39;./&#39;</code> 和 <code>&#39;../&#39;</code> 开头的说明符。</p></li><li><p><strong>绝对说明符</strong> 指定了一个 URL 的说明符。例如：<code>foo:/bar</code>。</p></li><li><p><strong>裸说明符</strong>（Bare specifier）像 <code>foo</code>、<code>foo/bar</code> 这样既不是 URL 又不是相对说明符的说明符。</p></li></ul><h3 id="相对说明符" tabindex="-1">相对说明符 <a class="header-anchor" href="#相对说明符" aria-label="Permalink to &quot;相对说明符&quot;">​</a></h3><p>相对说明符以当前模块的 URL 为基础 URL，以相对说明符为输入来解析目标模块的 URL。</p><p>例如，对于模块 <code>项目路径/assets/scripts/utils/foo</code> 来说，<code>&#39;./bar&#39;</code> 将解析为同目录下的 <code>项目路径/assets/scripts/utils/bar</code>；<code>&#39;../baz&#39;</code> 将解析为上层目录中的 <code>项目路径/assets/scripts/baz</code>。</p><h3 id="绝对说明符" tabindex="-1">绝对说明符 <a class="header-anchor" href="#绝对说明符" aria-label="Permalink to &quot;绝对说明符&quot;">​</a></h3><p>绝对说明符直接指定了目标模块的 URL。</p><h4 id="资产数据库协议" tabindex="-1">资产数据库协议 <a class="header-anchor" href="#资产数据库协议" aria-label="Permalink to &quot;资产数据库协议&quot;">​</a></h4><p>通过 <code>db://&lt;db-name&gt;/x/y/z.mjs</code> 这样的 URL 可以访问某个资产数据库中的模块。该 URL 的组成部分如下：</p><ul><li><p>URL 协议头 <code>db:</code> 是固定的。</p></li><li><p>URL 主机（host）为 <code>//&lt;db-name&gt;</code>。其中<code>&lt;db-name&gt;</code> 是资产数据库的标识符，一般情况下，它即是挂载了该资产数据库的插件的标识符。当 <code>&lt;db-name&gt;</code> 为 <code>assets</code> 时，指代项目资产数据库；为 <code>internal</code> 时，指代 Cocos Creator 内置资产数据库。</p></li><li><p>URL 路径名是指定了模块相对于资产数据库根目录的路径。</p></li></ul><h4 id="文件协议" tabindex="-1">文件协议 <a class="header-anchor" href="#文件协议" aria-label="Permalink to &quot;文件协议&quot;">​</a></h4><p>Cocos Creator 支持文件协议的 URL，例如 <code>file:///C:/x/y/z.mjs</code>。但由于文件 URL 中指定的文件路径是绝对路径，因此很少使用。</p><blockquote><p>值得注意的是，在 Node.js 中，一种访问 Node.js 内置模块的方法是通过 <code>node:</code> 协议的 URL，例如：<code>node:fs</code>。Cocos Creator 会将所有对 Node.js 内置模块的访问请求解析为 <code>node:</code> URL 请求，例如 <code>import fs from &#39;fs&#39;</code> 中的 <code>&#39;fs&#39;</code> 将解析为 <code>node:fs</code>。但 Cocos Creator 并不支持 Node.js 内置模块，也就是说并不支持 <code>node:</code> 协议。因此会产生加载错误。当使用 npm 中的模块时，可能会遇到该错误。</p></blockquote><h3 id="裸说明符" tabindex="-1">裸说明符 <a class="header-anchor" href="#裸说明符" aria-label="Permalink to &quot;裸说明符&quot;">​</a></h3><p>目前为止，对于裸说明符，Cocos Creator 将应用 <a href="./import-map">导入映射（实验性质）</a> 和 <a href="https://nodejs.org/api/esm.html#esm_resolver_algorithm_specification" target="_blank" rel="noreferrer">Node.js 模块解析算法</a>。</p><blockquote><p>这就包括了对 npm 模块的解析。</p></blockquote><h4 id="条件性导出" tabindex="-1">条件性导出 <a class="header-anchor" href="#条件性导出" aria-label="Permalink to &quot;条件性导出&quot;">​</a></h4><p>在 Node.js 模块解析算法中，<a href="https://nodejs.org/api/packages.html#packages_conditional_exports" target="_blank" rel="noreferrer">包的条件性导出</a> 特性用于根据一些条件映射包中的子路径。与 Node.js 类似，Cocos Creator 实现了内置条件 <code>import</code>、<code>default</code>，但未实现条件 <code>require</code>、<code>node</code>。</p><p>开发者可通过编辑器主菜单 <strong>项目 -&gt; 项目设置 -&gt; 脚本</strong> 中的 <strong>导出条件</strong> 项指定 <strong>额外</strong> 的条件，该项默认值为 <strong>browser</strong>，可用 <strong>逗号</strong> 作为分隔符来指定多个额外条件，例如 <code>browser, bar</code>。</p><p>若 <strong>导出条件</strong> 项使用默认值 <code>browser</code>，当某 npm 包 <code>foo</code> 的 <code>package.json</code> 中包含以下配置时：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/browser-main.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/main.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>&quot;foo&quot;</code> 将解析为包中路径为 <code>dist/browser-main.mjs</code> 的模块。</p><blockquote><p><a href="https://www.npmjs.com/package/colyseus" target="_blank" rel="noreferrer">多玩家框架 Colyseus</a> 中就为 <code>browser</code> 条件做了映射配置。</p></blockquote><p>若 <strong>导出条件</strong> 项设置为空，则表示不指定任何额外条件，上例中的 <code>&quot;foo&quot;</code> 将解析为包中路径为 <code>dist/main.mjs</code> 的模块。</p><h3 id="后缀与目录导入" tabindex="-1">后缀与目录导入 <a class="header-anchor" href="#后缀与目录导入" aria-label="Permalink to &quot;后缀与目录导入&quot;">​</a></h3><p>Cocos Creator 对模块说明符中模块的后缀要求更偏向于 Web —— 必须指定后缀并且不支持 Node.js 式的目录导入。然而，基于历史原因和现行的一些限制，TypeScript 模块不允许给出后缀并支持 Node.js 式的目录导入。具体来说：</p><p>当目标模块文件的后缀是 <code>.js</code>、<code>.mjs</code> 时，模块说明符中 <strong>必须指定</strong> 后缀：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误：无法找到指定模块</span></span></code></pre></div><p>Node.js 式的目录导入是不支持的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo/index.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误：无法找到模块。</span></span></code></pre></div><blockquote><p>这种后缀要求与对目录导入的限制同时应用到了相对说明符和绝对说明符。对于在裸说明符中的要求可参考 Node.js 模块解析算法。</p></blockquote><p>但当目标模块文件的后缀是 <code>.ts</code> 时，模块说明符中 <strong>不允许指定</strong> 后缀：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确：解析为同目录下的 \`foo.ts\` 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误：无法找到指定模块</span></span></code></pre></div><p>另一方面，支持 Node.js 式的目录导入：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确：解析为 \`foo/index.ts\` 模块</span></span></code></pre></div><blockquote><p><strong>注意</strong>：</p><ol><li>Cocos Creator 支持 Web 平台。在 Web 平台上实现 Node.js 那样复杂的模块解析算法成本是昂贵的，客户端和服务端之间无法通过频繁的通讯来尝试不同的后缀和文件路径。</li><li>即使通过一些后处理工具可以实现在构建阶段完成这样的复杂解析，但会造成静态导入解析（通过 <code>import</code> 语句）和动态导入解析（通过 <code>import()</code> 表达式）算法的不一致。因此在模块解析算法的选择上，我们更偏向于在代码中指定完整的文件路径。</li><li>但我们却无法完全限制这一点，因为就目前来说，TypeScript 中不允许在说明符中指定后缀为 <code>.ts</code>。并且 TypeScript 尚且不支持自动补全特定的目标后缀。在这些限制下，我们很难做到两全其美，但我们仍在观测这些条件在未来是否有好转。</li></ol></blockquote><h3 id="未支持-browser-字段" tabindex="-1">未支持 <code>browser</code> 字段 <a class="header-anchor" href="#未支持-browser-字段" aria-label="Permalink to &quot;未支持 \`browser\` 字段&quot;">​</a></h3><p>有些 npm 包的清单文件 <code>package.json</code> 中记录了 <code>browser</code> 字段，例如 <a href="https://github.com/Stuk/jszip" target="_blank" rel="noreferrer">JSZip</a>。<code>browser</code> 字段用于指定当该包在非 Node.js 环境下特有的模块解析方法，它可使得包中的某些专用于 Node.js 的模块被替换为能够在 Web 中使用的模块。虽然 Cocos Creator <strong>不支持该字段</strong>，但如果对 npm 包有编辑的能力，Cocos Creator 推荐使用 <a href="https://nodejs.org/api/packages.html#packages_conditional_exports" target="_blank" rel="noreferrer">条件化导出</a> 和 <a href="https://nodejs.org/api/packages.html#packages_subpath_imports" target="_blank" rel="noreferrer">子路径导入</a> 来代替 <code>browser</code> 字段。</p><p>否则，可以以非 npm 的方式使用目标库。例如，将目标库中专为非 Node.js 环境制定的模块复制至项目中，再通过相对路径来导入。</p><h2 id="commonjs-模块解析" tabindex="-1">CommonJS 模块解析 <a class="header-anchor" href="#commonjs-模块解析" aria-label="Permalink to &quot;CommonJS 模块解析&quot;">​</a></h2><p>在 CommonJS 模块中，Cocos Creator 应用的是 <a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noreferrer">Node.js CommonJS 模块解析算法</a>。</p><h2 id="模块格式交互" tabindex="-1">模块格式交互 <a class="header-anchor" href="#模块格式交互" aria-label="Permalink to &quot;模块格式交互&quot;">​</a></h2><p>Cocos Creator 允许在 ESM 模块中导入 CommonJS 模块。</p><p>当从 ESM 模块中导入 CommonJS 模块时，CommonJS 模块的 <code>module.exports</code> 对象将作为 ESM 模块的默认导出：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { log } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上面导入语句的另一种写法：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjsSugar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cjs);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cjs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjsSugar);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &lt;module.exports&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   true</span></span></code></pre></div><p>CommonJS 模块的 <a href="https://tc39.es/ecma262/#sec-module-namespace-objects" target="_blank" rel="noreferrer">ECMAScript 模块命名空间</a> 表示，是含有一个 <code>default</code> 导出的命名空间，其中的 <code>default</code> 导出就指向了 CommonJS 模块的 <code>module.exports</code> 的值。</p><p>该 <a href="https://tc39.es/ecma262/#module-namespace-exotic-object" target="_blank" rel="noreferrer">模块命名空间外来对象</a> 可以通过 <code>import * as m from &#39;cjs&#39;</code> 来观察：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   [Module] { default: &lt;module.exports&gt; }</span></span></code></pre></div><h2 id="cocos-creator-esm-解析算法公示" tabindex="-1">Cocos Creator ESM 解析算法公示 <a class="header-anchor" href="#cocos-creator-esm-解析算法公示" aria-label="Permalink to &quot;Cocos Creator ESM 解析算法公示&quot;">​</a></h2><p>Cocos Creator 用于解析 ESM 模块说明符的算法由以下的 <code>CREATOR_ESM_RESOLVE</code> 方法给出。它返回从当前 URL 解析模块说明符得到的 URL 结果。</p><p>在解析算法规范中，引用了<a href="https://nodejs.org/api/esm.html#esm_resolution_algorithm" target="_blank" rel="noreferrer">Node ESM 解析算法</a> 和 <a href="https://wicg.github.io/import-maps/#new-resolve-algorithm" target="_blank" rel="noreferrer">Import Map 解析算法</a>（引用为 <code>IMPORT_MAP_RESOLVE</code>）。</p><h3 id="解析算法规范" tabindex="-1">解析算法规范 <a class="header-anchor" href="#解析算法规范" aria-label="Permalink to &quot;解析算法规范&quot;">​</a></h3><p><code>CREATOR_ESM_RESOLVE(specifier, parentURL)</code></p><ol><li>Let <code>resolved</code> be the result of <code>CREATOR_STD_RESOLVE(specifier, parentURL)</code>.</li><li>If both <code>parentURL</code> and <code>resolved</code> are under project assets directory, then <ol><li>Let <code>extensionLessResolved</code> be the result of <code>TRY_EXTENSION_LESS_RESOLVE(resolved)</code>. <ol><li>If <code>extensionLessResolved</code> is not <code>undefined</code>, return <code>extensionLessResolved</code>.</li></ol></li></ol></li><li>Return <code>resolved</code>.</li></ol><p><code>CREATOR_STD_RESOLVE(specifier, parentURL)</code></p><ol><li>If import map configured, then 1. Let <code>resolved</code> be the result of <code>IMPORT_MAP_RESOLVE(specifier, parentURL)</code>, with parsed import map. 2. If <code>resolved</code> is not nil, return <code>resolved</code>.</li><li>return <code>ESM_RESOLVE(specifier, parentURL)</code>.</li></ol><p><code>TRY_EXTENSION_LESS_RESOLVE(url)</code></p><ol><li>If the file at <code>url</code> exists, then <ol><li>Return <code>url</code>.</li></ol></li><li>Let <code>baseName</code> be the portion after the last &quot;/&quot; in pathname of <code>url</code>, or whole pathname if it does not contain a &quot;/&quot;.</li><li>If <code>baseName</code> is empty, then <ol><li>Return <code>undefined</code>.</li></ol></li><li>Let <code>resolved</code> be the result URL resolution of &quot;./&quot; concatenated with <code>baseName</code> and <code>.ts</code>, relative to parentURL. <ol><li>If the file at <code>resolved</code> exists, then</li><li>Return <code>resolved</code>.</li></ol></li><li>Let <code>resolved</code> be the result URL resolution of &quot;./&quot; concatenated with <code>baseName</code> and <code>/index.ts</code>, relative to parentURL. <ol><li>If the file at <code>resolved</code> exists, then</li><li>Return <code>resolved</code>.</li></ol></li><li>Return <code>undefined</code>.</li></ol>`,72),l=[t];function n(p,r,d,h,c,k){return a(),e("div",null,l)}const u=s(o,[["render",n]]);export{E as __pageData,u as default};
