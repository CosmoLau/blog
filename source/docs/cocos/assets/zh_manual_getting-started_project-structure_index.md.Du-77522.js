import{_ as e,c as a,o,a5 as t}from"./chunks/framework.CqnjdYks.js";const s="/docs/cocos/assets/project-file.LUjx6Mjx.png",g=JSON.parse('{"title":"项目结构","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/getting-started/project-structure/index.md","filePath":"zh/manual/getting-started/project-structure/index.md"}'),c={name:"zh/manual/getting-started/project-structure/index.md"},r=t('<h1 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h1><p>通过 Dashboard，我们可以创建一个 Hello World 项目作为开始，创建之后的项目有特定的文件夹结构，我们将在这一节熟悉 Cocos Creator 项目的文件夹结构。</p><h2 id="项目文件夹结构" tabindex="-1">项目文件夹结构 <a class="header-anchor" href="#项目文件夹结构" aria-label="Permalink to &quot;项目文件夹结构&quot;">​</a></h2><p>初次创建并打开一个 Cocos Creator 项目后，开发者项目文件夹的结构如下：</p><p><img src="'+s+'" alt="project-file"></p><ul><li><p><code>assets</code>：资源目录</p></li><li><p><code>build</code>：构建目录（在构建某平台后会生成该目录）</p></li><li><p><code>library</code>：导入的资源目录</p></li><li><p><code>local</code>：日志文件目录</p></li><li><p><code>profiles</code>：编辑器配置</p></li><li><p><code>temp</code>：临时文件目录</p></li><li><p><code>package.json</code>：项目配置</p></li></ul><h3 id="资源文件夹-assets" tabindex="-1">资源文件夹（assets） <a class="header-anchor" href="#资源文件夹-assets" aria-label="Permalink to &quot;资源文件夹（assets）&quot;">​</a></h3><p><code>assets</code> 用来放置游戏中所有的本地资源、脚本和第三方库文件。只有在 <code>assets</code> 目录下的内容才能显示在 <strong>资源管理器</strong> 中。<code>assets</code> 中的每个文件在导入项目后都会生成一个相同名字的 <code>.meta</code> 文件，用于存储对应的资源配置和索引信息。<code>.meta</code> 文件需要一并提交到版本控制系统，详见 <a href="./../../asset/meta.html">资源管理注意事项 --- meta 文件</a>。</p><p>一些第三方工具生成的工程或设计源文件，如 TexturePacker 的 <code>.tps</code> 文件，或 Photoshop 的 <code>.psd</code> 文件，可以选择放在 <code>assets</code> 外面管理。</p><h3 id="构建目标-build" tabindex="-1">构建目标（build） <a class="header-anchor" href="#构建目标-build" aria-label="Permalink to &quot;构建目标（build）&quot;">​</a></h3><p>在使用编辑器主菜单中的 <strong>项目 -&gt; 构建发布</strong> 使用默认发布路径发布项目后，编辑器会在项目路径下创建 <code>build</code> 目录，并存放所有目标平台的构建工程。</p><h3 id="资源库-library" tabindex="-1">资源库（library） <a class="header-anchor" href="#资源库-library" aria-label="Permalink to &quot;资源库（library）&quot;">​</a></h3><p><code>library</code> 是将 <code>assets</code> 中的资源导入后生成的，在这里文件的结构和资源的格式将被处理成最终游戏发布时需要的形式。</p><p>当 <code>library</code> 丢失或损坏的时候，只要删除整个 <code>library</code> 文件夹再打开项目，就会重新生成资源库。</p><h3 id="本地设置-local" tabindex="-1">本地设置（local） <a class="header-anchor" href="#本地设置-local" aria-label="Permalink to &quot;本地设置（local）&quot;">​</a></h3><p><code>local</code> 文件夹中包含该项目的本机上的配置信息，包括编辑器面板布局、窗口大小、位置等信息。开发者不需要关心这里的内容。</p><h3 id="编辑器配置-profiles" tabindex="-1">编辑器配置（profiles） <a class="header-anchor" href="#编辑器配置-profiles" aria-label="Permalink to &quot;编辑器配置（profiles）&quot;">​</a></h3><p><code>profiles</code> 文件夹中包含编辑器的配置信息，包括各目标平台的构建配置信息、场景配置信息等。</p><h3 id="扩展插件文件夹-extensions" tabindex="-1">扩展插件文件夹（extensions） <a class="header-anchor" href="#扩展插件文件夹-extensions" aria-label="Permalink to &quot;扩展插件文件夹（extensions）&quot;">​</a></h3><p><code>extensions</code> 文件夹用于放置此项目的自定义扩展插件。如果需要手动安装扩展插件，可以手动创建该文件夹。如需卸载扩展插件，在 <code>extensions</code> 中删除对应的文件夹即可。</p><h3 id="项目设置-settings" tabindex="-1">项目设置（settings） <a class="header-anchor" href="#项目设置-settings" aria-label="Permalink to &quot;项目设置（settings）&quot;">​</a></h3><p><code>settings</code> 里保存特定项目相关的设置，如 <strong>项目设置</strong> 面板中相关的配置信息等。如果需要在不同开发者之间同步项目设置，请将 settings 目录加入到版本控制。</p><h3 id="临时文件夹-temp" tabindex="-1">临时文件夹（temp） <a class="header-anchor" href="#临时文件夹-temp" aria-label="Permalink to &quot;临时文件夹（temp）&quot;">​</a></h3><p><code>temp</code> 是临时文件夹，用于缓存一些 Cocos Creator 在本地的临时文件。这个文件夹可以在关闭 Cocos Creator 后手动删除，开发者不需要关心这里面的内容。</p><h3 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h3><p><code>package.json</code> 文件和 <code>assets</code> 文件夹一起，作为验证 Cocos Creator 项目合法性的标志，只有包括了这两个内容的文件夹才能作为 Cocos Creator 项目打开。开发者不需要关心里面的内容。</p><h2 id="版本控制" tabindex="-1">版本控制 <a class="header-anchor" href="#版本控制" aria-label="Permalink to &quot;版本控制&quot;">​</a></h2><p>Cocos Creator 在新建项目时，会自动生成 <code>.gitignore</code> 文件，用于排除不应该提交到 git 仓库的文件。如果开发者使用其它版本控制系统，或者需要提交项目到其它地方，应该注意只需要提交 <code>assets</code>、<code>extensions</code>、<code>settings</code>、<code>package.json</code>，或其它手动添加的关联文件。</p>',28),d=[r];function i(l,n,p,h,u,b){return o(),a("div",null,d)}const f=e(c,[["render",i]]);export{g as __pageData,f as default};
