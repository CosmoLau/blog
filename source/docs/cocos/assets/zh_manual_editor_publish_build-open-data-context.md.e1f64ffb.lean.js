import{_ as s,v as a,b as n,R as o}from"./chunks/framework.5ffcbaff.js";const t="/docs/cocos/assets/sub-context-view.138c2e75.png",e="/docs/cocos/assets/adaption-1.077c1459.png",l="/docs/cocos/assets/adaption-2.7ef40af4.png",p="/docs/cocos/assets/generate-template.556886e4.png",r="/docs/cocos/assets/build-output.1b06b2c5.png",c="/docs/cocos/assets/show-in-devtool.cb411fc7.png",i="/docs/cocos/assets/folder-structure.849dacd9.png",f=JSON.parse('{"title":"开放数据域","description":"","frontmatter":{},"headers":[],"relativePath":"zh/manual/editor/publish/build-open-data-context.md","filePath":"zh/manual/editor/publish/build-open-data-context.md"}'),g={name:"zh/manual/editor/publish/build-open-data-context.md"},D=o('<h1 id="开放数据域" tabindex="-1">开放数据域 <a class="header-anchor" href="#开放数据域" aria-label="Permalink to &quot;开放数据域&quot;">​</a></h1><p>目前，<strong>微信</strong>、<strong>百度</strong> 和 <strong>字节跳动</strong> 小游戏这些平台为了保护其社交关系链数据，增加了 <strong>开放数据域</strong> 的概念，这是一个单独的游戏执行环境。开放数据域中的资源、引擎、程序，都和主游戏（主域）完全隔离，开发者只有在开放数据域中才能通过平台提供的开放接口来访问关系链数据，用于实现一些例如排行榜的功能。</p><p>开放数据域目前只支持 Canvas 渲染，在 Cocos Creator 3.0 中，我们废弃了之前的 Canvas Renderer 模块，使用微信团队基于 <strong>XML</strong> + <strong>CSS</strong> 设计研发的一个前端轻量级 Canvas 引擎来替代。并且将该引擎整合进了 Creator 3.0 内置的开放数据域工程模板中，开发者只需要掌握一些基本的前端技能，就能在该模板的基础上定制排行榜功能。</p><h2 id="subcontextview-组件说明" tabindex="-1">SubContextView 组件说明 <a class="header-anchor" href="#subcontextview-组件说明" aria-label="Permalink to &quot;SubContextView 组件说明&quot;">​</a></h2><p>由于开放数据域只能在离屏画布 sharedCanvas 上渲染，所以在项目中，需要有一个节点作为渲染开放数据域的容器，并在该节点上添加 <strong>SubContextView</strong> 组件，该组件会将 sharedCanvas 渲染到容器节点上。</p><p>SubContextView 组件主要包含 <strong>设计分辨率</strong> 和 <strong>FPS</strong> 两个属性。</p><p><img src="'+t+`" alt="SubContextView"></p><h3 id="设计分辨率" tabindex="-1">设计分辨率 <a class="header-anchor" href="#设计分辨率" aria-label="Permalink to &quot;设计分辨率&quot;">​</a></h3><p>若将 <strong>SubContextView</strong> 组件的 <strong>设计分辨率</strong> 设置为 <strong>640 * 960</strong>，则在组件加载完成阶段，sharedCanvas 的尺寸会被设置为 <strong>640 * 960</strong>。意味着构建之后，开放数据域工程都是在一张 <strong>640 * 960</strong> 的离屏画布上做渲染的。那么，在定制开放数据域（参考下文）时，<code>style.js</code> 中标签的样式最大尺寸为 <strong>640 * 960</strong>，否则渲染的内容会超出画布。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// style.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// max width</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">960</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// max height</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>同时为了避免数据耦合，标签的样式还支持设置宽高的百分比：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// style.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100%</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100%</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在实际渲染过程中，引擎会采用 <strong>SHOW ALL</strong> 的适配策略将 sharedCanvas 渲染到 <strong>SubContextView</strong> 组件节点上，避免渲染时因拉伸导致的 UI 变形。例如在以下两张图片里，我们使用了不同尺寸的 <strong>SubContextView</strong> 组件节点，开放数据域的贴图都不会被拉伸：</p><p><img src="`+e+'" alt="adaption"></p><p><img src="'+l+'" alt="adaption"></p><h3 id="设置-fps" tabindex="-1">设置 FPS <a class="header-anchor" href="#设置-fps" aria-label="Permalink to &quot;设置 FPS&quot;">​</a></h3><p><strong>FPS</strong> 属性主要用于设置主域更新 sharedCanvas 到 <strong>SubContextView</strong> 组件上的频率，避免因频繁更新开放数据域贴图造成的性能损耗。</p><h2 id="发布流程" tabindex="-1">发布流程 <a class="header-anchor" href="#发布流程" aria-label="Permalink to &quot;发布流程&quot;">​</a></h2><ol><li><p>打开项目并双击场景，然后在需要渲染开放数据域的节点上添加 <strong>SubContextView</strong> 组件。</p></li><li><p>场景设置完成后保存场景，然后在 <strong>菜单栏 -&gt; 项目</strong> 中打开 <strong>构建发布</strong> 面板，选择需要发布的 <strong>微信</strong> / <strong>百度</strong> / <strong>字节跳动小游戏</strong> 平台，勾选 <strong>生成开放数据域工程模版</strong>，然后点击 <strong>构建</strong>。</p><p><img src="'+p+'" alt="generate template"></p></li><li><p>构建完成后点击 <strong>构建任务</strong> 左下角的文件夹图标按钮，可以看到在对应小游戏平台的发布包目录下生成了 <strong>openDataContext</strong> 文件夹（例如 <code>build/wechatgame/openDataContext</code>），该文件夹就是 Cocos Creator 内置的开放数据域工程模版。</p><p><img src="'+r+'" alt="build output"></p><p>开发者可以基于这个模板定制所需的开放数据域内容，定制方法参考下文 <strong>定制开放数据域工程</strong> 部分的内容。当再次构建时，如果发布包目录下存在 <strong>openDataContext</strong> 目录，则会直接跳过，开发者不用担心定制的开放数据域内容被覆盖掉。</p></li><li><p>使用对应平台方的开发者工具打开构建生成的发布包（例如 <code>build/wechatgame</code>），即可打开小游戏项目查看开放数据域内容，以及预览调试游戏。</p><p><img src="'+c+'" alt="show in devtool"></p><blockquote><p><strong>注意</strong>：由于百度小游戏的开放数据域只支持加载百度返回的玩家头像，所以构建后生成的开放数据域模版工程可能会因此无法正常加载本地的头像贴图。</p></blockquote></li></ol><h2 id="定制开放数据域工程" tabindex="-1">定制开放数据域工程 <a class="header-anchor" href="#定制开放数据域工程" aria-label="Permalink to &quot;定制开放数据域工程&quot;">​</a></h2><p>在定制开放数据域工程之前，开发者需要先了解一些基础信息：</p><ul><li><a href="https://wechat-miniprogram.github.io/minigame-canvas-engine/overview/guide.html" target="_blank" rel="noreferrer">minigame-canvas-engine 快速入门</a></li><li><a href="http://olado.github.io/doT/?spm=a2c6h.12873639.0.0.36f45227oKu0XO" target="_blank" rel="noreferrer">doT 模版引擎使用</a></li></ul><p>对这些基础信息有了大致的了解之后，我们来看一下构建后默认生成的开放数据域模版，目录结构如下：</p><p><img src="'+i+`" alt="folder structure"></p><ul><li><strong>render/dataDemo.js</strong>：模拟随机的排行榜数据，开发者可以在这里请求平台方的关系链数据，并传给 <strong>doT 模版引擎</strong> 生成相应的 XML 文本</li><li><strong>render/style.js</strong>：记录 CSS 样式文本信息，可参考 <a href="https://wechat-miniprogram.github.io/minigame-canvas-engine/api/style.html#%E5%B8%83%E5%B1%80" target="_blank" rel="noreferrer">样式文档</a></li><li><strong>render/template.js</strong>：记录 XML 文本信息，默认使用 <strong>doT 模版引擎</strong> 生成 XML 文本。可参考 <a href="https://wechat-miniprogram.github.io/minigame-canvas-engine/api/tags.html#%E6%A0%87%E7%AD%BE%E5%88%97%E8%A1%A8" target="_blank" rel="noreferrer">标签文档</a></li><li><strong>render/avatar.png</strong>：开放数据域模板默认使用的头像贴图，可删除</li><li><strong>engine.js</strong>：小游戏 Canvas 引擎源码</li><li><strong>index.js</strong>：开放数据域工程入口文件，在该文件中通过将 XML 文本和 CSS 样式传递给 Canvas 引擎，即可渲染开放数据域</li></ul><h2 id="推荐做法" tabindex="-1">推荐做法 <a class="header-anchor" href="#推荐做法" aria-label="Permalink to &quot;推荐做法&quot;">​</a></h2><ol><li><p>由于项目构建后生成的 build 目录默认会被 git 排除在版本控制外，所以如果开发者希望将定制后的开放数据域纳入版本控制，可以将 <code>openDataContext</code> 文件夹（例如 <code>build/wechatgame/openDataContext</code>）放入项目的 <code>build-templates</code> 目录中，具体可参考 <a href="./custom-project-build-template.html">定制项目构建流程</a></p></li><li><p>在开放数据域工程中，如果需要监听来自主域的消息，则需要先判断消息是否来自主域引擎，以微信接口为例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">engine</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">do something...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>当主域向开放数据域发送消息时，建议附带上 type 信息以避免处理错误的消息源。例如上述代码中的 <code>res.type === &#39;engine&#39;</code> 表示消息来源于主域引擎。</p></li></ol><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://wechat-miniprogram.github.io/minigame-canvas-engine/" target="_blank" rel="noreferrer">微信官方文档 — 小游戏 Canvas 引擎</a></li><li><a href="https://github.com/wechat-miniprogram/minigame-canvas-engine" target="_blank" rel="noreferrer">小游戏 Canvas 引擎源码</a></li><li><a href="http://olado.github.io/doT/?spm=a2c6h.12873639.0.0.36f45227oKu0XO" target="_blank" rel="noreferrer">doT 模版引擎</a></li><li><strong>Cocos Creator 小游戏开放数据域范例工程</strong>：<a href="https://github.com/cocos/cocos-example-open-data-context" target="_blank" rel="noreferrer">GitHub</a> | <a href="https://gitee.com/mirrors_cocos-creator/OpenDataContext_TestCase" target="_blank" rel="noreferrer">Gitee</a></li></ul>`,29),d=[D];function y(h,C,F,u,m,b){return a(),n("div",null,d)}const x=s(g,[["render",y]]);export{f as __pageData,x as default};
