import{_ as n,c as t,o as e,a4 as a,m as s,a as i}from"./chunks/framework.uQk9_EO2.js";const l="/docs/cocos/assets/unity-hub.DVYVMXuw.png",p="/docs/cocos/assets/cocos-dash-board.B3-ausjp.png",h="/docs/cocos/assets/unity-editor-overview.CyO48yhd.png",o="/docs/cocos/assets/cocos-editor-overview.DPNEHS3a.png",r="/docs/cocos/assets/unity-texture-inspector.DnzWll3j.png",c="/docs/cocos/assets/cocos-texture-inspector.C9pE5cu2.png",d="/docs/cocos/assets/cocos-texture-compress.DPbm9aHQ.png",k="/docs/cocos/assets/unity-model.OzA2WvQ5.png",g="/docs/cocos/assets/cocos-model.COa8kQ04.png",u="/docs/cocos/assets/cocos-keyframe-anim.LgW5wh9G.png",E="/docs/cocos/assets/cocos-anim-graph.cGM7dp2y.png",y="/docs/cocos/assets/cocos-audio-source.BLcVS_U3.png",m="/docs/cocos/assets/unity-import-package.hnaWhHfG.png",C="/docs/cocos/assets/cocos-import-package.Dr18GO9S.png",f="/docs/cocos/assets/unity-build.DDlL41QH.png",F="/docs/cocos/assets/cocos-build.BtLfJTNB.png",b="/docs/cocos/assets/cocos-add-component.CVoxIaIS.png",_="/docs/cocos/assets/script-lifecycle.CwUHfOAe.png",v="/docs/cocos/assets/cocos-debug.vOJOvPCz.png",x="/docs/cocos/assets/unity-material.CGwCDFsV.png",B="/docs/cocos/assets/cocos-material.BVv3c81h.png",S="/docs/cocos/assets/cocos-pipeline-state.DtzLI5zd.png",Z=JSON.parse('{"title":"Cocos Creator Quick Guide for Unity Developers","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/unity/index.md","filePath":"en/guide/unity/index.md","lastUpdated":1712336288000}'),w={name:"en/guide/unity/index.md"},D=a('<h1 id="cocos-creator-quick-guide-for-unity-developers" tabindex="-1">Cocos Creator Quick Guide for Unity Developers <a class="header-anchor" href="#cocos-creator-quick-guide-for-unity-developers" aria-label="Permalink to &quot;Cocos Creator Quick Guide for Unity Developers&quot;">​</a></h1><p>With the increasing variety of game platforms and portals, developers want to be able to write their games once and publish them multiple times to different platforms and portals, and Cocos Creator is a great way to fulfill this need.</p><p>In this article, we will compare the following perspectives from a Unity developer&#39;s point of view to help Unity developers quickly get started with the Cocos Creator engine.</p><ul><li>Installation and Versioning</li><li>Editors</li><li>Editor Workflow</li><li>Scripting and Debugging</li><li>Shaders</li></ul><h2 id="installation-and-versioning" tabindex="-1">Installation and Versioning <a class="header-anchor" href="#installation-and-versioning" aria-label="Permalink to &quot;Installation and Versioning&quot;">​</a></h2><p>The Unity Hub can be used to manage Unity&#39;s editor versions, projects, and templates. In Cocos Creator, you can also manage the engine, projects, and templates via the <a href="https://www.cocos.com/creator-download" target="_blank" rel="noreferrer">Cocos Dash Board</a>.</p><table><thead><tr><th style="text-align:left;">Unity Hub</th><th style="text-align:left;">Cocos Dashboard</th></tr></thead><tbody><tr><td style="text-align:left;"><img src="'+l+'" alt="unity-hub"></td><td style="text-align:left;"><img src="'+p+'" alt="cocos-dash-board"></td></tr></tbody></table><p>You can also find a large selection of extensions, resources and source code in the Store page, as well as more material to learn in the Learn page.</p><h2 id="editor" tabindex="-1">Editor <a class="header-anchor" href="#editor" aria-label="Permalink to &quot;Editor&quot;">​</a></h2><p>As a Unity developer, you can seamlessly use Cocos Creator&#39;s editor in most cases, and they have a similar editor layout and usage.</p><table><thead><tr><th style="text-align:left;">Unity Editor</th><th style="text-align:left;">Cocos Creator Editor</th></tr></thead><tbody><tr><td style="text-align:left;"><img src="'+h+'" alt="overview"></td><td style="text-align:left;"><img src="'+o+'" alt="overview"></td></tr></tbody></table><p>A slight difference is that Cocos Creator, because it is developed in Electronic+Chromium, allows you to both preview the game in a browser and run it directly in the editor.</p><h2 id="workflows" tabindex="-1">Workflows <a class="header-anchor" href="#workflows" aria-label="Permalink to &quot;Workflows&quot;">​</a></h2><p>Cocos Creator&#39;s 2D and 3D workflows are similar to Unity&#39;s, as you can read <a href="./../../concepts/scene/">Scene Creation Workflow</a> to see Cocos Creator&#39;s workflow.</p><h3 id="texture-assets" tabindex="-1">Texture Assets <a class="header-anchor" href="#texture-assets" aria-label="Permalink to &quot;Texture Assets&quot;">​</a></h3><p>Importing texture assets is similar to Unity.</p>',16),q=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"Unity"),s("th",{style:{"text-align":"left"}},"Cocos")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"left"}},[s("img",{src:r,width:"300",heigh:"200"})]),s("td",{style:{"text-align":"left"}},[s("img",{src:c,width:"300",heigh:"200"})])])])],-1),A=s("p",null,"Global texture compression can also be configured in the project settings",-1),T=s("p",null,[s("img",{src:d,alt:"cocos-texture-compress.png"})],-1),P=s("h3",{id:"models-and-animations",tabindex:"-1"},[i("Models and animations "),s("a",{class:"header-anchor",href:"#models-and-animations","aria-label":'Permalink to "Models and animations"'},"​")],-1),U=s("p",null,"Importing FBX in Cocos Creator is the same as Unity, just drag and drop or copy the files into the Assets directory of your project.",-1),L=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"Unity"),s("th",{style:{"text-align":"left"}},"Cocos")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"left"}},[s("img",{src:k,width:"300",heigh:"200"})]),s("td",{style:{"text-align":"left"}},[s("img",{src:g,width:"300",heigh:"200"})])])])],-1),I=a('<p>Cocos Creator also supports glTF format files, as well as standard materials for DCC tools such as Maya and 3DMax.</p><h3 id="spine-animations" tabindex="-1">Spine Animations <a class="header-anchor" href="#spine-animations" aria-label="Permalink to &quot;Spine Animations&quot;">​</a></h3><p>Cocos Creator has a built-in Spine animation component, which you can use directly through the <code>spine.Skeleton</code> component.</p><h3 id="animation-and-state-machine" tabindex="-1">Animation and State machine <a class="header-anchor" href="#animation-and-state-machine" aria-label="Permalink to &quot;Animation and State machine&quot;">​</a></h3><p>Cocos Creator supports keyframe animations, skeletal animations.You can edit and preview these animations directly in the editor.</p><p><img src="'+u+'" alt="cocos-keyframe-anim.png"></p><p>Similar to Unity&#39;s Animator, Cocos Creator supports the editing of animation state machines, which you can find in the <a href="./../../animation/marionette/">Marionette Animation System</a>.</p><p><img src="'+E+'" alt="./index/cocos-anim-graph.png"></p><h3 id="music-and-sound-effects" tabindex="-1">Music and sound effects <a class="header-anchor" href="#music-and-sound-effects" aria-label="Permalink to &quot;Music and sound effects&quot;">​</a></h3><p>Cocos Creator also supports Audio Source components for playing music and sound effects.</p><p><img src="'+y+'" alt="cocos-audio-source.png"></p><h3 id="assets-package" tabindex="-1">Assets Package <a class="header-anchor" href="#assets-package" aria-label="Permalink to &quot;Assets Package&quot;">​</a></h3><p>Similar to Unity, Cocos Creator supports co-development by importing assets packages from the outside of the editor.</p>',13),M=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"Unity"),s("th",{style:{"text-align":"left"}},"Cocos")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"left"}},[s("img",{src:m,width:"300",heigh:"200"})]),s("td",{style:{"text-align":"left"}},[s("img",{src:C,width:"300",heigh:"200"})])])])],-1),G=s("h3",{id:"build-and-publish",tabindex:"-1"},[i("Build and Publish "),s("a",{class:"header-anchor",href:"#build-and-publish","aria-label":'Permalink to "Build and Publish"'},"​")],-1),V=s("p",null,"In addition to being published on various native platforms like Unity, Cocos Creator also supports publishing on small game platforms such as WeChat Small Games and TikTok Small Games.",-1),O=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"Unity"),s("th",{style:{"text-align":"left"}},"Cocos")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"left"}},[s("img",{src:f,width:"300",heigh:"200"})]),s("td",{style:{"text-align":"left"}},[s("img",{src:F,width:"300",heigh:"200"})])])])],-1),N=a('<h2 id="scripting-and-debugging" tabindex="-1">Scripting and Debugging <a class="header-anchor" href="#scripting-and-debugging" aria-label="Permalink to &quot;Scripting and Debugging&quot;">​</a></h2><p>Unlike Unity&#39;s GameObject, in Cocos Creator the entities in the scene are named Node, but similar to Unity, Cocos Creator is an ECS (Entity-Component-System) architecture, and you can add different components to a Node to realize the functionality of the game.</p><p><img src="'+b+'" alt="cocos-add-component.png"></p><h3 id="component-lifecycle" tabindex="-1">Component Lifecycle <a class="header-anchor" href="#component-lifecycle" aria-label="Permalink to &quot;Component Lifecycle&quot;">​</a></h3><p>Similar to Unity, Cocos Creator&#39;s components have their own lifecycle. The system facilitates the developer&#39;s business logic by calling back registered methods within the component.</p><p><img src="'+_+`" alt="组件生命周期"></p><h3 id="writing-custom-components" tabindex="-1">Writing Custom Components <a class="header-anchor" href="#writing-custom-components" aria-label="Permalink to &quot;Writing Custom Components&quot;">​</a></h3><p>In Unity, we inherit from Monobehavior to implement our own game scripts.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NetworkBehaviour</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Animation</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Cocos Creator uses Typescript to write scripts.</p><p>The following example shows how to implement a custom component using Typescript.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MotionController&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MotionController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    animation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SkeletalAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SkeletalAnimation);        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>C# and Typescript are both programming languages developed by Microsoft and their ease of use is similar.</p><h3 id="debugging-and-logging" tabindex="-1">Debugging and Logging <a class="header-anchor" href="#debugging-and-logging" aria-label="Permalink to &quot;Debugging and Logging&quot;">​</a></h3><h4 id="logging-debugging" tabindex="-1">Logging Debugging <a class="header-anchor" href="#logging-debugging" aria-label="Permalink to &quot;Logging Debugging&quot;">​</a></h4><p>To use logging in Unity we can use the <code>Debug.Log</code> method.</p><p>To use logging in Cocos Creator, you can either use js&#39;s log printing <code>console.log()</code> or Cocos Creator&#39;s logging methods:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="breakpoint-debugging" tabindex="-1">Breakpoint Debugging <a class="header-anchor" href="#breakpoint-debugging" aria-label="Permalink to &quot;Breakpoint Debugging&quot;">​</a></h4><p>Unity can be debugged at breakpoints using Visual Studio or VSCode.</p><p>Cocos Creator uses VSCode or developer tools directly in the browser.</p><p><img src="`+v+'" alt="cocos-debug.png"></p><h2 id="material-and-shader-writing" tabindex="-1">Material and shader writing <a class="header-anchor" href="#material-and-shader-writing" aria-label="Permalink to &quot;Material and shader writing&quot;">​</a></h2><h3 id="materials" tabindex="-1">Materials <a class="header-anchor" href="#materials" aria-label="Permalink to &quot;Materials&quot;">​</a></h3><p>Cocos Creator materials have a similar preview and properties panel to Unity materials.</p>',25),j=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"Unity"),s("th",{style:{"text-align":"left"}},"Cocos")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"left"}},[s("img",{src:x,width:"300",heigh:"200"})]),s("td",{style:{"text-align":"left"}},[s("img",{src:B,width:"300",heigh:"200"})])])])],-1),W=a('<p>Unlike Unity, Cocos Creator makes it easier to view and define the state of the rendering in the pipeline in materials.</p><p><img src="'+S+`" alt="cocos-pipeline-state.png"></p><h3 id="shaders" tabindex="-1">Shaders <a class="header-anchor" href="#shaders" aria-label="Permalink to &quot;Shaders&quot;">​</a></h3><p>Unlike Unity, which supports CG, GLSL, and HLSL, Cocos Creator only supports GLSL as a shader programming language.</p><p>The table below compares the file formats they use and the differences in DSL.</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">Unity</th><th style="text-align:left;">Cocos</th></tr></thead><tbody><tr><td style="text-align:left;">File Format</td><td style="text-align:left;">*.shader</td><td style="text-align:left;">*.effect</td></tr><tr><td style="text-align:left;">DSL</td><td style="text-align:left;">Cg/HLSL/GLSL + Unity Shader Format</td><td style="text-align:left;">GLSL + Yaml</td></tr></tbody></table><p>Unity uses a custom shader file as the DSL, while Cocos creator uses Yaml as the DSL file format.</p><h4 id="shader-syntax-rules" tabindex="-1">Shader syntax rules <a class="header-anchor" href="#shader-syntax-rules" aria-label="Permalink to &quot;Shader syntax rules&quot;">​</a></h4><p>Unity Shader syntax rules.</p><div class="language-shader vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shader</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Shader</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Transparent/Cutout/DiffuseDoubleside&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _Color (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Main Color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _MainTex (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Base (RGB) Trans (A)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;white&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _Cutoff (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alpha cutoff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SubShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IgnoreProjector&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;True&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RenderType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TransparentCutout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Off</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CGPROGRAM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> surface surf Lambert alphatest:_Cutoff</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sampler2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _MainTex;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _Color;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uv_MainTex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> surf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IN, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SurfaceOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> half4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tex2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_MainTex, IN.uv_MainTex) * _Color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o.Albedo = c.rgb;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o.Alpha = c.a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENDCG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Fallback</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Transparent/Cutout/VertexLit&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Cocos Creator Shader syntax rules:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CCEffect %{</span></span>
<span class="line"><span>  techniques:</span></span>
<span class="line"><span>  - name: opaque</span></span>
<span class="line"><span>    passes:</span></span>
<span class="line"><span>    - vert: general-vs:vert # builtin header</span></span>
<span class="line"><span>      frag: unlit-fs:frag</span></span>
<span class="line"><span>      properties: &amp;props</span></span>
<span class="line"><span>        mainTexture:    { value: white }</span></span>
<span class="line"><span>        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }</span></span>
<span class="line"><span>  - name: transparent</span></span>
<span class="line"><span>    passes:</span></span>
<span class="line"><span>    - vert: general-vs:vert # builtin header</span></span>
<span class="line"><span>      frag: unlit-fs:frag</span></span>
<span class="line"><span>      blendState:</span></span>
<span class="line"><span>        targets:</span></span>
<span class="line"><span>        - blend: true</span></span>
<span class="line"><span>          blendSrc: src_alpha</span></span>
<span class="line"><span>          blendDst: one_minus_src_alpha</span></span>
<span class="line"><span>          blendSrcAlpha: src_alpha</span></span>
<span class="line"><span>          blendDstAlpha: one_minus_src_alpha</span></span>
<span class="line"><span>      properties: *props</span></span>
<span class="line"><span>}%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CCProgram unlit-fs %{\`</span></span>
<span class="line"><span>  precision highp float;</span></span>
<span class="line"><span>  #include &lt;output&gt;</span></span>
<span class="line"><span>  #include &lt;cc-fog-fs&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  in vec2 v_uv;</span></span>
<span class="line"><span>  uniform sampler2D mainTexture;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  uniform Constant {</span></span>
<span class="line"><span>    vec4 mainColor;</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  vec4 frag () {</span></span>
<span class="line"><span>    vec4 col = mainColor * texture(mainTexture, v_uv);</span></span>
<span class="line"><span>    CC_APPLY_FOG(col);</span></span>
<span class="line"><span>    return CCFragOutput(col);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}%</span></span></code></pre></div><h3 id="shader-syntax-comparison" tabindex="-1">Shader Syntax Comparison <a class="header-anchor" href="#shader-syntax-comparison" aria-label="Permalink to &quot;Shader Syntax Comparison&quot;">​</a></h3><p>This subsection compares the file structure of UnityShader and Cocos Effect.</p><h3 id="structural-comparisons" tabindex="-1">Structural Comparisons <a class="header-anchor" href="#structural-comparisons" aria-label="Permalink to &quot;Structural Comparisons&quot;">​</a></h3><p>Defining Shader Objects.</p><ul><li><p>Unity shader:</p><div class="language-shader vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shader</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Shader</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;name&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;optional: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">One</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> or more </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SubShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> definitions&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;optional: custom editor&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;optional: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Cocos Shader:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CCEffect %{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;techniques&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;passes&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;techniques&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;passes&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;shader program&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="pass-structure" tabindex="-1">Pass Structure <a class="header-anchor" href="#pass-structure" aria-label="Permalink to &quot;Pass Structure&quot;">​</a></h3><ul><li><p>Unity Shader：</p><div class="language-shader vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shader</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SubShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;optional&gt;Tag {}    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;optionall&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Pass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Pass：</p><div class="language-shader vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shader</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Pass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;tag&gt;    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;code&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>CocosCreator Shader:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CCProgram &lt;name&gt; %{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;in parameters&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;out parameters&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;uniforms&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    function vert();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    function frag();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}%</span></span></code></pre></div></li></ul>`,19),H=[D,q,A,T,P,U,L,I,M,G,V,O,N,j,W];function R(z,Q,Y,$,J,X){return e(),t("div",null,H)}const ss=n(w,[["render",R]]);export{Z as __pageData,ss as default};
