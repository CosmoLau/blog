import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BoNnCkFp.js";const u=JSON.parse('{"title":"Troubleshoot","description":"","frontmatter":{},"headers":[],"relativePath":"troubleshoot.md","filePath":"troubleshoot.md"}'),t={name:"troubleshoot.md"},o=n(`<h1 id="troubleshoot" tabindex="-1">Troubleshoot <a class="header-anchor" href="#troubleshoot" aria-label="Permalink to &quot;Troubleshoot&quot;">​</a></h1><h2 id="command-not-found" tabindex="-1">Command not found <a class="header-anchor" href="#command-not-found" aria-label="Permalink to &quot;Command not found&quot;">​</a></h2><p>See <a href="./how-to.html">How To</a> for solutions.</p><h2 id="hooks-not-running" tabindex="-1">Hooks not running <a class="header-anchor" href="#hooks-not-running" aria-label="Permalink to &quot;Hooks not running&quot;">​</a></h2><ol><li>Verify the file name is correct. For example, <code>precommit</code> or <code>pre-commit.sh</code> are invalid names. Refer to the Git hooks <a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">documentation</a> for valid names.</li><li>Run <code>git config core.hooksPath</code> and ensure it points to <code>.husky/_</code> (or your custom hooks directory).</li><li>Confirm your Git version is above <code>2.9</code>.</li></ol><h2 id="git-hooks-not-working-after-uninstall" tabindex="-1"><code>.git/hooks/</code> Not Working After Uninstall <a class="header-anchor" href="#git-hooks-not-working-after-uninstall" aria-label="Permalink to &quot;\`.git/hooks/\` Not Working After Uninstall&quot;">​</a></h2><p>If hooks in <code>.git/hooks/</code> don&#39;t work post-uninstalling <code>husky</code>, execute <code>git config --unset core.hooksPath</code>.</p><h2 id="yarn-on-windows" tabindex="-1">Yarn on Windows <a class="header-anchor" href="#yarn-on-windows" aria-label="Permalink to &quot;Yarn on Windows&quot;">​</a></h2><p>Git hooks might fail with Yarn on Windows using Git Bash (<code>stdin is not a tty</code>). For Windows users, implement this workaround:</p><ol><li>Create <code>.husky/common.sh</code>:</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command_exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  command</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Workaround for Windows 10, Git Bash, and Yarn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> command_exists</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> winpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/tty</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><ol start="2"><li>Source it where Yarn commands are run:</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .husky/pre-commit</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)/common.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div>`,13),e=[o];function h(l,r,k,p,d,c){return a(),i("div",null,e)}const F=s(t,[["render",h]]);export{u as __pageData,F as default};
