import{_ as s,o,c as n,W as a}from"./chunks/framework.5a937eaf.js";const D=JSON.parse('{"title":"Troubleshooting","description":"","frontmatter":{},"headers":[],"relativePath":"troubleshooting.md","filePath":"troubleshooting.md"}'),e={name:"troubleshooting.md"},l=a(`<h1 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h1><h2 id="command-not-found" tabindex="-1">Command not found <a class="header-anchor" href="#command-not-found" aria-label="Permalink to &quot;Command not found&quot;">​</a></h2><p>If you&#39;re running Git from an app and the command can be found in your terminal, this means that the <code>PATH</code> in your app is different from your terminal.</p><p>You can <code>echo $PATH</code> in your terminal and configure your app to use the same value.</p><p>If you&#39;ve installed your command using <code>brew</code>, see the <a href="https://docs.brew.sh/FAQ" target="_blank" rel="noreferrer">Homebrew FAQ</a> to make your command available to your app.</p><p>Finally, if you&#39;re using a script for managing versions like <code>nvm</code>, <code>n</code>, <code>rbenv</code>, <code>pyenv</code>, ... you can use <code>~/.huskyrc</code> to load the necessary before running hooks.</p><p>For example, for <code>nvm</code> that would be:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-TjPey" id="tab-lZRuHpD" checked="checked"><label for="tab-lZRuHpD">~/.huskyrc</label></div><div class="blocks"><div class="language-shell active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># This loads nvm.sh, sets the correct PATH before running hook, and ensures the project version of Node</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> NVM_DIR</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/.nvm</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$NVM_DIR</span><span style="color:#C3E88D;">/nvm.sh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">\\.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$NVM_DIR</span><span style="color:#C3E88D;">/nvm.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># If you have an .nvmrc file, we use the relevant node version</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.nvmrc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For some apps (e.g., VS Code), you can resolve this simply by restarting the app. Try this before following any of these steps above!**</p></div><h2 id="hooks-not-running" tabindex="-1">Hooks not running <a class="header-anchor" href="#hooks-not-running" aria-label="Permalink to &quot;Hooks not running&quot;">​</a></h2><ol><li>Ensure that you don&#39;t have a typo in your filename. For example, <code>precommit</code> or <code>pre-commit.sh</code> are invalid names. See Git hooks <a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">documentation</a> for valid names.</li><li>Check that <code>git config core.hooksPath</code> returns <code>.husky</code> (or your custom hooks directory).</li><li>Verify that hook files are executable. This is automatically set when using <code>husky add</code> command but you can run <code>chmod +x .husky/&lt;hookname&gt;</code> to fix that.</li><li>Check that your version of Git is greater than <code>2.9</code>.</li></ol><h2 id="git-hooks-not-working-after-uninstall" tabindex="-1">.git/hooks/ not working after uninstall <a class="header-anchor" href="#git-hooks-not-working-after-uninstall" aria-label="Permalink to &quot;.git/hooks/ not working after uninstall&quot;">​</a></h2><p>If after uninstalling <code>husky</code>, hooks in <code>.git/hooks/</code> aren&#39;t working. Run <code>git config --unset core.hooksPath</code>.</p><p>Note: this was done automatically by <code>npm &lt;7</code> when uninstalling husky, however <code>preuninstall</code> is now unsupported.</p><h2 id="yarn-on-windows" tabindex="-1">Yarn on Windows <a class="header-anchor" href="#yarn-on-windows" aria-label="Permalink to &quot;Yarn on Windows&quot;">​</a></h2><p>Git hooks may fail when using Yarn on Windows with Git Bash (<code>stdin is not a tty</code>). If you have users on Windows, it&#39;s highly recommended to add the following workaround.</p><ol><li>Create <code>.husky/common.sh</code>:</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">command_exists</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/dev/null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">2&gt;&amp;1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Workaround for Windows 10, Git Bash and Yarn</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">command_exists</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">winpty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/tty</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span></code></pre></div><ol start="2"><li>Source it in in places where Yarn is used to run commands:</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">dirname</span><span style="color:#C3E88D;"> -- </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$0</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#C3E88D;">/_/husky.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">dirname</span><span style="color:#C3E88D;"> -- </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$0</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#C3E88D;">/common.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span></code></pre></div><h2 id="does-it-work-on-windows" tabindex="-1">Does it work on Windows? <a class="header-anchor" href="#does-it-work-on-windows" aria-label="Permalink to &quot;Does it work on Windows?&quot;">​</a></h2><p>Yes. When you install Git on Windows, it comes with the necessary software to run shell scripts.</p>`,22),t=[l];function p(r,c,i,y,d,h){return o(),n("div",null,t)}const C=s(e,[["render",p]]);export{D as __pageData,C as default};
