import{_ as s,o as a,c as o,W as l}from"./chunks/framework.5a937eaf.js";const C=JSON.parse('{"title":"指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide.md","filePath":"zh/guide.md"}'),n={name:"zh/guide.md"},e=l(`<h1 id="指南" tabindex="-1">指南 <a class="header-anchor" href="#指南" aria-label="Permalink to &quot;指南&quot;">​</a></h1><h2 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;Monorepo&quot;">​</a></h2><p>建议在根目录下的 <code>package.json</code> 中添加 husky。你可以使用诸如 <a href="https://github.com/lerna/lerna" target="_blank" rel="noreferrer">lerna</a> 和 filter 之类的工具来仅在已更改的包中运行脚本。</p><h2 id="自定义目录" tabindex="-1">自定义目录 <a class="header-anchor" href="#自定义目录" aria-label="Permalink to &quot;自定义目录&quot;">​</a></h2><p>如果你想在另一个目录安装 husky，比如 <code>.config</code> 目录，你可以在 <code>install</code> 命令后面添加参数。示例如下：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-nWBJp" id="tab-IFAwJku" checked="checked"><label for="tab-IFAwJku">package.json</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install .config/husky</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>另一种情况，如果你的 <code>package.json</code> 文件和 <code>.git</code> 目录不在同一级目录。例如，<code>project/.git</code> 和 <code>project/front/package.json</code>。</p><p>设计上，<code>husky install</code> 必须运行在于 <code>.git</code> 相同的目录，但是你可以通过在 <code>prepare</code> 脚本中传入一个子目录来改变目录：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-4-YH1" id="tab-RkL8QNu" checked="checked"><label for="tab-RkL8QNu">package.json</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd .. &amp;&amp; husky install front/.husky</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>在你的 hooks 中，你也需要去更改目录：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2upx6" id="tab-fXx7ZS_" checked="checked"><label for="tab-fXx7ZS_">.husky/pre-commit</label></div><div class="blocks"><div class="language-shell active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">front</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span></span></code></pre></div></div></div><h2 id="绕过-hooks" tabindex="-1">绕过 hooks <a class="header-anchor" href="#绕过-hooks" aria-label="Permalink to &quot;绕过 hooks&quot;">​</a></h2><p>你能使用 Git命令的 <code>-n/--no-verify</code> 选项来绕过 <code>pre-commit</code> 和 <code>commit-msg</code> hooks：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yolo!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-verify</span></span></code></pre></div><p>对于没有使用 <code>--no-verify</code> 选项的 Git 命令，你可以使用 <code>HUSKY</code> 环境变量：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HUSKY</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># yolo!</span></span></code></pre></div><h2 id="在-ci-docker-prod-中禁用-husky" tabindex="-1">在 CI/Docker/Prod 中禁用 husky <a class="header-anchor" href="#在-ci-docker-prod-中禁用-husky" aria-label="Permalink to &quot;在 CI/Docker/Prod 中禁用 husky&quot;">​</a></h2><p>在 CI/Docker/Prod上下文中禁用 husky 没有对错之分，这在很大程度上 <strong>取决于你的使用情况</strong>。</p><h3 id="使用-npm" tabindex="-1">使用 npm <a class="header-anchor" href="#使用-npm" aria-label="Permalink to &quot;使用 npm&quot;">​</a></h3><p>如果你想阻止 husky 完全安装</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ci</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--omit=dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--ignore-scripts</span></span></code></pre></div><p>或者，你也能明确地禁用 <code>prepare</code> 脚本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pkg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">delete</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scripts.prepare</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ci</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--omit=dev</span></span></code></pre></div><h3 id="使用自定义脚本" tabindex="-1">使用自定义脚本 <a class="header-anchor" href="#使用自定义脚本" aria-label="Permalink to &quot;使用自定义脚本&quot;">​</a></h3><p>您可以创建一个自定义 JS 脚本，有条件地要求使用 husky 和安装 hooks。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-tblw_" id="tab-pu0zwjZ" checked="checked"><label for="tab-pu0zwjZ">package.json</label><input type="radio" name="group-tblw_" id="tab-3SOCR-W"><label for="tab-3SOCR-W">prepare.js</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node ./prepare.js</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> isCi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CI </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">isCi) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">husky</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>或者在未安装 husky 的情况下，让 <code>prepare</code> 脚本无声地失败： Or make <code>prepare</code> script fail silently if husky is not installed:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node -e </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">try { require(&#39;husky&#39;).install() } catch (e) {if (e.code !== &#39;MODULE_NOT_FOUND&#39;) throw e}</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h3 id="使用环境变量" tabindex="-1">使用环境变量 <a class="header-anchor" href="#使用环境变量" aria-label="Permalink to &quot;使用环境变量&quot;">​</a></h3><p>你可以在你的 CI 配置文件中，将 <code>HUSKY</code> 环境变量设置为 <code>0</code>，来禁用 hooks 安装。</p><p>另外，大多数持续集成服务器都会设置一个 <code>CI</code> 环境变量。你可以在钩子中使用它来检测是否在 CI 中运行。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1D-k5" id="tab-EjQ0d_3" checked="checked"><label for="tab-EjQ0d_3">.husky/pre-commit</label></div><div class="blocks"><div class="language-shell active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$CI</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span></code></pre></div></div></div><h3 id="使用-is-ci" tabindex="-1">使用 is-ci <a class="header-anchor" href="#使用-is-ci" aria-label="Permalink to &quot;使用 is-ci&quot;">​</a></h3><p>您还可以在 <code>prepare</code> 脚本中使用 <a href="https://github.com/watson/is-ci" target="_blank" rel="noreferrer">is-ci</a>，有条件地安装 husky</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is-ci</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span></code></pre></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-XVzes" id="tab-mEixF0n" checked="checked"><label for="tab-mEixF0n">package.json</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">is-ci || husky install</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><h2 id="测试-hooks" tabindex="-1">测试 hooks <a class="header-anchor" href="#测试-hooks" aria-label="Permalink to &quot;测试 hooks&quot;">​</a></h2><p>如果要测试 hook，可以在脚本末尾添加 <code>exit 1</code> 来终止 git 命令。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-BWUpi" id="tab-N0X13KS" checked="checked"><label for="tab-N0X13KS">.husky/pre-commit</label></div><div class="blocks"><div class="language-shell active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Commit will be aborted</span></span></code></pre></div></div></div><h2 id="git-flow" tabindex="-1">Git-flow <a class="header-anchor" href="#git-flow" aria-label="Permalink to &quot;Git-flow&quot;">​</a></h2><p>如果使用 <a href="https://github.com/petervanderdoes/gitflow-avh/" target="_blank" rel="noreferrer">git-flow</a>，需要确保 git-flow hooks 目录设置为使用 husky（默认为 <code>.husky</code>）。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitflow.path.hooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.husky</span></span></code></pre></div><p><strong>注意:</strong></p><ul><li>如果在安装 husky 之后配置 git-flow，那么 git-flow 设置过程将正确地建议使用 <code>.husky</code> 目录。</li><li>如果您已经为 husky 设置了一个 <a href="#自定义目录">自定义目录</a>，那么您需要指定这个目录(比如 <code>git config gitflow. path.hooks. config/husky</code>)</li></ul><p>要将 Git-flow hook 目录 <strong>恢复</strong> 到默认目录，需要重置配置，使其指向默认的 Git hook 目录。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitflow.path.hooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.git/hooks</span></span></code></pre></div>`,46),p=[e];function t(c,r,i,d,y,D){return a(),o("div",null,p)}const F=s(n,[["render",t]]);export{C as __pageData,F as default};
