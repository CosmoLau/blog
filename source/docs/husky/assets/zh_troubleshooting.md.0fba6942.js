import{_ as s,o,c as a,W as n}from"./chunks/framework.5a937eaf.js";const h=JSON.parse('{"title":"疑难解答","description":"","frontmatter":{},"headers":[],"relativePath":"zh/troubleshooting.md","filePath":"zh/troubleshooting.md"}'),l={name:"zh/troubleshooting.md"},e=n(`<h1 id="疑难解答" tabindex="-1">疑难解答 <a class="header-anchor" href="#疑难解答" aria-label="Permalink to &quot;疑难解答&quot;">​</a></h1><h2 id="找不到命令" tabindex="-1">找不到命令 <a class="header-anchor" href="#找不到命令" aria-label="Permalink to &quot;找不到命令&quot;">​</a></h2><p>如果您在应用程序中运行 Git，而命令可以在终端中找到，这意味着应用程序中的 <code>PATH</code> 与终端中的不同。</p><p>你可以在终端中使用 <code>echo $PATH</code> 命令，然后配置你的应用为相同的值。</p><p>如果你使用 <code>brew</code> 安装了你的命令，请参阅 <a href="https://docs.brew.sh/FAQ" target="_blank" rel="noreferrer">Homebrew FAQ</a>，让你的应用程序可以使用你的命令。</p><p>最后，如果你正在使用管理版本的脚本，例如 <code>nvm</code>、<code>n</code>、<code>rbenv</code>、<code>pyenv</code>......你可以在运行 hooks 之前使用 <code>~/.huskyrc</code> 加载必要的脚本。 Finally, if you&#39;re using a script for managing versions like <code>nvm</code>, <code>n</code>, <code>rbenv</code>, <code>pyenv</code>, ... you can use <code>~/.huskyrc</code> to load the necessary before running hooks.</p><p>例如，对于 nvm，可以使用:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-GE6SM" id="tab-0QrlCCd" checked="checked"><label for="tab-0QrlCCd">~/.huskyrc</label></div><div class="blocks"><div class="language-shell active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># This loads nvm.sh, sets the correct PATH before running hook, and ensures the project version of Node</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> NVM_DIR</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/.nvm</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$NVM_DIR</span><span style="color:#C3E88D;">/nvm.sh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">\\.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$NVM_DIR</span><span style="color:#C3E88D;">/nvm.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># If you have an .nvmrc file, we use the relevant node version</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.nvmrc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">注意</p><p>对于某些应用程序（如 VS Code），只需重启应用程序即可解决此问题。在采取上述任何步骤之前，请先尝试一下！**</p></div><h2 id="hooks-未运行" tabindex="-1">Hooks 未运行 <a class="header-anchor" href="#hooks-未运行" aria-label="Permalink to &quot;Hooks 未运行&quot;">​</a></h2><ol><li>确保文件名中没有错别字。例如 <code>precommit</code> 或 <code>pre-commit.sh</code> 都是无效名称。有关有效名称，请参阅 Git hooks <a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">文档</a>。</li><li>检查 <code>git config core.hooksPath</code> 是否返回 <code>.husky</code>（或你的自定义 hook 目录）。</li><li>确认钩子文件是可执行的。使用 <code>husky add</code> 命令时会自动设置为可执行，但可以运行 <code>chmod +x .husky/&lt;hookname&gt;</code> 来修复。</li><li>检查 Git 版本是否大于 <code>2.9</code>。</li></ol><h2 id="卸载后-git-hooks-无法运行" tabindex="-1">卸载后 .git/hooks/ 无法运行 <a class="header-anchor" href="#卸载后-git-hooks-无法运行" aria-label="Permalink to &quot;卸载后 .git/hooks/ 无法运行&quot;">​</a></h2><p>如果卸载 <code>husky</code> 后，<code>.git/hooks/</code> 中的 hooks 不起作用。运行 <code>git config --unset core.hooksPath</code>。</p><p>注意：如果 <code>npm &lt;7</code> 在卸载 husky 时会自动执行此操作，但现在已不支持 <code>preuninstall</code>。</p><h2 id="在-windows-上使用-yarn" tabindex="-1">在 Windows 上使用 Yarn <a class="header-anchor" href="#在-windows-上使用-yarn" aria-label="Permalink to &quot;在 Windows 上使用 Yarn&quot;">​</a></h2><p>在 Windows 上使用 Yarn 和 Git Bash（<code>stdin 不是 tty</code>）时，Git hooks 可能会失败。如果用户使用的是 Windows 系统，强烈建议添加以下解决方案。</p><ol><li>创建 <code>.husky/common.sh</code>:</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">command_exists</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/dev/null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">2&gt;&amp;1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Workaround for Windows 10, Git Bash and Yarn</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">command_exists</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">winpty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/tty</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span></code></pre></div><ol start="2"><li>在使用 Yarn 运行命令的地方输入源代码：</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">dirname</span><span style="color:#C3E88D;"> -- </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$0</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#C3E88D;">/_/husky.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">dirname</span><span style="color:#C3E88D;"> -- </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$0</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#C3E88D;">/common.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span></code></pre></div><h2 id="它能在-windows-上运行吗" tabindex="-1">它能在 Windows 上运行吗？ <a class="header-anchor" href="#它能在-windows-上运行吗" aria-label="Permalink to &quot;它能在 Windows 上运行吗？&quot;">​</a></h2><p>可以。在 Windows 上安装 Git 时，会附带运行 shell 脚本所需的软件。</p>`,22),p=[e];function t(c,r,i,y,d,D){return o(),a("div",null,p)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};
