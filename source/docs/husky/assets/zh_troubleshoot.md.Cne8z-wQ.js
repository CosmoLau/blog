import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.BoNnCkFp.js";const F=JSON.parse('{"title":"故障排查","description":"","frontmatter":{},"headers":[],"relativePath":"zh/troubleshoot.md","filePath":"zh/troubleshoot.md"}'),n={name:"zh/troubleshoot.md"},h=t(`<h1 id="故障排查" tabindex="-1">故障排查 <a class="header-anchor" href="#故障排查" aria-label="Permalink to &quot;故障排查&quot;">​</a></h1><h2 id="找不到命令-command-not-found" tabindex="-1">找不到命令（Command not found） <a class="header-anchor" href="#找不到命令-command-not-found" aria-label="Permalink to &quot;找不到命令（Command not found）&quot;">​</a></h2><p>请参阅 <a href="./how-to.html">如何使用</a> 获取解决方案。</p><h2 id="钩子未运行" tabindex="-1">钩子未运行 <a class="header-anchor" href="#钩子未运行" aria-label="Permalink to &quot;钩子未运行&quot;">​</a></h2><ol><li>验证文件名是否正确。例如，<code>precommit</code> 或 <code>pre-commit.sh</code> 都是无效的名称。有效名称请参考 Git 钩子<a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">文档</a>。</li><li>运行 <code>git config core.hooksPath</code> 并确保它指向 <code>.husky/_</code>（或者你的自定义目录）。</li><li>确认你的 Git 版本高于 <code>2.9</code>。</li></ol><h2 id="卸载后-git-hooks-无法正常使用" tabindex="-1">卸载后 <code>.git/hooks/</code> 无法正常使用 <a class="header-anchor" href="#卸载后-git-hooks-无法正常使用" aria-label="Permalink to &quot;卸载后 \`.git/hooks/\` 无法正常使用&quot;">​</a></h2><p>如果卸载 <code>husky</code> 后 hooks 在 <code>.git/hooks/</code> 中无法正常使用，请执行命令 <code>git config --unset core.hooksPath</code>。</p><h2 id="在-windows-上使用-yarn" tabindex="-1">在 Windows 上使用 Yarn <a class="header-anchor" href="#在-windows-上使用-yarn" aria-label="Permalink to &quot;在 Windows 上使用 Yarn&quot;">​</a></h2><p>在 Windows 上使用 Git Bash 时，Git 钩子可能会失败(<code>stdin is not a tty</code>)。对于 Windows 用户，通过以下解决方案来实现：</p><ol><li>创建 <code>.husky/common.sh</code>:</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command_exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  command</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows 10、Git Bash 和 Yarn 的解决方案</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> command_exists</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> winpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/tty</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><ol><li>在运行 Yarn 命令的地方使用它：</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .husky/pre-commit</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)/common.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div>`,13),e=[h];function l(o,p,k,d,r,c){return a(),i("div",null,e)}const m=s(n,[["render",l]]);export{F as __pageData,m as default};
